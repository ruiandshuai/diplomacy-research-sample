// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/session_bundle/manifest.proto

#ifndef PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto
#define PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto 

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto
namespace diplomacy {
namespace tensorflow {
namespace serving {
class AssetFile;
class AssetFileDefaultTypeInternal;
extern AssetFileDefaultTypeInternal _AssetFile_default_instance_;
class ClassificationSignature;
class ClassificationSignatureDefaultTypeInternal;
extern ClassificationSignatureDefaultTypeInternal _ClassificationSignature_default_instance_;
class GenericSignature;
class GenericSignatureDefaultTypeInternal;
extern GenericSignatureDefaultTypeInternal _GenericSignature_default_instance_;
class GenericSignature_MapEntry_DoNotUse;
class GenericSignature_MapEntry_DoNotUseDefaultTypeInternal;
extern GenericSignature_MapEntry_DoNotUseDefaultTypeInternal _GenericSignature_MapEntry_DoNotUse_default_instance_;
class RegressionSignature;
class RegressionSignatureDefaultTypeInternal;
extern RegressionSignatureDefaultTypeInternal _RegressionSignature_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class Signatures;
class SignaturesDefaultTypeInternal;
extern SignaturesDefaultTypeInternal _Signatures_default_instance_;
class Signatures_NamedSignaturesEntry_DoNotUse;
class Signatures_NamedSignaturesEntry_DoNotUseDefaultTypeInternal;
extern Signatures_NamedSignaturesEntry_DoNotUseDefaultTypeInternal _Signatures_NamedSignaturesEntry_DoNotUse_default_instance_;
class TensorBinding;
class TensorBindingDefaultTypeInternal;
extern TensorBindingDefaultTypeInternal _TensorBinding_default_instance_;
}  // namespace serving
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> ::diplomacy::tensorflow::serving::AssetFile* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::AssetFile>(Arena*);
template<> ::diplomacy::tensorflow::serving::ClassificationSignature* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::ClassificationSignature>(Arena*);
template<> ::diplomacy::tensorflow::serving::GenericSignature* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::GenericSignature>(Arena*);
template<> ::diplomacy::tensorflow::serving::GenericSignature_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::GenericSignature_MapEntry_DoNotUse>(Arena*);
template<> ::diplomacy::tensorflow::serving::RegressionSignature* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::RegressionSignature>(Arena*);
template<> ::diplomacy::tensorflow::serving::Signature* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::Signature>(Arena*);
template<> ::diplomacy::tensorflow::serving::Signatures* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::Signatures>(Arena*);
template<> ::diplomacy::tensorflow::serving::Signatures_NamedSignaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::Signatures_NamedSignaturesEntry_DoNotUse>(Arena*);
template<> ::diplomacy::tensorflow::serving::TensorBinding* Arena::CreateMaybeMessage<::diplomacy::tensorflow::serving::TensorBinding>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace diplomacy {
namespace tensorflow {
namespace serving {

// ===================================================================

class Signatures_NamedSignaturesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Signatures_NamedSignaturesEntry_DoNotUse, 
    ::std::string, ::diplomacy::tensorflow::serving::Signature,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Signatures_NamedSignaturesEntry_DoNotUse, 
    ::std::string, ::diplomacy::tensorflow::serving::Signature,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Signatures_NamedSignaturesEntry_DoNotUse();
  Signatures_NamedSignaturesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Signatures_NamedSignaturesEntry_DoNotUse& other);
  static const Signatures_NamedSignaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Signatures_NamedSignaturesEntry_DoNotUse*>(&_Signatures_NamedSignaturesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Signatures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.serving.Signatures) */ {
 public:
  Signatures();
  virtual ~Signatures();

  Signatures(const Signatures& from);

  inline Signatures& operator=(const Signatures& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signatures(Signatures&& from) noexcept
    : Signatures() {
    *this = ::std::move(from);
  }

  inline Signatures& operator=(Signatures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Signatures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signatures* internal_default_instance() {
    return reinterpret_cast<const Signatures*>(
               &_Signatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Signatures* other);
  friend void swap(Signatures& a, Signatures& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signatures* New() const final {
    return CreateMaybeMessage<Signatures>(NULL);
  }

  Signatures* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signatures>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signatures& from);
  void MergeFrom(const Signatures& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signatures* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .diplomacy.tensorflow.serving.Signature> named_signatures = 2;
  int named_signatures_size() const;
  void clear_named_signatures();
  static const int kNamedSignaturesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::Signature >&
      named_signatures() const;
  ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::Signature >*
      mutable_named_signatures();

  // .diplomacy.tensorflow.serving.Signature default_signature = 1;
  bool has_default_signature() const;
  void clear_default_signature();
  static const int kDefaultSignatureFieldNumber = 1;
  private:
  const ::diplomacy::tensorflow::serving::Signature& _internal_default_signature() const;
  public:
  const ::diplomacy::tensorflow::serving::Signature& default_signature() const;
  ::diplomacy::tensorflow::serving::Signature* release_default_signature();
  ::diplomacy::tensorflow::serving::Signature* mutable_default_signature();
  void set_allocated_default_signature(::diplomacy::tensorflow::serving::Signature* default_signature);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.serving.Signatures)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Signatures_NamedSignaturesEntry_DoNotUse,
      ::std::string, ::diplomacy::tensorflow::serving::Signature,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > named_signatures_;
  ::diplomacy::tensorflow::serving::Signature* default_signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TensorBinding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.serving.TensorBinding) */ {
 public:
  TensorBinding();
  virtual ~TensorBinding();

  TensorBinding(const TensorBinding& from);

  inline TensorBinding& operator=(const TensorBinding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorBinding(TensorBinding&& from) noexcept
    : TensorBinding() {
    *this = ::std::move(from);
  }

  inline TensorBinding& operator=(TensorBinding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorBinding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorBinding* internal_default_instance() {
    return reinterpret_cast<const TensorBinding*>(
               &_TensorBinding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TensorBinding* other);
  friend void swap(TensorBinding& a, TensorBinding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorBinding* New() const final {
    return CreateMaybeMessage<TensorBinding>(NULL);
  }

  TensorBinding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorBinding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TensorBinding& from);
  void MergeFrom(const TensorBinding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorBinding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tensor_name = 1;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 1;
  const ::std::string& tensor_name() const;
  void set_tensor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tensor_name(::std::string&& value);
  #endif
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  ::std::string* mutable_tensor_name();
  ::std::string* release_tensor_name();
  void set_allocated_tensor_name(::std::string* tensor_name);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.serving.TensorBinding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tensor_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AssetFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.serving.AssetFile) */ {
 public:
  AssetFile();
  virtual ~AssetFile();

  AssetFile(const AssetFile& from);

  inline AssetFile& operator=(const AssetFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssetFile(AssetFile&& from) noexcept
    : AssetFile() {
    *this = ::std::move(from);
  }

  inline AssetFile& operator=(AssetFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AssetFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssetFile* internal_default_instance() {
    return reinterpret_cast<const AssetFile*>(
               &_AssetFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AssetFile* other);
  friend void swap(AssetFile& a, AssetFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssetFile* New() const final {
    return CreateMaybeMessage<AssetFile>(NULL);
  }

  AssetFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssetFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssetFile& from);
  void MergeFrom(const AssetFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .diplomacy.tensorflow.serving.TensorBinding tensor_binding = 1;
  bool has_tensor_binding() const;
  void clear_tensor_binding();
  static const int kTensorBindingFieldNumber = 1;
  private:
  const ::diplomacy::tensorflow::serving::TensorBinding& _internal_tensor_binding() const;
  public:
  const ::diplomacy::tensorflow::serving::TensorBinding& tensor_binding() const;
  ::diplomacy::tensorflow::serving::TensorBinding* release_tensor_binding();
  ::diplomacy::tensorflow::serving::TensorBinding* mutable_tensor_binding();
  void set_allocated_tensor_binding(::diplomacy::tensorflow::serving::TensorBinding* tensor_binding);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.serving.AssetFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::diplomacy::tensorflow::serving::TensorBinding* tensor_binding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.serving.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  enum TypeCase {
    kRegressionSignature = 1,
    kClassificationSignature = 2,
    kGenericSignature = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Signature* other);
  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(NULL);
  }

  Signature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .diplomacy.tensorflow.serving.RegressionSignature regression_signature = 1;
  bool has_regression_signature() const;
  void clear_regression_signature();
  static const int kRegressionSignatureFieldNumber = 1;
  private:
  const ::diplomacy::tensorflow::serving::RegressionSignature& _internal_regression_signature() const;
  public:
  const ::diplomacy::tensorflow::serving::RegressionSignature& regression_signature() const;
  ::diplomacy::tensorflow::serving::RegressionSignature* release_regression_signature();
  ::diplomacy::tensorflow::serving::RegressionSignature* mutable_regression_signature();
  void set_allocated_regression_signature(::diplomacy::tensorflow::serving::RegressionSignature* regression_signature);

  // .diplomacy.tensorflow.serving.ClassificationSignature classification_signature = 2;
  bool has_classification_signature() const;
  void clear_classification_signature();
  static const int kClassificationSignatureFieldNumber = 2;
  private:
  const ::diplomacy::tensorflow::serving::ClassificationSignature& _internal_classification_signature() const;
  public:
  const ::diplomacy::tensorflow::serving::ClassificationSignature& classification_signature() const;
  ::diplomacy::tensorflow::serving::ClassificationSignature* release_classification_signature();
  ::diplomacy::tensorflow::serving::ClassificationSignature* mutable_classification_signature();
  void set_allocated_classification_signature(::diplomacy::tensorflow::serving::ClassificationSignature* classification_signature);

  // .diplomacy.tensorflow.serving.GenericSignature generic_signature = 3;
  bool has_generic_signature() const;
  void clear_generic_signature();
  static const int kGenericSignatureFieldNumber = 3;
  private:
  const ::diplomacy::tensorflow::serving::GenericSignature& _internal_generic_signature() const;
  public:
  const ::diplomacy::tensorflow::serving::GenericSignature& generic_signature() const;
  ::diplomacy::tensorflow::serving::GenericSignature* release_generic_signature();
  ::diplomacy::tensorflow::serving::GenericSignature* mutable_generic_signature();
  void set_allocated_generic_signature(::diplomacy::tensorflow::serving::GenericSignature* generic_signature);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.serving.Signature)
 private:
  void set_has_regression_signature();
  void set_has_classification_signature();
  void set_has_generic_signature();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::diplomacy::tensorflow::serving::RegressionSignature* regression_signature_;
    ::diplomacy::tensorflow::serving::ClassificationSignature* classification_signature_;
    ::diplomacy::tensorflow::serving::GenericSignature* generic_signature_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegressionSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.serving.RegressionSignature) */ {
 public:
  RegressionSignature();
  virtual ~RegressionSignature();

  RegressionSignature(const RegressionSignature& from);

  inline RegressionSignature& operator=(const RegressionSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegressionSignature(RegressionSignature&& from) noexcept
    : RegressionSignature() {
    *this = ::std::move(from);
  }

  inline RegressionSignature& operator=(RegressionSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegressionSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegressionSignature* internal_default_instance() {
    return reinterpret_cast<const RegressionSignature*>(
               &_RegressionSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RegressionSignature* other);
  friend void swap(RegressionSignature& a, RegressionSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegressionSignature* New() const final {
    return CreateMaybeMessage<RegressionSignature>(NULL);
  }

  RegressionSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegressionSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegressionSignature& from);
  void MergeFrom(const RegressionSignature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegressionSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .diplomacy.tensorflow.serving.TensorBinding input = 1;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  private:
  const ::diplomacy::tensorflow::serving::TensorBinding& _internal_input() const;
  public:
  const ::diplomacy::tensorflow::serving::TensorBinding& input() const;
  ::diplomacy::tensorflow::serving::TensorBinding* release_input();
  ::diplomacy::tensorflow::serving::TensorBinding* mutable_input();
  void set_allocated_input(::diplomacy::tensorflow::serving::TensorBinding* input);

  // .diplomacy.tensorflow.serving.TensorBinding output = 2;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  private:
  const ::diplomacy::tensorflow::serving::TensorBinding& _internal_output() const;
  public:
  const ::diplomacy::tensorflow::serving::TensorBinding& output() const;
  ::diplomacy::tensorflow::serving::TensorBinding* release_output();
  ::diplomacy::tensorflow::serving::TensorBinding* mutable_output();
  void set_allocated_output(::diplomacy::tensorflow::serving::TensorBinding* output);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.serving.RegressionSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::diplomacy::tensorflow::serving::TensorBinding* input_;
  ::diplomacy::tensorflow::serving::TensorBinding* output_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClassificationSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.serving.ClassificationSignature) */ {
 public:
  ClassificationSignature();
  virtual ~ClassificationSignature();

  ClassificationSignature(const ClassificationSignature& from);

  inline ClassificationSignature& operator=(const ClassificationSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassificationSignature(ClassificationSignature&& from) noexcept
    : ClassificationSignature() {
    *this = ::std::move(from);
  }

  inline ClassificationSignature& operator=(ClassificationSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassificationSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationSignature* internal_default_instance() {
    return reinterpret_cast<const ClassificationSignature*>(
               &_ClassificationSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ClassificationSignature* other);
  friend void swap(ClassificationSignature& a, ClassificationSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassificationSignature* New() const final {
    return CreateMaybeMessage<ClassificationSignature>(NULL);
  }

  ClassificationSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClassificationSignature& from);
  void MergeFrom(const ClassificationSignature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .diplomacy.tensorflow.serving.TensorBinding input = 1;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  private:
  const ::diplomacy::tensorflow::serving::TensorBinding& _internal_input() const;
  public:
  const ::diplomacy::tensorflow::serving::TensorBinding& input() const;
  ::diplomacy::tensorflow::serving::TensorBinding* release_input();
  ::diplomacy::tensorflow::serving::TensorBinding* mutable_input();
  void set_allocated_input(::diplomacy::tensorflow::serving::TensorBinding* input);

  // .diplomacy.tensorflow.serving.TensorBinding classes = 2;
  bool has_classes() const;
  void clear_classes();
  static const int kClassesFieldNumber = 2;
  private:
  const ::diplomacy::tensorflow::serving::TensorBinding& _internal_classes() const;
  public:
  const ::diplomacy::tensorflow::serving::TensorBinding& classes() const;
  ::diplomacy::tensorflow::serving::TensorBinding* release_classes();
  ::diplomacy::tensorflow::serving::TensorBinding* mutable_classes();
  void set_allocated_classes(::diplomacy::tensorflow::serving::TensorBinding* classes);

  // .diplomacy.tensorflow.serving.TensorBinding scores = 3;
  bool has_scores() const;
  void clear_scores();
  static const int kScoresFieldNumber = 3;
  private:
  const ::diplomacy::tensorflow::serving::TensorBinding& _internal_scores() const;
  public:
  const ::diplomacy::tensorflow::serving::TensorBinding& scores() const;
  ::diplomacy::tensorflow::serving::TensorBinding* release_scores();
  ::diplomacy::tensorflow::serving::TensorBinding* mutable_scores();
  void set_allocated_scores(::diplomacy::tensorflow::serving::TensorBinding* scores);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.serving.ClassificationSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::diplomacy::tensorflow::serving::TensorBinding* input_;
  ::diplomacy::tensorflow::serving::TensorBinding* classes_;
  ::diplomacy::tensorflow::serving::TensorBinding* scores_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GenericSignature_MapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GenericSignature_MapEntry_DoNotUse, 
    ::std::string, ::diplomacy::tensorflow::serving::TensorBinding,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GenericSignature_MapEntry_DoNotUse, 
    ::std::string, ::diplomacy::tensorflow::serving::TensorBinding,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GenericSignature_MapEntry_DoNotUse();
  GenericSignature_MapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GenericSignature_MapEntry_DoNotUse& other);
  static const GenericSignature_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericSignature_MapEntry_DoNotUse*>(&_GenericSignature_MapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GenericSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.serving.GenericSignature) */ {
 public:
  GenericSignature();
  virtual ~GenericSignature();

  GenericSignature(const GenericSignature& from);

  inline GenericSignature& operator=(const GenericSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GenericSignature(GenericSignature&& from) noexcept
    : GenericSignature() {
    *this = ::std::move(from);
  }

  inline GenericSignature& operator=(GenericSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenericSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericSignature* internal_default_instance() {
    return reinterpret_cast<const GenericSignature*>(
               &_GenericSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GenericSignature* other);
  friend void swap(GenericSignature& a, GenericSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GenericSignature* New() const final {
    return CreateMaybeMessage<GenericSignature>(NULL);
  }

  GenericSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GenericSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GenericSignature& from);
  void MergeFrom(const GenericSignature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .diplomacy.tensorflow.serving.TensorBinding> map = 1;
  int map_size() const;
  void clear_map();
  static const int kMapFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::TensorBinding >&
      map() const;
  ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::TensorBinding >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.serving.GenericSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      GenericSignature_MapEntry_DoNotUse,
      ::std::string, ::diplomacy::tensorflow::serving::TensorBinding,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Signatures

// .diplomacy.tensorflow.serving.Signature default_signature = 1;
inline bool Signatures::has_default_signature() const {
  return this != internal_default_instance() && default_signature_ != NULL;
}
inline void Signatures::clear_default_signature() {
  if (GetArenaNoVirtual() == NULL && default_signature_ != NULL) {
    delete default_signature_;
  }
  default_signature_ = NULL;
}
inline const ::diplomacy::tensorflow::serving::Signature& Signatures::_internal_default_signature() const {
  return *default_signature_;
}
inline const ::diplomacy::tensorflow::serving::Signature& Signatures::default_signature() const {
  const ::diplomacy::tensorflow::serving::Signature* p = default_signature_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.Signatures.default_signature)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::serving::Signature*>(
      &::diplomacy::tensorflow::serving::_Signature_default_instance_);
}
inline ::diplomacy::tensorflow::serving::Signature* Signatures::release_default_signature() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.Signatures.default_signature)
  
  ::diplomacy::tensorflow::serving::Signature* temp = default_signature_;
  default_signature_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::serving::Signature* Signatures::mutable_default_signature() {
  
  if (default_signature_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::serving::Signature>(GetArenaNoVirtual());
    default_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.Signatures.default_signature)
  return default_signature_;
}
inline void Signatures::set_allocated_default_signature(::diplomacy::tensorflow::serving::Signature* default_signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_signature_;
  }
  if (default_signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_signature, submessage_arena);
    }
    
  } else {
    
  }
  default_signature_ = default_signature;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.Signatures.default_signature)
}

// map<string, .diplomacy.tensorflow.serving.Signature> named_signatures = 2;
inline int Signatures::named_signatures_size() const {
  return named_signatures_.size();
}
inline void Signatures::clear_named_signatures() {
  named_signatures_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::Signature >&
Signatures::named_signatures() const {
  // @@protoc_insertion_point(field_map:diplomacy.tensorflow.serving.Signatures.named_signatures)
  return named_signatures_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::Signature >*
Signatures::mutable_named_signatures() {
  // @@protoc_insertion_point(field_mutable_map:diplomacy.tensorflow.serving.Signatures.named_signatures)
  return named_signatures_.MutableMap();
}

// -------------------------------------------------------------------

// TensorBinding

// string tensor_name = 1;
inline void TensorBinding::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorBinding::tensor_name() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void TensorBinding::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
}
#if LANG_CXX11
inline void TensorBinding::set_tensor_name(::std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
}
#endif
inline void TensorBinding::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
}
inline void TensorBinding::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
}
inline ::std::string* TensorBinding::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorBinding::release_tensor_name() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorBinding::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.TensorBinding.tensor_name)
}

// -------------------------------------------------------------------

// AssetFile

// .diplomacy.tensorflow.serving.TensorBinding tensor_binding = 1;
inline bool AssetFile::has_tensor_binding() const {
  return this != internal_default_instance() && tensor_binding_ != NULL;
}
inline void AssetFile::clear_tensor_binding() {
  if (GetArenaNoVirtual() == NULL && tensor_binding_ != NULL) {
    delete tensor_binding_;
  }
  tensor_binding_ = NULL;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& AssetFile::_internal_tensor_binding() const {
  return *tensor_binding_;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& AssetFile::tensor_binding() const {
  const ::diplomacy::tensorflow::serving::TensorBinding* p = tensor_binding_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.AssetFile.tensor_binding)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::serving::TensorBinding*>(
      &::diplomacy::tensorflow::serving::_TensorBinding_default_instance_);
}
inline ::diplomacy::tensorflow::serving::TensorBinding* AssetFile::release_tensor_binding() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.AssetFile.tensor_binding)
  
  ::diplomacy::tensorflow::serving::TensorBinding* temp = tensor_binding_;
  tensor_binding_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::serving::TensorBinding* AssetFile::mutable_tensor_binding() {
  
  if (tensor_binding_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::serving::TensorBinding>(GetArenaNoVirtual());
    tensor_binding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.AssetFile.tensor_binding)
  return tensor_binding_;
}
inline void AssetFile::set_allocated_tensor_binding(::diplomacy::tensorflow::serving::TensorBinding* tensor_binding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_binding_;
  }
  if (tensor_binding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tensor_binding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tensor_binding, submessage_arena);
    }
    
  } else {
    
  }
  tensor_binding_ = tensor_binding;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.AssetFile.tensor_binding)
}

// string filename = 2;
inline void AssetFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssetFile::filename() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.AssetFile.filename)
  return filename_.GetNoArena();
}
inline void AssetFile::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.serving.AssetFile.filename)
}
#if LANG_CXX11
inline void AssetFile::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.serving.AssetFile.filename)
}
#endif
inline void AssetFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.serving.AssetFile.filename)
}
inline void AssetFile::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.serving.AssetFile.filename)
}
inline ::std::string* AssetFile::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.AssetFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssetFile::release_filename() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.AssetFile.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssetFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.AssetFile.filename)
}

// -------------------------------------------------------------------

// Signature

// .diplomacy.tensorflow.serving.RegressionSignature regression_signature = 1;
inline bool Signature::has_regression_signature() const {
  return type_case() == kRegressionSignature;
}
inline void Signature::set_has_regression_signature() {
  _oneof_case_[0] = kRegressionSignature;
}
inline void Signature::clear_regression_signature() {
  if (has_regression_signature()) {
    delete type_.regression_signature_;
    clear_has_type();
  }
}
inline const ::diplomacy::tensorflow::serving::RegressionSignature& Signature::_internal_regression_signature() const {
  return *type_.regression_signature_;
}
inline ::diplomacy::tensorflow::serving::RegressionSignature* Signature::release_regression_signature() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.Signature.regression_signature)
  if (has_regression_signature()) {
    clear_has_type();
      ::diplomacy::tensorflow::serving::RegressionSignature* temp = type_.regression_signature_;
    type_.regression_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::diplomacy::tensorflow::serving::RegressionSignature& Signature::regression_signature() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.Signature.regression_signature)
  return has_regression_signature()
      ? *type_.regression_signature_
      : *reinterpret_cast< ::diplomacy::tensorflow::serving::RegressionSignature*>(&::diplomacy::tensorflow::serving::_RegressionSignature_default_instance_);
}
inline ::diplomacy::tensorflow::serving::RegressionSignature* Signature::mutable_regression_signature() {
  if (!has_regression_signature()) {
    clear_type();
    set_has_regression_signature();
    type_.regression_signature_ = CreateMaybeMessage< ::diplomacy::tensorflow::serving::RegressionSignature >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.Signature.regression_signature)
  return type_.regression_signature_;
}

// .diplomacy.tensorflow.serving.ClassificationSignature classification_signature = 2;
inline bool Signature::has_classification_signature() const {
  return type_case() == kClassificationSignature;
}
inline void Signature::set_has_classification_signature() {
  _oneof_case_[0] = kClassificationSignature;
}
inline void Signature::clear_classification_signature() {
  if (has_classification_signature()) {
    delete type_.classification_signature_;
    clear_has_type();
  }
}
inline const ::diplomacy::tensorflow::serving::ClassificationSignature& Signature::_internal_classification_signature() const {
  return *type_.classification_signature_;
}
inline ::diplomacy::tensorflow::serving::ClassificationSignature* Signature::release_classification_signature() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.Signature.classification_signature)
  if (has_classification_signature()) {
    clear_has_type();
      ::diplomacy::tensorflow::serving::ClassificationSignature* temp = type_.classification_signature_;
    type_.classification_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::diplomacy::tensorflow::serving::ClassificationSignature& Signature::classification_signature() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.Signature.classification_signature)
  return has_classification_signature()
      ? *type_.classification_signature_
      : *reinterpret_cast< ::diplomacy::tensorflow::serving::ClassificationSignature*>(&::diplomacy::tensorflow::serving::_ClassificationSignature_default_instance_);
}
inline ::diplomacy::tensorflow::serving::ClassificationSignature* Signature::mutable_classification_signature() {
  if (!has_classification_signature()) {
    clear_type();
    set_has_classification_signature();
    type_.classification_signature_ = CreateMaybeMessage< ::diplomacy::tensorflow::serving::ClassificationSignature >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.Signature.classification_signature)
  return type_.classification_signature_;
}

// .diplomacy.tensorflow.serving.GenericSignature generic_signature = 3;
inline bool Signature::has_generic_signature() const {
  return type_case() == kGenericSignature;
}
inline void Signature::set_has_generic_signature() {
  _oneof_case_[0] = kGenericSignature;
}
inline void Signature::clear_generic_signature() {
  if (has_generic_signature()) {
    delete type_.generic_signature_;
    clear_has_type();
  }
}
inline const ::diplomacy::tensorflow::serving::GenericSignature& Signature::_internal_generic_signature() const {
  return *type_.generic_signature_;
}
inline ::diplomacy::tensorflow::serving::GenericSignature* Signature::release_generic_signature() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.Signature.generic_signature)
  if (has_generic_signature()) {
    clear_has_type();
      ::diplomacy::tensorflow::serving::GenericSignature* temp = type_.generic_signature_;
    type_.generic_signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::diplomacy::tensorflow::serving::GenericSignature& Signature::generic_signature() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.Signature.generic_signature)
  return has_generic_signature()
      ? *type_.generic_signature_
      : *reinterpret_cast< ::diplomacy::tensorflow::serving::GenericSignature*>(&::diplomacy::tensorflow::serving::_GenericSignature_default_instance_);
}
inline ::diplomacy::tensorflow::serving::GenericSignature* Signature::mutable_generic_signature() {
  if (!has_generic_signature()) {
    clear_type();
    set_has_generic_signature();
    type_.generic_signature_ = CreateMaybeMessage< ::diplomacy::tensorflow::serving::GenericSignature >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.Signature.generic_signature)
  return type_.generic_signature_;
}

inline bool Signature::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Signature::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Signature::TypeCase Signature::type_case() const {
  return Signature::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RegressionSignature

// .diplomacy.tensorflow.serving.TensorBinding input = 1;
inline bool RegressionSignature::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void RegressionSignature::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& RegressionSignature::_internal_input() const {
  return *input_;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& RegressionSignature::input() const {
  const ::diplomacy::tensorflow::serving::TensorBinding* p = input_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.RegressionSignature.input)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::serving::TensorBinding*>(
      &::diplomacy::tensorflow::serving::_TensorBinding_default_instance_);
}
inline ::diplomacy::tensorflow::serving::TensorBinding* RegressionSignature::release_input() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.RegressionSignature.input)
  
  ::diplomacy::tensorflow::serving::TensorBinding* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::serving::TensorBinding* RegressionSignature::mutable_input() {
  
  if (input_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::serving::TensorBinding>(GetArenaNoVirtual());
    input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.RegressionSignature.input)
  return input_;
}
inline void RegressionSignature::set_allocated_input(::diplomacy::tensorflow::serving::TensorBinding* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.RegressionSignature.input)
}

// .diplomacy.tensorflow.serving.TensorBinding output = 2;
inline bool RegressionSignature::has_output() const {
  return this != internal_default_instance() && output_ != NULL;
}
inline void RegressionSignature::clear_output() {
  if (GetArenaNoVirtual() == NULL && output_ != NULL) {
    delete output_;
  }
  output_ = NULL;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& RegressionSignature::_internal_output() const {
  return *output_;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& RegressionSignature::output() const {
  const ::diplomacy::tensorflow::serving::TensorBinding* p = output_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.RegressionSignature.output)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::serving::TensorBinding*>(
      &::diplomacy::tensorflow::serving::_TensorBinding_default_instance_);
}
inline ::diplomacy::tensorflow::serving::TensorBinding* RegressionSignature::release_output() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.RegressionSignature.output)
  
  ::diplomacy::tensorflow::serving::TensorBinding* temp = output_;
  output_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::serving::TensorBinding* RegressionSignature::mutable_output() {
  
  if (output_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::serving::TensorBinding>(GetArenaNoVirtual());
    output_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.RegressionSignature.output)
  return output_;
}
inline void RegressionSignature::set_allocated_output(::diplomacy::tensorflow::serving::TensorBinding* output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete output_;
  }
  if (output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.RegressionSignature.output)
}

// -------------------------------------------------------------------

// ClassificationSignature

// .diplomacy.tensorflow.serving.TensorBinding input = 1;
inline bool ClassificationSignature::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void ClassificationSignature::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& ClassificationSignature::_internal_input() const {
  return *input_;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& ClassificationSignature::input() const {
  const ::diplomacy::tensorflow::serving::TensorBinding* p = input_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.ClassificationSignature.input)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::serving::TensorBinding*>(
      &::diplomacy::tensorflow::serving::_TensorBinding_default_instance_);
}
inline ::diplomacy::tensorflow::serving::TensorBinding* ClassificationSignature::release_input() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.ClassificationSignature.input)
  
  ::diplomacy::tensorflow::serving::TensorBinding* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_input() {
  
  if (input_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::serving::TensorBinding>(GetArenaNoVirtual());
    input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.ClassificationSignature.input)
  return input_;
}
inline void ClassificationSignature::set_allocated_input(::diplomacy::tensorflow::serving::TensorBinding* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_;
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.ClassificationSignature.input)
}

// .diplomacy.tensorflow.serving.TensorBinding classes = 2;
inline bool ClassificationSignature::has_classes() const {
  return this != internal_default_instance() && classes_ != NULL;
}
inline void ClassificationSignature::clear_classes() {
  if (GetArenaNoVirtual() == NULL && classes_ != NULL) {
    delete classes_;
  }
  classes_ = NULL;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& ClassificationSignature::_internal_classes() const {
  return *classes_;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& ClassificationSignature::classes() const {
  const ::diplomacy::tensorflow::serving::TensorBinding* p = classes_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.ClassificationSignature.classes)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::serving::TensorBinding*>(
      &::diplomacy::tensorflow::serving::_TensorBinding_default_instance_);
}
inline ::diplomacy::tensorflow::serving::TensorBinding* ClassificationSignature::release_classes() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.ClassificationSignature.classes)
  
  ::diplomacy::tensorflow::serving::TensorBinding* temp = classes_;
  classes_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_classes() {
  
  if (classes_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::serving::TensorBinding>(GetArenaNoVirtual());
    classes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.ClassificationSignature.classes)
  return classes_;
}
inline void ClassificationSignature::set_allocated_classes(::diplomacy::tensorflow::serving::TensorBinding* classes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete classes_;
  }
  if (classes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      classes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classes, submessage_arena);
    }
    
  } else {
    
  }
  classes_ = classes;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.ClassificationSignature.classes)
}

// .diplomacy.tensorflow.serving.TensorBinding scores = 3;
inline bool ClassificationSignature::has_scores() const {
  return this != internal_default_instance() && scores_ != NULL;
}
inline void ClassificationSignature::clear_scores() {
  if (GetArenaNoVirtual() == NULL && scores_ != NULL) {
    delete scores_;
  }
  scores_ = NULL;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& ClassificationSignature::_internal_scores() const {
  return *scores_;
}
inline const ::diplomacy::tensorflow::serving::TensorBinding& ClassificationSignature::scores() const {
  const ::diplomacy::tensorflow::serving::TensorBinding* p = scores_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.serving.ClassificationSignature.scores)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::serving::TensorBinding*>(
      &::diplomacy::tensorflow::serving::_TensorBinding_default_instance_);
}
inline ::diplomacy::tensorflow::serving::TensorBinding* ClassificationSignature::release_scores() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.serving.ClassificationSignature.scores)
  
  ::diplomacy::tensorflow::serving::TensorBinding* temp = scores_;
  scores_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::serving::TensorBinding* ClassificationSignature::mutable_scores() {
  
  if (scores_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::serving::TensorBinding>(GetArenaNoVirtual());
    scores_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.serving.ClassificationSignature.scores)
  return scores_;
}
inline void ClassificationSignature::set_allocated_scores(::diplomacy::tensorflow::serving::TensorBinding* scores) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scores_;
  }
  if (scores) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scores = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scores, submessage_arena);
    }
    
  } else {
    
  }
  scores_ = scores;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.serving.ClassificationSignature.scores)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GenericSignature

// map<string, .diplomacy.tensorflow.serving.TensorBinding> map = 1;
inline int GenericSignature::map_size() const {
  return map_.size();
}
inline void GenericSignature::clear_map() {
  map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::TensorBinding >&
GenericSignature::map() const {
  // @@protoc_insertion_point(field_map:diplomacy.tensorflow.serving.GenericSignature.map)
  return map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::serving::TensorBinding >*
GenericSignature::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:diplomacy.tensorflow.serving.GenericSignature.map)
  return map_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow
}  // namespace diplomacy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fsession_5fbundle_2fmanifest_2eproto
