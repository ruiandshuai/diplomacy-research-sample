// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto

#include "diplomacy_tensorflow/contrib/tensorboard/plugins/projector/projector_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpriteMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EmbeddingInfo;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto
namespace diplomacy {
namespace tensorflow {
class SpriteMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpriteMetadata>
      _instance;
} _SpriteMetadata_default_instance_;
class EmbeddingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmbeddingInfo>
      _instance;
} _EmbeddingInfo_default_instance_;
class ProjectorConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectorConfig>
      _instance;
} _ProjectorConfig_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto {
static void InitDefaultsSpriteMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_SpriteMetadata_default_instance_;
    new (ptr) ::diplomacy::tensorflow::SpriteMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::SpriteMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpriteMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpriteMetadata}, {}};

static void InitDefaultsEmbeddingInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_EmbeddingInfo_default_instance_;
    new (ptr) ::diplomacy::tensorflow::EmbeddingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::EmbeddingInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EmbeddingInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEmbeddingInfo}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_SpriteMetadata.base,}};

static void InitDefaultsProjectorConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_ProjectorConfig_default_instance_;
    new (ptr) ::diplomacy::tensorflow::ProjectorConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::ProjectorConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProjectorConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProjectorConfig}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_EmbeddingInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SpriteMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmbeddingInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectorConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::SpriteMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::SpriteMetadata, image_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::SpriteMetadata, single_image_dim_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::EmbeddingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::EmbeddingInfo, tensor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::EmbeddingInfo, metadata_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::EmbeddingInfo, bookmarks_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::EmbeddingInfo, tensor_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::EmbeddingInfo, sprite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::EmbeddingInfo, tensor_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ProjectorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ProjectorConfig, model_checkpoint_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ProjectorConfig, embeddings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ProjectorConfig, model_checkpoint_dir_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::SpriteMetadata)},
  { 7, -1, sizeof(::diplomacy::tensorflow::EmbeddingInfo)},
  { 18, -1, sizeof(::diplomacy::tensorflow::ProjectorConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_SpriteMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_EmbeddingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_ProjectorConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nQdiplomacy_tensorflow/contrib/tensorboa"
      "rd/plugins/projector/projector_config.pr"
      "oto\022\024diplomacy.tensorflow\">\n\016SpriteMetad"
      "ata\022\022\n\nimage_path\030\001 \001(\t\022\030\n\020single_image_"
      "dim\030\002 \003(\r\"\264\001\n\rEmbeddingInfo\022\023\n\013tensor_na"
      "me\030\001 \001(\t\022\025\n\rmetadata_path\030\002 \001(\t\022\026\n\016bookm"
      "arks_path\030\003 \001(\t\022\024\n\014tensor_shape\030\004 \003(\r\0224\n"
      "\006sprite\030\005 \001(\0132$.diplomacy.tensorflow.Spr"
      "iteMetadata\022\023\n\013tensor_path\030\006 \001(\t\"\207\001\n\017Pro"
      "jectorConfig\022\035\n\025model_checkpoint_path\030\001 "
      "\001(\t\0227\n\nembeddings\030\002 \003(\0132#.diplomacy.tens"
      "orflow.EmbeddingInfo\022\034\n\024model_checkpoint"
      "_dir\030\003 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto
namespace diplomacy {
namespace tensorflow {

// ===================================================================

void SpriteMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpriteMetadata::kImagePathFieldNumber;
const int SpriteMetadata::kSingleImageDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpriteMetadata::SpriteMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_SpriteMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.SpriteMetadata)
}
SpriteMetadata::SpriteMetadata(const SpriteMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      single_image_dim_(from.single_image_dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_path().size() > 0) {
    image_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_path_);
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.SpriteMetadata)
}

void SpriteMetadata::SharedCtor() {
  image_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SpriteMetadata::~SpriteMetadata() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.SpriteMetadata)
  SharedDtor();
}

void SpriteMetadata::SharedDtor() {
  image_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpriteMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpriteMetadata::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpriteMetadata& SpriteMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_SpriteMetadata.base);
  return *internal_default_instance();
}


void SpriteMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.SpriteMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_image_dim_.Clear();
  image_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SpriteMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.SpriteMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_path().data(), static_cast<int>(this->image_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.SpriteMetadata.image_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 single_image_dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_single_image_dim())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_single_image_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.SpriteMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.SpriteMetadata)
  return false;
#undef DO_
}

void SpriteMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.SpriteMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_path = 1;
  if (this->image_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_path().data(), static_cast<int>(this->image_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.SpriteMetadata.image_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_path(), output);
  }

  // repeated uint32 single_image_dim = 2;
  if (this->single_image_dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _single_image_dim_cached_byte_size_));
  }
  for (int i = 0, n = this->single_image_dim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->single_image_dim(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.SpriteMetadata)
}

::google::protobuf::uint8* SpriteMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.SpriteMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_path = 1;
  if (this->image_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_path().data(), static_cast<int>(this->image_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.SpriteMetadata.image_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_path(), target);
  }

  // repeated uint32 single_image_dim = 2;
  if (this->single_image_dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _single_image_dim_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->single_image_dim_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.SpriteMetadata)
  return target;
}

size_t SpriteMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.SpriteMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 single_image_dim = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->single_image_dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _single_image_dim_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string image_path = 1;
  if (this->image_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpriteMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.SpriteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SpriteMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpriteMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.SpriteMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.SpriteMetadata)
    MergeFrom(*source);
  }
}

void SpriteMetadata::MergeFrom(const SpriteMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.SpriteMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  single_image_dim_.MergeFrom(from.single_image_dim_);
  if (from.image_path().size() > 0) {

    image_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_path_);
  }
}

void SpriteMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.SpriteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteMetadata::CopyFrom(const SpriteMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.SpriteMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteMetadata::IsInitialized() const {
  return true;
}

void SpriteMetadata::Swap(SpriteMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpriteMetadata::InternalSwap(SpriteMetadata* other) {
  using std::swap;
  single_image_dim_.InternalSwap(&other->single_image_dim_);
  image_path_.Swap(&other->image_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpriteMetadata::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EmbeddingInfo::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::_EmbeddingInfo_default_instance_._instance.get_mutable()->sprite_ = const_cast< ::diplomacy::tensorflow::SpriteMetadata*>(
      ::diplomacy::tensorflow::SpriteMetadata::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbeddingInfo::kTensorNameFieldNumber;
const int EmbeddingInfo::kMetadataPathFieldNumber;
const int EmbeddingInfo::kBookmarksPathFieldNumber;
const int EmbeddingInfo::kTensorShapeFieldNumber;
const int EmbeddingInfo::kSpriteFieldNumber;
const int EmbeddingInfo::kTensorPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbeddingInfo::EmbeddingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_EmbeddingInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.EmbeddingInfo)
}
EmbeddingInfo::EmbeddingInfo(const EmbeddingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tensor_shape_(from.tensor_shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  metadata_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metadata_path().size() > 0) {
    metadata_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_path_);
  }
  bookmarks_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bookmarks_path().size() > 0) {
    bookmarks_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookmarks_path_);
  }
  tensor_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_path().size() > 0) {
    tensor_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_path_);
  }
  if (from.has_sprite()) {
    sprite_ = new ::diplomacy::tensorflow::SpriteMetadata(*from.sprite_);
  } else {
    sprite_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.EmbeddingInfo)
}

void EmbeddingInfo::SharedCtor() {
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sprite_ = NULL;
}

EmbeddingInfo::~EmbeddingInfo() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.EmbeddingInfo)
  SharedDtor();
}

void EmbeddingInfo::SharedDtor() {
  tensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sprite_;
}

void EmbeddingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EmbeddingInfo::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmbeddingInfo& EmbeddingInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_EmbeddingInfo.base);
  return *internal_default_instance();
}


void EmbeddingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.EmbeddingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_shape_.Clear();
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bookmarks_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tensor_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && sprite_ != NULL) {
    delete sprite_;
  }
  sprite_ = NULL;
  _internal_metadata_.Clear();
}

bool EmbeddingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.EmbeddingInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tensor_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.EmbeddingInfo.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string metadata_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metadata_path().data(), static_cast<int>(this->metadata_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.EmbeddingInfo.metadata_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bookmarks_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bookmarks_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bookmarks_path().data(), static_cast<int>(this->bookmarks_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.EmbeddingInfo.bookmarks_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tensor_shape = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tensor_shape())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_tensor_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.SpriteMetadata sprite = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sprite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_path().data(), static_cast<int>(this->tensor_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.EmbeddingInfo.tensor_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.EmbeddingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.EmbeddingInfo)
  return false;
#undef DO_
}

void EmbeddingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.EmbeddingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tensor_name(), output);
  }

  // string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_path().data(), static_cast<int>(this->metadata_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.metadata_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->metadata_path(), output);
  }

  // string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bookmarks_path().data(), static_cast<int>(this->bookmarks_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.bookmarks_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bookmarks_path(), output);
  }

  // repeated uint32 tensor_shape = 4;
  if (this->tensor_shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tensor_shape_cached_byte_size_));
  }
  for (int i = 0, n = this->tensor_shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tensor_shape(i), output);
  }

  // .diplomacy.tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_sprite(), output);
  }

  // string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_path().data(), static_cast<int>(this->tensor_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.tensor_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tensor_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.EmbeddingInfo)
}

::google::protobuf::uint8* EmbeddingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.EmbeddingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tensor_name(), target);
  }

  // string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metadata_path().data(), static_cast<int>(this->metadata_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.metadata_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metadata_path(), target);
  }

  // string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bookmarks_path().data(), static_cast<int>(this->bookmarks_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.bookmarks_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bookmarks_path(), target);
  }

  // repeated uint32 tensor_shape = 4;
  if (this->tensor_shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tensor_shape_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tensor_shape_, target);
  }

  // .diplomacy.tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_sprite(), deterministic, target);
  }

  // string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_path().data(), static_cast<int>(this->tensor_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.EmbeddingInfo.tensor_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tensor_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.EmbeddingInfo)
  return target;
}

size_t EmbeddingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.EmbeddingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 tensor_shape = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tensor_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tensor_shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string tensor_name = 1;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // string metadata_path = 2;
  if (this->metadata_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata_path());
  }

  // string bookmarks_path = 3;
  if (this->bookmarks_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bookmarks_path());
  }

  // string tensor_path = 6;
  if (this->tensor_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_path());
  }

  // .diplomacy.tensorflow.SpriteMetadata sprite = 5;
  if (this->has_sprite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sprite_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmbeddingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.EmbeddingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbeddingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmbeddingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.EmbeddingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.EmbeddingInfo)
    MergeFrom(*source);
  }
}

void EmbeddingInfo::MergeFrom(const EmbeddingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.EmbeddingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_shape_.MergeFrom(from.tensor_shape_);
  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.metadata_path().size() > 0) {

    metadata_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_path_);
  }
  if (from.bookmarks_path().size() > 0) {

    bookmarks_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bookmarks_path_);
  }
  if (from.tensor_path().size() > 0) {

    tensor_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_path_);
  }
  if (from.has_sprite()) {
    mutable_sprite()->::diplomacy::tensorflow::SpriteMetadata::MergeFrom(from.sprite());
  }
}

void EmbeddingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.EmbeddingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddingInfo::CopyFrom(const EmbeddingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.EmbeddingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddingInfo::IsInitialized() const {
  return true;
}

void EmbeddingInfo::Swap(EmbeddingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbeddingInfo::InternalSwap(EmbeddingInfo* other) {
  using std::swap;
  tensor_shape_.InternalSwap(&other->tensor_shape_);
  tensor_name_.Swap(&other->tensor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  metadata_path_.Swap(&other->metadata_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bookmarks_path_.Swap(&other->bookmarks_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tensor_path_.Swap(&other->tensor_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sprite_, other->sprite_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EmbeddingInfo::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjectorConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectorConfig::kModelCheckpointPathFieldNumber;
const int ProjectorConfig::kEmbeddingsFieldNumber;
const int ProjectorConfig::kModelCheckpointDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectorConfig::ProjectorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_ProjectorConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.ProjectorConfig)
}
ProjectorConfig::ProjectorConfig(const ProjectorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      embeddings_(from.embeddings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_checkpoint_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_checkpoint_path().size() > 0) {
    model_checkpoint_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_checkpoint_path_);
  }
  model_checkpoint_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_checkpoint_dir().size() > 0) {
    model_checkpoint_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_checkpoint_dir_);
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.ProjectorConfig)
}

void ProjectorConfig::SharedCtor() {
  model_checkpoint_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProjectorConfig::~ProjectorConfig() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.ProjectorConfig)
  SharedDtor();
}

void ProjectorConfig::SharedDtor() {
  model_checkpoint_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProjectorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProjectorConfig::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjectorConfig& ProjectorConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::scc_info_ProjectorConfig.base);
  return *internal_default_instance();
}


void ProjectorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.ProjectorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  embeddings_.Clear();
  model_checkpoint_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_checkpoint_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ProjectorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.ProjectorConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_checkpoint_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_checkpoint_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_checkpoint_path().data(), static_cast<int>(this->model_checkpoint_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.ProjectorConfig.model_checkpoint_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .diplomacy.tensorflow.EmbeddingInfo embeddings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_embeddings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_checkpoint_dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_checkpoint_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_checkpoint_dir().data(), static_cast<int>(this->model_checkpoint_dir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.ProjectorConfig.model_checkpoint_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.ProjectorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.ProjectorConfig)
  return false;
#undef DO_
}

void ProjectorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.ProjectorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_path().data(), static_cast<int>(this->model_checkpoint_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.ProjectorConfig.model_checkpoint_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_checkpoint_path(), output);
  }

  // repeated .diplomacy.tensorflow.EmbeddingInfo embeddings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->embeddings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->embeddings(static_cast<int>(i)),
      output);
  }

  // string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_dir().data(), static_cast<int>(this->model_checkpoint_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.ProjectorConfig.model_checkpoint_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_checkpoint_dir(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.ProjectorConfig)
}

::google::protobuf::uint8* ProjectorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.ProjectorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_path().data(), static_cast<int>(this->model_checkpoint_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.ProjectorConfig.model_checkpoint_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_checkpoint_path(), target);
  }

  // repeated .diplomacy.tensorflow.EmbeddingInfo embeddings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->embeddings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->embeddings(static_cast<int>(i)), deterministic, target);
  }

  // string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_dir().data(), static_cast<int>(this->model_checkpoint_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.ProjectorConfig.model_checkpoint_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model_checkpoint_dir(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.ProjectorConfig)
  return target;
}

size_t ProjectorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.ProjectorConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.EmbeddingInfo embeddings = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->embeddings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->embeddings(static_cast<int>(i)));
    }
  }

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_checkpoint_path());
  }

  // string model_checkpoint_dir = 3;
  if (this->model_checkpoint_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_checkpoint_dir());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.ProjectorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.ProjectorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.ProjectorConfig)
    MergeFrom(*source);
  }
}

void ProjectorConfig::MergeFrom(const ProjectorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.ProjectorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  embeddings_.MergeFrom(from.embeddings_);
  if (from.model_checkpoint_path().size() > 0) {

    model_checkpoint_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_checkpoint_path_);
  }
  if (from.model_checkpoint_dir().size() > 0) {

    model_checkpoint_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_checkpoint_dir_);
  }
}

void ProjectorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.ProjectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectorConfig::CopyFrom(const ProjectorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.ProjectorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectorConfig::IsInitialized() const {
  return true;
}

void ProjectorConfig::Swap(ProjectorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectorConfig::InternalSwap(ProjectorConfig* other) {
  using std::swap;
  CastToBase(&embeddings_)->InternalSwap(CastToBase(&other->embeddings_));
  model_checkpoint_path_.Swap(&other->model_checkpoint_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_checkpoint_dir_.Swap(&other->model_checkpoint_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProjectorConfig::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensorboard_2fplugins_2fprojector_2fprojector_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::SpriteMetadata* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::SpriteMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::SpriteMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::EmbeddingInfo* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::EmbeddingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::EmbeddingInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::ProjectorConfig* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::ProjectorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::ProjectorConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
