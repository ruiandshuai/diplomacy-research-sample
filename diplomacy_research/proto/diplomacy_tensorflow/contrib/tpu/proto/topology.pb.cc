// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/tpu/proto/topology.proto

#include "diplomacy_tensorflow/contrib/tpu/proto/topology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace diplomacy {
namespace tensorflow {
namespace tpu {
class TopologyProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopologyProto>
      _instance;
} _TopologyProto_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto {
static void InitDefaultsTopologyProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tpu::_TopologyProto_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tpu::TopologyProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tpu::TopologyProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TopologyProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTopologyProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TopologyProto.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tpu::TopologyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tpu::TopologyProto, mesh_shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tpu::TopologyProto, num_tasks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tpu::TopologyProto, num_tpu_devices_per_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tpu::TopologyProto, device_coordinates_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::tpu::TopologyProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tpu::_TopologyProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/contrib/tpu/proto/topology.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5diplomacy_tensorflow/contrib/tpu/proto"
      "/topology.proto\022\030diplomacy.tensorflow.tp"
      "u\"t\n\rTopologyProto\022\022\n\nmesh_shape\030\001 \003(\005\022\021"
      "\n\tnum_tasks\030\002 \001(\005\022 \n\030num_tpu_devices_per"
      "_task\030\003 \001(\005\022\032\n\022device_coordinates\030\004 \003(\005B"
      "\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/contrib/tpu/proto/topology.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto
namespace diplomacy {
namespace tensorflow {
namespace tpu {

// ===================================================================

void TopologyProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopologyProto::kMeshShapeFieldNumber;
const int TopologyProto::kNumTasksFieldNumber;
const int TopologyProto::kNumTpuDevicesPerTaskFieldNumber;
const int TopologyProto::kDeviceCoordinatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopologyProto::TopologyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto::scc_info_TopologyProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tpu.TopologyProto)
}
TopologyProto::TopologyProto(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  mesh_shape_(arena),
  device_coordinates_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto::scc_info_TopologyProto.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tpu.TopologyProto)
}
TopologyProto::TopologyProto(const TopologyProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mesh_shape_(from.mesh_shape_),
      device_coordinates_(from.device_coordinates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_tasks_, &from.num_tasks_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_tpu_devices_per_task_) -
    reinterpret_cast<char*>(&num_tasks_)) + sizeof(num_tpu_devices_per_task_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tpu.TopologyProto)
}

void TopologyProto::SharedCtor() {
  ::memset(&num_tasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_tpu_devices_per_task_) -
      reinterpret_cast<char*>(&num_tasks_)) + sizeof(num_tpu_devices_per_task_));
}

TopologyProto::~TopologyProto() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tpu.TopologyProto)
  SharedDtor();
}

void TopologyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void TopologyProto::ArenaDtor(void* object) {
  TopologyProto* _this = reinterpret_cast< TopologyProto* >(object);
  (void)_this;
}
void TopologyProto::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TopologyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TopologyProto::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopologyProto& TopologyProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto::scc_info_TopologyProto.base);
  return *internal_default_instance();
}


void TopologyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tpu.TopologyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mesh_shape_.Clear();
  device_coordinates_.Clear();
  ::memset(&num_tasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_tpu_devices_per_task_) -
      reinterpret_cast<char*>(&num_tasks_)) + sizeof(num_tpu_devices_per_task_));
  _internal_metadata_.Clear();
}

bool TopologyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tpu.TopologyProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 mesh_shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mesh_shape())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_mesh_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tasks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tasks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_tpu_devices_per_task = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tpu_devices_per_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 device_coordinates = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_device_coordinates())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_device_coordinates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tpu.TopologyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tpu.TopologyProto)
  return false;
#undef DO_
}

void TopologyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tpu.TopologyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 mesh_shape = 1;
  if (this->mesh_shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mesh_shape_cached_byte_size_));
  }
  for (int i = 0, n = this->mesh_shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->mesh_shape(i), output);
  }

  // int32 num_tasks = 2;
  if (this->num_tasks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_tasks(), output);
  }

  // int32 num_tpu_devices_per_task = 3;
  if (this->num_tpu_devices_per_task() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_tpu_devices_per_task(), output);
  }

  // repeated int32 device_coordinates = 4;
  if (this->device_coordinates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _device_coordinates_cached_byte_size_));
  }
  for (int i = 0, n = this->device_coordinates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->device_coordinates(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tpu.TopologyProto)
}

::google::protobuf::uint8* TopologyProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tpu.TopologyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 mesh_shape = 1;
  if (this->mesh_shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _mesh_shape_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mesh_shape_, target);
  }

  // int32 num_tasks = 2;
  if (this->num_tasks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_tasks(), target);
  }

  // int32 num_tpu_devices_per_task = 3;
  if (this->num_tpu_devices_per_task() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_tpu_devices_per_task(), target);
  }

  // repeated int32 device_coordinates = 4;
  if (this->device_coordinates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _device_coordinates_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->device_coordinates_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tpu.TopologyProto)
  return target;
}

size_t TopologyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tpu.TopologyProto)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 mesh_shape = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->mesh_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mesh_shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 device_coordinates = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->device_coordinates_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _device_coordinates_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 num_tasks = 2;
  if (this->num_tasks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tasks());
  }

  // int32 num_tpu_devices_per_task = 3;
  if (this->num_tpu_devices_per_task() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tpu_devices_per_task());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopologyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tpu.TopologyProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TopologyProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopologyProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tpu.TopologyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tpu.TopologyProto)
    MergeFrom(*source);
  }
}

void TopologyProto::MergeFrom(const TopologyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tpu.TopologyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mesh_shape_.MergeFrom(from.mesh_shape_);
  device_coordinates_.MergeFrom(from.device_coordinates_);
  if (from.num_tasks() != 0) {
    set_num_tasks(from.num_tasks());
  }
  if (from.num_tpu_devices_per_task() != 0) {
    set_num_tpu_devices_per_task(from.num_tpu_devices_per_task());
  }
}

void TopologyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tpu.TopologyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopologyProto::CopyFrom(const TopologyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tpu.TopologyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyProto::IsInitialized() const {
  return true;
}

void TopologyProto::Swap(TopologyProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TopologyProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TopologyProto::UnsafeArenaSwap(TopologyProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TopologyProto::InternalSwap(TopologyProto* other) {
  using std::swap;
  mesh_shape_.InternalSwap(&other->mesh_shape_);
  device_coordinates_.InternalSwap(&other->device_coordinates_);
  swap(num_tasks_, other->num_tasks_);
  swap(num_tpu_devices_per_task_, other->num_tpu_devices_per_task_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TopologyProto::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fproto_2ftopology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tpu
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tpu::TopologyProto* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tpu::TopologyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tpu::TopologyProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
