// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/tpu/profiler/tpu_profiler_analysis.proto

#ifndef PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto
#define PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "diplomacy_tensorflow/contrib/tpu/profiler/tpu_profiler.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto 

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto
namespace diplomacy {
namespace tensorflow {
class EnumProfileSessionsAndToolsRequest;
class EnumProfileSessionsAndToolsRequestDefaultTypeInternal;
extern EnumProfileSessionsAndToolsRequestDefaultTypeInternal _EnumProfileSessionsAndToolsRequest_default_instance_;
class EnumProfileSessionsAndToolsResponse;
class EnumProfileSessionsAndToolsResponseDefaultTypeInternal;
extern EnumProfileSessionsAndToolsResponseDefaultTypeInternal _EnumProfileSessionsAndToolsResponse_default_instance_;
class NewProfileSessionRequest;
class NewProfileSessionRequestDefaultTypeInternal;
extern NewProfileSessionRequestDefaultTypeInternal _NewProfileSessionRequest_default_instance_;
class NewProfileSessionResponse;
class NewProfileSessionResponseDefaultTypeInternal;
extern NewProfileSessionResponseDefaultTypeInternal _NewProfileSessionResponse_default_instance_;
class ProfileSessionDataRequest;
class ProfileSessionDataRequestDefaultTypeInternal;
extern ProfileSessionDataRequestDefaultTypeInternal _ProfileSessionDataRequest_default_instance_;
class ProfileSessionDataRequest_ParametersEntry_DoNotUse;
class ProfileSessionDataRequest_ParametersEntry_DoNotUseDefaultTypeInternal;
extern ProfileSessionDataRequest_ParametersEntry_DoNotUseDefaultTypeInternal _ProfileSessionDataRequest_ParametersEntry_DoNotUse_default_instance_;
class ProfileSessionDataResponse;
class ProfileSessionDataResponseDefaultTypeInternal;
extern ProfileSessionDataResponseDefaultTypeInternal _ProfileSessionDataResponse_default_instance_;
class ProfileSessionInfo;
class ProfileSessionInfoDefaultTypeInternal;
extern ProfileSessionInfoDefaultTypeInternal _ProfileSessionInfo_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> ::diplomacy::tensorflow::EnumProfileSessionsAndToolsRequest* Arena::CreateMaybeMessage<::diplomacy::tensorflow::EnumProfileSessionsAndToolsRequest>(Arena*);
template<> ::diplomacy::tensorflow::EnumProfileSessionsAndToolsResponse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::EnumProfileSessionsAndToolsResponse>(Arena*);
template<> ::diplomacy::tensorflow::NewProfileSessionRequest* Arena::CreateMaybeMessage<::diplomacy::tensorflow::NewProfileSessionRequest>(Arena*);
template<> ::diplomacy::tensorflow::NewProfileSessionResponse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::NewProfileSessionResponse>(Arena*);
template<> ::diplomacy::tensorflow::ProfileSessionDataRequest* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileSessionDataRequest>(Arena*);
template<> ::diplomacy::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileSessionDataRequest_ParametersEntry_DoNotUse>(Arena*);
template<> ::diplomacy::tensorflow::ProfileSessionDataResponse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileSessionDataResponse>(Arena*);
template<> ::diplomacy::tensorflow::ProfileSessionInfo* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileSessionInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace diplomacy {
namespace tensorflow {

// ===================================================================

class NewProfileSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.NewProfileSessionRequest) */ {
 public:
  NewProfileSessionRequest();
  virtual ~NewProfileSessionRequest();

  NewProfileSessionRequest(const NewProfileSessionRequest& from);

  inline NewProfileSessionRequest& operator=(const NewProfileSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewProfileSessionRequest(NewProfileSessionRequest&& from) noexcept
    : NewProfileSessionRequest() {
    *this = ::std::move(from);
  }

  inline NewProfileSessionRequest& operator=(NewProfileSessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewProfileSessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewProfileSessionRequest* internal_default_instance() {
    return reinterpret_cast<const NewProfileSessionRequest*>(
               &_NewProfileSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewProfileSessionRequest* other);
  friend void swap(NewProfileSessionRequest& a, NewProfileSessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewProfileSessionRequest* New() const final {
    return CreateMaybeMessage<NewProfileSessionRequest>(NULL);
  }

  NewProfileSessionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewProfileSessionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewProfileSessionRequest& from);
  void MergeFrom(const NewProfileSessionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewProfileSessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string hosts = 3;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 3;
  const ::std::string& hosts(int index) const;
  ::std::string* mutable_hosts(int index);
  void set_hosts(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hosts(int index, ::std::string&& value);
  #endif
  void set_hosts(int index, const char* value);
  void set_hosts(int index, const char* value, size_t size);
  ::std::string* add_hosts();
  void add_hosts(const ::std::string& value);
  #if LANG_CXX11
  void add_hosts(::std::string&& value);
  #endif
  void add_hosts(const char* value);
  void add_hosts(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hosts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hosts();

  // string repository_root = 2;
  void clear_repository_root();
  static const int kRepositoryRootFieldNumber = 2;
  const ::std::string& repository_root() const;
  void set_repository_root(const ::std::string& value);
  #if LANG_CXX11
  void set_repository_root(::std::string&& value);
  #endif
  void set_repository_root(const char* value);
  void set_repository_root(const char* value, size_t size);
  ::std::string* mutable_repository_root();
  ::std::string* release_repository_root();
  void set_allocated_repository_root(::std::string* repository_root);

  // string session_id = 4;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 4;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // .diplomacy.tensorflow.ProfileRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::diplomacy::tensorflow::ProfileRequest& _internal_request() const;
  public:
  const ::diplomacy::tensorflow::ProfileRequest& request() const;
  ::diplomacy::tensorflow::ProfileRequest* release_request();
  ::diplomacy::tensorflow::ProfileRequest* mutable_request();
  void set_allocated_request(::diplomacy::tensorflow::ProfileRequest* request);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.NewProfileSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hosts_;
  ::google::protobuf::internal::ArenaStringPtr repository_root_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::diplomacy::tensorflow::ProfileRequest* request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewProfileSessionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.NewProfileSessionResponse) */ {
 public:
  NewProfileSessionResponse();
  virtual ~NewProfileSessionResponse();

  NewProfileSessionResponse(const NewProfileSessionResponse& from);

  inline NewProfileSessionResponse& operator=(const NewProfileSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewProfileSessionResponse(NewProfileSessionResponse&& from) noexcept
    : NewProfileSessionResponse() {
    *this = ::std::move(from);
  }

  inline NewProfileSessionResponse& operator=(NewProfileSessionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewProfileSessionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewProfileSessionResponse* internal_default_instance() {
    return reinterpret_cast<const NewProfileSessionResponse*>(
               &_NewProfileSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NewProfileSessionResponse* other);
  friend void swap(NewProfileSessionResponse& a, NewProfileSessionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewProfileSessionResponse* New() const final {
    return CreateMaybeMessage<NewProfileSessionResponse>(NULL);
  }

  NewProfileSessionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewProfileSessionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewProfileSessionResponse& from);
  void MergeFrom(const NewProfileSessionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewProfileSessionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 1;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // bool empty_trace = 2;
  void clear_empty_trace();
  static const int kEmptyTraceFieldNumber = 2;
  bool empty_trace() const;
  void set_empty_trace(bool value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.NewProfileSessionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  bool empty_trace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnumProfileSessionsAndToolsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest) */ {
 public:
  EnumProfileSessionsAndToolsRequest();
  virtual ~EnumProfileSessionsAndToolsRequest();

  EnumProfileSessionsAndToolsRequest(const EnumProfileSessionsAndToolsRequest& from);

  inline EnumProfileSessionsAndToolsRequest& operator=(const EnumProfileSessionsAndToolsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumProfileSessionsAndToolsRequest(EnumProfileSessionsAndToolsRequest&& from) noexcept
    : EnumProfileSessionsAndToolsRequest() {
    *this = ::std::move(from);
  }

  inline EnumProfileSessionsAndToolsRequest& operator=(EnumProfileSessionsAndToolsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumProfileSessionsAndToolsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumProfileSessionsAndToolsRequest* internal_default_instance() {
    return reinterpret_cast<const EnumProfileSessionsAndToolsRequest*>(
               &_EnumProfileSessionsAndToolsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EnumProfileSessionsAndToolsRequest* other);
  friend void swap(EnumProfileSessionsAndToolsRequest& a, EnumProfileSessionsAndToolsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumProfileSessionsAndToolsRequest* New() const final {
    return CreateMaybeMessage<EnumProfileSessionsAndToolsRequest>(NULL);
  }

  EnumProfileSessionsAndToolsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnumProfileSessionsAndToolsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnumProfileSessionsAndToolsRequest& from);
  void MergeFrom(const EnumProfileSessionsAndToolsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumProfileSessionsAndToolsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repository_root = 1;
  void clear_repository_root();
  static const int kRepositoryRootFieldNumber = 1;
  const ::std::string& repository_root() const;
  void set_repository_root(const ::std::string& value);
  #if LANG_CXX11
  void set_repository_root(::std::string&& value);
  #endif
  void set_repository_root(const char* value);
  void set_repository_root(const char* value, size_t size);
  ::std::string* mutable_repository_root();
  ::std::string* release_repository_root();
  void set_allocated_repository_root(::std::string* repository_root);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr repository_root_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileSessionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ProfileSessionInfo) */ {
 public:
  ProfileSessionInfo();
  virtual ~ProfileSessionInfo();

  ProfileSessionInfo(const ProfileSessionInfo& from);

  inline ProfileSessionInfo& operator=(const ProfileSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileSessionInfo(ProfileSessionInfo&& from) noexcept
    : ProfileSessionInfo() {
    *this = ::std::move(from);
  }

  inline ProfileSessionInfo& operator=(ProfileSessionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileSessionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileSessionInfo* internal_default_instance() {
    return reinterpret_cast<const ProfileSessionInfo*>(
               &_ProfileSessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProfileSessionInfo* other);
  friend void swap(ProfileSessionInfo& a, ProfileSessionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileSessionInfo* New() const final {
    return CreateMaybeMessage<ProfileSessionInfo>(NULL);
  }

  ProfileSessionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileSessionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileSessionInfo& from);
  void MergeFrom(const ProfileSessionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileSessionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string available_tools = 2;
  int available_tools_size() const;
  void clear_available_tools();
  static const int kAvailableToolsFieldNumber = 2;
  const ::std::string& available_tools(int index) const;
  ::std::string* mutable_available_tools(int index);
  void set_available_tools(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_available_tools(int index, ::std::string&& value);
  #endif
  void set_available_tools(int index, const char* value);
  void set_available_tools(int index, const char* value, size_t size);
  ::std::string* add_available_tools();
  void add_available_tools(const ::std::string& value);
  #if LANG_CXX11
  void add_available_tools(::std::string&& value);
  #endif
  void add_available_tools(const char* value);
  void add_available_tools(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& available_tools() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_available_tools();

  // string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ProfileSessionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> available_tools_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnumProfileSessionsAndToolsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse) */ {
 public:
  EnumProfileSessionsAndToolsResponse();
  virtual ~EnumProfileSessionsAndToolsResponse();

  EnumProfileSessionsAndToolsResponse(const EnumProfileSessionsAndToolsResponse& from);

  inline EnumProfileSessionsAndToolsResponse& operator=(const EnumProfileSessionsAndToolsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumProfileSessionsAndToolsResponse(EnumProfileSessionsAndToolsResponse&& from) noexcept
    : EnumProfileSessionsAndToolsResponse() {
    *this = ::std::move(from);
  }

  inline EnumProfileSessionsAndToolsResponse& operator=(EnumProfileSessionsAndToolsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumProfileSessionsAndToolsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumProfileSessionsAndToolsResponse* internal_default_instance() {
    return reinterpret_cast<const EnumProfileSessionsAndToolsResponse*>(
               &_EnumProfileSessionsAndToolsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EnumProfileSessionsAndToolsResponse* other);
  friend void swap(EnumProfileSessionsAndToolsResponse& a, EnumProfileSessionsAndToolsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumProfileSessionsAndToolsResponse* New() const final {
    return CreateMaybeMessage<EnumProfileSessionsAndToolsResponse>(NULL);
  }

  EnumProfileSessionsAndToolsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnumProfileSessionsAndToolsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnumProfileSessionsAndToolsResponse& from);
  void MergeFrom(const EnumProfileSessionsAndToolsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumProfileSessionsAndToolsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .diplomacy.tensorflow.ProfileSessionInfo sessions = 2;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 2;
  ::diplomacy::tensorflow::ProfileSessionInfo* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileSessionInfo >*
      mutable_sessions();
  const ::diplomacy::tensorflow::ProfileSessionInfo& sessions(int index) const;
  ::diplomacy::tensorflow::ProfileSessionInfo* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileSessionInfo >&
      sessions() const;

  // string error_message = 1;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileSessionInfo > sessions_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileSessionDataRequest_ParametersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ProfileSessionDataRequest_ParametersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ProfileSessionDataRequest_ParametersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ProfileSessionDataRequest_ParametersEntry_DoNotUse();
  ProfileSessionDataRequest_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ProfileSessionDataRequest_ParametersEntry_DoNotUse& other);
  static const ProfileSessionDataRequest_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProfileSessionDataRequest_ParametersEntry_DoNotUse*>(&_ProfileSessionDataRequest_ParametersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ProfileSessionDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ProfileSessionDataRequest) */ {
 public:
  ProfileSessionDataRequest();
  virtual ~ProfileSessionDataRequest();

  ProfileSessionDataRequest(const ProfileSessionDataRequest& from);

  inline ProfileSessionDataRequest& operator=(const ProfileSessionDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileSessionDataRequest(ProfileSessionDataRequest&& from) noexcept
    : ProfileSessionDataRequest() {
    *this = ::std::move(from);
  }

  inline ProfileSessionDataRequest& operator=(ProfileSessionDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileSessionDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileSessionDataRequest* internal_default_instance() {
    return reinterpret_cast<const ProfileSessionDataRequest*>(
               &_ProfileSessionDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ProfileSessionDataRequest* other);
  friend void swap(ProfileSessionDataRequest& a, ProfileSessionDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileSessionDataRequest* New() const final {
    return CreateMaybeMessage<ProfileSessionDataRequest>(NULL);
  }

  ProfileSessionDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileSessionDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileSessionDataRequest& from);
  void MergeFrom(const ProfileSessionDataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileSessionDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> parameters = 4;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      parameters() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_parameters();

  // string repository_root = 1;
  void clear_repository_root();
  static const int kRepositoryRootFieldNumber = 1;
  const ::std::string& repository_root() const;
  void set_repository_root(const ::std::string& value);
  #if LANG_CXX11
  void set_repository_root(::std::string&& value);
  #endif
  void set_repository_root(const char* value);
  void set_repository_root(const char* value, size_t size);
  ::std::string* mutable_repository_root();
  ::std::string* release_repository_root();
  void set_allocated_repository_root(::std::string* repository_root);

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string tool_name = 3;
  void clear_tool_name();
  static const int kToolNameFieldNumber = 3;
  const ::std::string& tool_name() const;
  void set_tool_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tool_name(::std::string&& value);
  #endif
  void set_tool_name(const char* value);
  void set_tool_name(const char* value, size_t size);
  ::std::string* mutable_tool_name();
  ::std::string* release_tool_name();
  void set_allocated_tool_name(::std::string* tool_name);

  // string host_name = 5;
  void clear_host_name();
  static const int kHostNameFieldNumber = 5;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ProfileSessionDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ProfileSessionDataRequest_ParametersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > parameters_;
  ::google::protobuf::internal::ArenaStringPtr repository_root_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr tool_name_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileSessionDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ProfileSessionDataResponse) */ {
 public:
  ProfileSessionDataResponse();
  virtual ~ProfileSessionDataResponse();

  ProfileSessionDataResponse(const ProfileSessionDataResponse& from);

  inline ProfileSessionDataResponse& operator=(const ProfileSessionDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileSessionDataResponse(ProfileSessionDataResponse&& from) noexcept
    : ProfileSessionDataResponse() {
    *this = ::std::move(from);
  }

  inline ProfileSessionDataResponse& operator=(ProfileSessionDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileSessionDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileSessionDataResponse* internal_default_instance() {
    return reinterpret_cast<const ProfileSessionDataResponse*>(
               &_ProfileSessionDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ProfileSessionDataResponse* other);
  friend void swap(ProfileSessionDataResponse& a, ProfileSessionDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileSessionDataResponse* New() const final {
    return CreateMaybeMessage<ProfileSessionDataResponse>(NULL);
  }

  ProfileSessionDataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileSessionDataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileSessionDataResponse& from);
  void MergeFrom(const ProfileSessionDataResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileSessionDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 1;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 1;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // string output_format = 2;
  void clear_output_format();
  static const int kOutputFormatFieldNumber = 2;
  const ::std::string& output_format() const;
  void set_output_format(const ::std::string& value);
  #if LANG_CXX11
  void set_output_format(::std::string&& value);
  #endif
  void set_output_format(const char* value);
  void set_output_format(const char* value, size_t size);
  ::std::string* mutable_output_format();
  ::std::string* release_output_format();
  void set_allocated_output_format(::std::string* output_format);

  // bytes output = 3;
  void clear_output();
  static const int kOutputFieldNumber = 3;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const void* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ProfileSessionDataResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::internal::ArenaStringPtr output_format_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewProfileSessionRequest

// .diplomacy.tensorflow.ProfileRequest request = 1;
inline bool NewProfileSessionRequest::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline const ::diplomacy::tensorflow::ProfileRequest& NewProfileSessionRequest::_internal_request() const {
  return *request_;
}
inline const ::diplomacy::tensorflow::ProfileRequest& NewProfileSessionRequest::request() const {
  const ::diplomacy::tensorflow::ProfileRequest* p = request_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.NewProfileSessionRequest.request)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::ProfileRequest*>(
      &::diplomacy::tensorflow::_ProfileRequest_default_instance_);
}
inline ::diplomacy::tensorflow::ProfileRequest* NewProfileSessionRequest::release_request() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.NewProfileSessionRequest.request)
  
  ::diplomacy::tensorflow::ProfileRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::ProfileRequest* NewProfileSessionRequest::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::ProfileRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.NewProfileSessionRequest.request)
  return request_;
}
inline void NewProfileSessionRequest::set_allocated_request(::diplomacy::tensorflow::ProfileRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.NewProfileSessionRequest.request)
}

// string repository_root = 2;
inline void NewProfileSessionRequest::clear_repository_root() {
  repository_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewProfileSessionRequest::repository_root() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
  return repository_root_.GetNoArena();
}
inline void NewProfileSessionRequest::set_repository_root(const ::std::string& value) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
}
#if LANG_CXX11
inline void NewProfileSessionRequest::set_repository_root(::std::string&& value) {
  
  repository_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
}
#endif
inline void NewProfileSessionRequest::set_repository_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
}
inline void NewProfileSessionRequest::set_repository_root(const char* value, size_t size) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
}
inline ::std::string* NewProfileSessionRequest::mutable_repository_root() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
  return repository_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewProfileSessionRequest::release_repository_root() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
  
  return repository_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewProfileSessionRequest::set_allocated_repository_root(::std::string* repository_root) {
  if (repository_root != NULL) {
    
  } else {
    
  }
  repository_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repository_root);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.NewProfileSessionRequest.repository_root)
}

// repeated string hosts = 3;
inline int NewProfileSessionRequest::hosts_size() const {
  return hosts_.size();
}
inline void NewProfileSessionRequest::clear_hosts() {
  hosts_.Clear();
}
inline const ::std::string& NewProfileSessionRequest::hosts(int index) const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
  return hosts_.Get(index);
}
inline ::std::string* NewProfileSessionRequest::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
  return hosts_.Mutable(index);
}
inline void NewProfileSessionRequest::set_hosts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
  hosts_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NewProfileSessionRequest::set_hosts(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
  hosts_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NewProfileSessionRequest::set_hosts(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
}
inline void NewProfileSessionRequest::set_hosts(int index, const char* value, size_t size) {
  hosts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
}
inline ::std::string* NewProfileSessionRequest::add_hosts() {
  // @@protoc_insertion_point(field_add_mutable:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
  return hosts_.Add();
}
inline void NewProfileSessionRequest::add_hosts(const ::std::string& value) {
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
}
#if LANG_CXX11
inline void NewProfileSessionRequest::add_hosts(::std::string&& value) {
  hosts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
}
#endif
inline void NewProfileSessionRequest::add_hosts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hosts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
}
inline void NewProfileSessionRequest::add_hosts(const char* value, size_t size) {
  hosts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NewProfileSessionRequest::hosts() const {
  // @@protoc_insertion_point(field_list:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
  return hosts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NewProfileSessionRequest::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:diplomacy.tensorflow.NewProfileSessionRequest.hosts)
  return &hosts_;
}

// string session_id = 4;
inline void NewProfileSessionRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewProfileSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
  return session_id_.GetNoArena();
}
inline void NewProfileSessionRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
}
#if LANG_CXX11
inline void NewProfileSessionRequest::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
}
#endif
inline void NewProfileSessionRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
}
inline void NewProfileSessionRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
}
inline ::std::string* NewProfileSessionRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewProfileSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewProfileSessionRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.NewProfileSessionRequest.session_id)
}

// -------------------------------------------------------------------

// NewProfileSessionResponse

// string error_message = 1;
inline void NewProfileSessionResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewProfileSessionResponse::error_message() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
  return error_message_.GetNoArena();
}
inline void NewProfileSessionResponse::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
}
#if LANG_CXX11
inline void NewProfileSessionResponse::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
}
#endif
inline void NewProfileSessionResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
}
inline void NewProfileSessionResponse::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
}
inline ::std::string* NewProfileSessionResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewProfileSessionResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewProfileSessionResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.NewProfileSessionResponse.error_message)
}

// bool empty_trace = 2;
inline void NewProfileSessionResponse::clear_empty_trace() {
  empty_trace_ = false;
}
inline bool NewProfileSessionResponse::empty_trace() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.NewProfileSessionResponse.empty_trace)
  return empty_trace_;
}
inline void NewProfileSessionResponse::set_empty_trace(bool value) {
  
  empty_trace_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.NewProfileSessionResponse.empty_trace)
}

// -------------------------------------------------------------------

// EnumProfileSessionsAndToolsRequest

// string repository_root = 1;
inline void EnumProfileSessionsAndToolsRequest::clear_repository_root() {
  repository_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnumProfileSessionsAndToolsRequest::repository_root() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
  return repository_root_.GetNoArena();
}
inline void EnumProfileSessionsAndToolsRequest::set_repository_root(const ::std::string& value) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
}
#if LANG_CXX11
inline void EnumProfileSessionsAndToolsRequest::set_repository_root(::std::string&& value) {
  
  repository_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
}
#endif
inline void EnumProfileSessionsAndToolsRequest::set_repository_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
}
inline void EnumProfileSessionsAndToolsRequest::set_repository_root(const char* value, size_t size) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
}
inline ::std::string* EnumProfileSessionsAndToolsRequest::mutable_repository_root() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
  return repository_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnumProfileSessionsAndToolsRequest::release_repository_root() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
  
  return repository_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumProfileSessionsAndToolsRequest::set_allocated_repository_root(::std::string* repository_root) {
  if (repository_root != NULL) {
    
  } else {
    
  }
  repository_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repository_root);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.EnumProfileSessionsAndToolsRequest.repository_root)
}

// -------------------------------------------------------------------

// ProfileSessionInfo

// string session_id = 1;
inline void ProfileSessionInfo::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionInfo.session_id)
  return session_id_.GetNoArena();
}
inline void ProfileSessionInfo::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionInfo.session_id)
}
#if LANG_CXX11
inline void ProfileSessionInfo::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionInfo.session_id)
}
#endif
inline void ProfileSessionInfo::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionInfo.session_id)
}
inline void ProfileSessionInfo::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionInfo.session_id)
}
inline ::std::string* ProfileSessionInfo::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionInfo.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionInfo::release_session_id() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionInfo.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionInfo::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionInfo.session_id)
}

// repeated string available_tools = 2;
inline int ProfileSessionInfo::available_tools_size() const {
  return available_tools_.size();
}
inline void ProfileSessionInfo::clear_available_tools() {
  available_tools_.Clear();
}
inline const ::std::string& ProfileSessionInfo::available_tools(int index) const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
  return available_tools_.Get(index);
}
inline ::std::string* ProfileSessionInfo::mutable_available_tools(int index) {
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
  return available_tools_.Mutable(index);
}
inline void ProfileSessionInfo::set_available_tools(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
  available_tools_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProfileSessionInfo::set_available_tools(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
  available_tools_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProfileSessionInfo::set_available_tools(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  available_tools_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
}
inline void ProfileSessionInfo::set_available_tools(int index, const char* value, size_t size) {
  available_tools_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
}
inline ::std::string* ProfileSessionInfo::add_available_tools() {
  // @@protoc_insertion_point(field_add_mutable:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
  return available_tools_.Add();
}
inline void ProfileSessionInfo::add_available_tools(const ::std::string& value) {
  available_tools_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
}
#if LANG_CXX11
inline void ProfileSessionInfo::add_available_tools(::std::string&& value) {
  available_tools_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
}
#endif
inline void ProfileSessionInfo::add_available_tools(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  available_tools_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
}
inline void ProfileSessionInfo::add_available_tools(const char* value, size_t size) {
  available_tools_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileSessionInfo::available_tools() const {
  // @@protoc_insertion_point(field_list:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
  return available_tools_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileSessionInfo::mutable_available_tools() {
  // @@protoc_insertion_point(field_mutable_list:diplomacy.tensorflow.ProfileSessionInfo.available_tools)
  return &available_tools_;
}

// -------------------------------------------------------------------

// EnumProfileSessionsAndToolsResponse

// string error_message = 1;
inline void EnumProfileSessionsAndToolsResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnumProfileSessionsAndToolsResponse::error_message() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
  return error_message_.GetNoArena();
}
inline void EnumProfileSessionsAndToolsResponse::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
}
#if LANG_CXX11
inline void EnumProfileSessionsAndToolsResponse::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
}
#endif
inline void EnumProfileSessionsAndToolsResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
}
inline void EnumProfileSessionsAndToolsResponse::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
}
inline ::std::string* EnumProfileSessionsAndToolsResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnumProfileSessionsAndToolsResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumProfileSessionsAndToolsResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.error_message)
}

// repeated .diplomacy.tensorflow.ProfileSessionInfo sessions = 2;
inline int EnumProfileSessionsAndToolsResponse::sessions_size() const {
  return sessions_.size();
}
inline void EnumProfileSessionsAndToolsResponse::clear_sessions() {
  sessions_.Clear();
}
inline ::diplomacy::tensorflow::ProfileSessionInfo* EnumProfileSessionsAndToolsResponse::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileSessionInfo >*
EnumProfileSessionsAndToolsResponse::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.sessions)
  return &sessions_;
}
inline const ::diplomacy::tensorflow::ProfileSessionInfo& EnumProfileSessionsAndToolsResponse::sessions(int index) const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.sessions)
  return sessions_.Get(index);
}
inline ::diplomacy::tensorflow::ProfileSessionInfo* EnumProfileSessionsAndToolsResponse::add_sessions() {
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileSessionInfo >&
EnumProfileSessionsAndToolsResponse::sessions() const {
  // @@protoc_insertion_point(field_list:diplomacy.tensorflow.EnumProfileSessionsAndToolsResponse.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProfileSessionDataRequest

// string repository_root = 1;
inline void ProfileSessionDataRequest::clear_repository_root() {
  repository_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionDataRequest::repository_root() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
  return repository_root_.GetNoArena();
}
inline void ProfileSessionDataRequest::set_repository_root(const ::std::string& value) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
}
#if LANG_CXX11
inline void ProfileSessionDataRequest::set_repository_root(::std::string&& value) {
  
  repository_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
}
#endif
inline void ProfileSessionDataRequest::set_repository_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
}
inline void ProfileSessionDataRequest::set_repository_root(const char* value, size_t size) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
}
inline ::std::string* ProfileSessionDataRequest::mutable_repository_root() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
  return repository_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionDataRequest::release_repository_root() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
  
  return repository_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionDataRequest::set_allocated_repository_root(::std::string* repository_root) {
  if (repository_root != NULL) {
    
  } else {
    
  }
  repository_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repository_root);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionDataRequest.repository_root)
}

// string session_id = 2;
inline void ProfileSessionDataRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionDataRequest::session_id() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
  return session_id_.GetNoArena();
}
inline void ProfileSessionDataRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
}
#if LANG_CXX11
inline void ProfileSessionDataRequest::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
}
#endif
inline void ProfileSessionDataRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
}
inline void ProfileSessionDataRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
}
inline ::std::string* ProfileSessionDataRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionDataRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionDataRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionDataRequest.session_id)
}

// string host_name = 5;
inline void ProfileSessionDataRequest::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionDataRequest::host_name() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
  return host_name_.GetNoArena();
}
inline void ProfileSessionDataRequest::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
}
#if LANG_CXX11
inline void ProfileSessionDataRequest::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
}
#endif
inline void ProfileSessionDataRequest::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
}
inline void ProfileSessionDataRequest::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
}
inline ::std::string* ProfileSessionDataRequest::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionDataRequest::release_host_name() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionDataRequest::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionDataRequest.host_name)
}

// string tool_name = 3;
inline void ProfileSessionDataRequest::clear_tool_name() {
  tool_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionDataRequest::tool_name() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
  return tool_name_.GetNoArena();
}
inline void ProfileSessionDataRequest::set_tool_name(const ::std::string& value) {
  
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
}
#if LANG_CXX11
inline void ProfileSessionDataRequest::set_tool_name(::std::string&& value) {
  
  tool_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
}
#endif
inline void ProfileSessionDataRequest::set_tool_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
}
inline void ProfileSessionDataRequest::set_tool_name(const char* value, size_t size) {
  
  tool_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
}
inline ::std::string* ProfileSessionDataRequest::mutable_tool_name() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
  return tool_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionDataRequest::release_tool_name() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
  
  return tool_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionDataRequest::set_allocated_tool_name(::std::string* tool_name) {
  if (tool_name != NULL) {
    
  } else {
    
  }
  tool_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tool_name);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionDataRequest.tool_name)
}

// map<string, string> parameters = 4;
inline int ProfileSessionDataRequest::parameters_size() const {
  return parameters_.size();
}
inline void ProfileSessionDataRequest::clear_parameters() {
  parameters_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ProfileSessionDataRequest::parameters() const {
  // @@protoc_insertion_point(field_map:diplomacy.tensorflow.ProfileSessionDataRequest.parameters)
  return parameters_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ProfileSessionDataRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:diplomacy.tensorflow.ProfileSessionDataRequest.parameters)
  return parameters_.MutableMap();
}

// -------------------------------------------------------------------

// ProfileSessionDataResponse

// string error_message = 1;
inline void ProfileSessionDataResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionDataResponse::error_message() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
  return error_message_.GetNoArena();
}
inline void ProfileSessionDataResponse::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
}
#if LANG_CXX11
inline void ProfileSessionDataResponse::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
}
#endif
inline void ProfileSessionDataResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
}
inline void ProfileSessionDataResponse::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
}
inline ::std::string* ProfileSessionDataResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionDataResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionDataResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionDataResponse.error_message)
}

// string output_format = 2;
inline void ProfileSessionDataResponse::clear_output_format() {
  output_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionDataResponse::output_format() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
  return output_format_.GetNoArena();
}
inline void ProfileSessionDataResponse::set_output_format(const ::std::string& value) {
  
  output_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
}
#if LANG_CXX11
inline void ProfileSessionDataResponse::set_output_format(::std::string&& value) {
  
  output_format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
}
#endif
inline void ProfileSessionDataResponse::set_output_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
}
inline void ProfileSessionDataResponse::set_output_format(const char* value, size_t size) {
  
  output_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
}
inline ::std::string* ProfileSessionDataResponse::mutable_output_format() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
  return output_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionDataResponse::release_output_format() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
  
  return output_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionDataResponse::set_allocated_output_format(::std::string* output_format) {
  if (output_format != NULL) {
    
  } else {
    
  }
  output_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_format);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionDataResponse.output_format)
}

// bytes output = 3;
inline void ProfileSessionDataResponse::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileSessionDataResponse::output() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileSessionDataResponse.output)
  return output_.GetNoArena();
}
inline void ProfileSessionDataResponse::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileSessionDataResponse.output)
}
#if LANG_CXX11
inline void ProfileSessionDataResponse::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileSessionDataResponse.output)
}
#endif
inline void ProfileSessionDataResponse::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileSessionDataResponse.output)
}
inline void ProfileSessionDataResponse::set_output(const void* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileSessionDataResponse.output)
}
inline ::std::string* ProfileSessionDataResponse::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileSessionDataResponse.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileSessionDataResponse::release_output() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileSessionDataResponse.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileSessionDataResponse::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileSessionDataResponse.output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow
}  // namespace diplomacy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_5fanalysis_2eproto
