// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/tpu/profiler/tpu_profiler.proto

#ifndef PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto
#define PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "diplomacy_tensorflow/core/framework/graph.pb.h"
#include "diplomacy_tensorflow/core/protobuf/config.pb.h"
#include "diplomacy_tensorflow/contrib/tpu/profiler/op_profile.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto 

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto
namespace diplomacy {
namespace tensorflow {
class MonitorRequest;
class MonitorRequestDefaultTypeInternal;
extern MonitorRequestDefaultTypeInternal _MonitorRequest_default_instance_;
class MonitorResponse;
class MonitorResponseDefaultTypeInternal;
extern MonitorResponseDefaultTypeInternal _MonitorResponse_default_instance_;
class ProfileOptions;
class ProfileOptionsDefaultTypeInternal;
extern ProfileOptionsDefaultTypeInternal _ProfileOptions_default_instance_;
class ProfileRequest;
class ProfileRequestDefaultTypeInternal;
extern ProfileRequestDefaultTypeInternal _ProfileRequest_default_instance_;
class ProfileRequest_ToolOptionsEntry_DoNotUse;
class ProfileRequest_ToolOptionsEntry_DoNotUseDefaultTypeInternal;
extern ProfileRequest_ToolOptionsEntry_DoNotUseDefaultTypeInternal _ProfileRequest_ToolOptionsEntry_DoNotUse_default_instance_;
class ProfileResponse;
class ProfileResponseDefaultTypeInternal;
extern ProfileResponseDefaultTypeInternal _ProfileResponse_default_instance_;
class ProfileToolData;
class ProfileToolDataDefaultTypeInternal;
extern ProfileToolDataDefaultTypeInternal _ProfileToolData_default_instance_;
class ToolRequestOptions;
class ToolRequestOptionsDefaultTypeInternal;
extern ToolRequestOptionsDefaultTypeInternal _ToolRequestOptions_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> ::diplomacy::tensorflow::MonitorRequest* Arena::CreateMaybeMessage<::diplomacy::tensorflow::MonitorRequest>(Arena*);
template<> ::diplomacy::tensorflow::MonitorResponse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::MonitorResponse>(Arena*);
template<> ::diplomacy::tensorflow::ProfileOptions* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileOptions>(Arena*);
template<> ::diplomacy::tensorflow::ProfileRequest* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileRequest>(Arena*);
template<> ::diplomacy::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileRequest_ToolOptionsEntry_DoNotUse>(Arena*);
template<> ::diplomacy::tensorflow::ProfileResponse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileResponse>(Arena*);
template<> ::diplomacy::tensorflow::ProfileToolData* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ProfileToolData>(Arena*);
template<> ::diplomacy::tensorflow::ToolRequestOptions* Arena::CreateMaybeMessage<::diplomacy::tensorflow::ToolRequestOptions>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace diplomacy {
namespace tensorflow {

// ===================================================================

class ProfileOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ProfileOptions) */ {
 public:
  ProfileOptions();
  virtual ~ProfileOptions();

  ProfileOptions(const ProfileOptions& from);

  inline ProfileOptions& operator=(const ProfileOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileOptions(ProfileOptions&& from) noexcept
    : ProfileOptions() {
    *this = ::std::move(from);
  }

  inline ProfileOptions& operator=(ProfileOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileOptions* internal_default_instance() {
    return reinterpret_cast<const ProfileOptions*>(
               &_ProfileOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProfileOptions* other);
  friend void swap(ProfileOptions& a, ProfileOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileOptions* New() const final {
    return CreateMaybeMessage<ProfileOptions>(NULL);
  }

  ProfileOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileOptions& from);
  void MergeFrom(const ProfileOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool include_dataset_ops = 1;
  void clear_include_dataset_ops();
  static const int kIncludeDatasetOpsFieldNumber = 1;
  bool include_dataset_ops() const;
  void set_include_dataset_ops(bool value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ProfileOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool include_dataset_ops_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ToolRequestOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ToolRequestOptions) */ {
 public:
  ToolRequestOptions();
  virtual ~ToolRequestOptions();

  ToolRequestOptions(const ToolRequestOptions& from);

  inline ToolRequestOptions& operator=(const ToolRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ToolRequestOptions(ToolRequestOptions&& from) noexcept
    : ToolRequestOptions() {
    *this = ::std::move(from);
  }

  inline ToolRequestOptions& operator=(ToolRequestOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ToolRequestOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToolRequestOptions* internal_default_instance() {
    return reinterpret_cast<const ToolRequestOptions*>(
               &_ToolRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ToolRequestOptions* other);
  friend void swap(ToolRequestOptions& a, ToolRequestOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ToolRequestOptions* New() const final {
    return CreateMaybeMessage<ToolRequestOptions>(NULL);
  }

  ToolRequestOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ToolRequestOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ToolRequestOptions& from);
  void MergeFrom(const ToolRequestOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolRequestOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string output_formats = 2;
  void clear_output_formats();
  static const int kOutputFormatsFieldNumber = 2;
  const ::std::string& output_formats() const;
  void set_output_formats(const ::std::string& value);
  #if LANG_CXX11
  void set_output_formats(::std::string&& value);
  #endif
  void set_output_formats(const char* value);
  void set_output_formats(const char* value, size_t size);
  ::std::string* mutable_output_formats();
  ::std::string* release_output_formats();
  void set_allocated_output_formats(::std::string* output_formats);

  // bool save_to_repo = 3;
  void clear_save_to_repo();
  static const int kSaveToRepoFieldNumber = 3;
  bool save_to_repo() const;
  void set_save_to_repo(bool value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ToolRequestOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr output_formats_;
  bool save_to_repo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileRequest_ToolOptionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ProfileRequest_ToolOptionsEntry_DoNotUse, 
    ::std::string, ::diplomacy::tensorflow::ToolRequestOptions,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ProfileRequest_ToolOptionsEntry_DoNotUse, 
    ::std::string, ::diplomacy::tensorflow::ToolRequestOptions,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ProfileRequest_ToolOptionsEntry_DoNotUse();
  ProfileRequest_ToolOptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ProfileRequest_ToolOptionsEntry_DoNotUse& other);
  static const ProfileRequest_ToolOptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProfileRequest_ToolOptionsEntry_DoNotUse*>(&_ProfileRequest_ToolOptionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ProfileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ProfileRequest) */ {
 public:
  ProfileRequest();
  virtual ~ProfileRequest();

  ProfileRequest(const ProfileRequest& from);

  inline ProfileRequest& operator=(const ProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileRequest(ProfileRequest&& from) noexcept
    : ProfileRequest() {
    *this = ::std::move(from);
  }

  inline ProfileRequest& operator=(ProfileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileRequest* internal_default_instance() {
    return reinterpret_cast<const ProfileRequest*>(
               &_ProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProfileRequest* other);
  friend void swap(ProfileRequest& a, ProfileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileRequest* New() const final {
    return CreateMaybeMessage<ProfileRequest>(NULL);
  }

  ProfileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileRequest& from);
  void MergeFrom(const ProfileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string tools = 3;
  int tools_size() const;
  void clear_tools();
  static const int kToolsFieldNumber = 3;
  const ::std::string& tools(int index) const;
  ::std::string* mutable_tools(int index);
  void set_tools(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tools(int index, ::std::string&& value);
  #endif
  void set_tools(int index, const char* value);
  void set_tools(int index, const char* value, size_t size);
  ::std::string* add_tools();
  void add_tools(const ::std::string& value);
  #if LANG_CXX11
  void add_tools(::std::string&& value);
  #endif
  void add_tools(const char* value);
  void add_tools(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tools() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tools();

  // map<string, .diplomacy.tensorflow.ToolRequestOptions> tool_options = 8;
  int tool_options_size() const;
  void clear_tool_options();
  static const int kToolOptionsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::ToolRequestOptions >&
      tool_options() const;
  ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::ToolRequestOptions >*
      mutable_tool_options();

  // string repository_root = 5;
  void clear_repository_root();
  static const int kRepositoryRootFieldNumber = 5;
  const ::std::string& repository_root() const;
  void set_repository_root(const ::std::string& value);
  #if LANG_CXX11
  void set_repository_root(::std::string&& value);
  #endif
  void set_repository_root(const char* value);
  void set_repository_root(const char* value, size_t size);
  ::std::string* mutable_repository_root();
  ::std::string* release_repository_root();
  void set_allocated_repository_root(::std::string* repository_root);

  // string session_id = 6;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 6;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  #if LANG_CXX11
  void set_session_id(::std::string&& value);
  #endif
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);

  // string host_name = 7;
  void clear_host_name();
  static const int kHostNameFieldNumber = 7;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // .diplomacy.tensorflow.ProfileOptions opts = 4;
  bool has_opts() const;
  void clear_opts();
  static const int kOptsFieldNumber = 4;
  private:
  const ::diplomacy::tensorflow::ProfileOptions& _internal_opts() const;
  public:
  const ::diplomacy::tensorflow::ProfileOptions& opts() const;
  ::diplomacy::tensorflow::ProfileOptions* release_opts();
  ::diplomacy::tensorflow::ProfileOptions* mutable_opts();
  void set_allocated_opts(::diplomacy::tensorflow::ProfileOptions* opts);

  // uint64 duration_ms = 1;
  void clear_duration_ms();
  static const int kDurationMsFieldNumber = 1;
  ::google::protobuf::uint64 duration_ms() const;
  void set_duration_ms(::google::protobuf::uint64 value);

  // uint64 max_events = 2;
  void clear_max_events();
  static const int kMaxEventsFieldNumber = 2;
  ::google::protobuf::uint64 max_events() const;
  void set_max_events(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ProfileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tools_;
  ::google::protobuf::internal::MapField<
      ProfileRequest_ToolOptionsEntry_DoNotUse,
      ::std::string, ::diplomacy::tensorflow::ToolRequestOptions,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tool_options_;
  ::google::protobuf::internal::ArenaStringPtr repository_root_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::diplomacy::tensorflow::ProfileOptions* opts_;
  ::google::protobuf::uint64 duration_ms_;
  ::google::protobuf::uint64 max_events_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileToolData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ProfileToolData) */ {
 public:
  ProfileToolData();
  virtual ~ProfileToolData();

  ProfileToolData(const ProfileToolData& from);

  inline ProfileToolData& operator=(const ProfileToolData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileToolData(ProfileToolData&& from) noexcept
    : ProfileToolData() {
    *this = ::std::move(from);
  }

  inline ProfileToolData& operator=(ProfileToolData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileToolData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileToolData* internal_default_instance() {
    return reinterpret_cast<const ProfileToolData*>(
               &_ProfileToolData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ProfileToolData* other);
  friend void swap(ProfileToolData& a, ProfileToolData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileToolData* New() const final {
    return CreateMaybeMessage<ProfileToolData>(NULL);
  }

  ProfileToolData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileToolData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileToolData& from);
  void MergeFrom(const ProfileToolData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileToolData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ProfileToolData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.ProfileResponse) */ {
 public:
  ProfileResponse();
  virtual ~ProfileResponse();

  ProfileResponse(const ProfileResponse& from);

  inline ProfileResponse& operator=(const ProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileResponse(ProfileResponse&& from) noexcept
    : ProfileResponse() {
    *this = ::std::move(from);
  }

  inline ProfileResponse& operator=(ProfileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileResponse* internal_default_instance() {
    return reinterpret_cast<const ProfileResponse*>(
               &_ProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ProfileResponse* other);
  friend void swap(ProfileResponse& a, ProfileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileResponse* New() const final {
    return CreateMaybeMessage<ProfileResponse>(NULL);
  }

  ProfileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfileResponse& from);
  void MergeFrom(const ProfileResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .diplomacy.tensorflow.GraphDef computation_graph = 2;
  int computation_graph_size() const;
  void clear_computation_graph();
  static const int kComputationGraphFieldNumber = 2;
  ::diplomacy::tensorflow::GraphDef* mutable_computation_graph(int index);
  ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::GraphDef >*
      mutable_computation_graph();
  const ::diplomacy::tensorflow::GraphDef& computation_graph(int index) const;
  ::diplomacy::tensorflow::GraphDef* add_computation_graph();
  const ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::GraphDef >&
      computation_graph() const;

  // repeated .diplomacy.tensorflow.ProfileToolData tool_data = 6;
  int tool_data_size() const;
  void clear_tool_data();
  static const int kToolDataFieldNumber = 6;
  ::diplomacy::tensorflow::ProfileToolData* mutable_tool_data(int index);
  ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileToolData >*
      mutable_tool_data();
  const ::diplomacy::tensorflow::ProfileToolData& tool_data(int index) const;
  ::diplomacy::tensorflow::ProfileToolData* add_tool_data();
  const ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileToolData >&
      tool_data() const;

  // bytes encoded_trace = 3;
  void clear_encoded_trace();
  static const int kEncodedTraceFieldNumber = 3;
  const ::std::string& encoded_trace() const;
  void set_encoded_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_encoded_trace(::std::string&& value);
  #endif
  void set_encoded_trace(const char* value);
  void set_encoded_trace(const void* value, size_t size);
  ::std::string* mutable_encoded_trace();
  ::std::string* release_encoded_trace();
  void set_allocated_encoded_trace(::std::string* encoded_trace);

  // .diplomacy.tensorflow.tpu.op_profile.Profile op_profile = 4;
  bool has_op_profile() const;
  void clear_op_profile();
  static const int kOpProfileFieldNumber = 4;
  private:
  const ::diplomacy::tensorflow::tpu::op_profile::Profile& _internal_op_profile() const;
  public:
  const ::diplomacy::tensorflow::tpu::op_profile::Profile& op_profile() const;
  ::diplomacy::tensorflow::tpu::op_profile::Profile* release_op_profile();
  ::diplomacy::tensorflow::tpu::op_profile::Profile* mutable_op_profile();
  void set_allocated_op_profile(::diplomacy::tensorflow::tpu::op_profile::Profile* op_profile);

  // .diplomacy.tensorflow.RunMetadata hlo_metadata = 5;
  bool has_hlo_metadata() const;
  void clear_hlo_metadata();
  static const int kHloMetadataFieldNumber = 5;
  private:
  const ::diplomacy::tensorflow::RunMetadata& _internal_hlo_metadata() const;
  public:
  const ::diplomacy::tensorflow::RunMetadata& hlo_metadata() const;
  ::diplomacy::tensorflow::RunMetadata* release_hlo_metadata();
  ::diplomacy::tensorflow::RunMetadata* mutable_hlo_metadata();
  void set_allocated_hlo_metadata(::diplomacy::tensorflow::RunMetadata* hlo_metadata);

  // bool empty_trace = 7;
  void clear_empty_trace();
  static const int kEmptyTraceFieldNumber = 7;
  bool empty_trace() const;
  void set_empty_trace(bool value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.ProfileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::GraphDef > computation_graph_;
  ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileToolData > tool_data_;
  ::google::protobuf::internal::ArenaStringPtr encoded_trace_;
  ::diplomacy::tensorflow::tpu::op_profile::Profile* op_profile_;
  ::diplomacy::tensorflow::RunMetadata* hlo_metadata_;
  bool empty_trace_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitorRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.MonitorRequest) */ {
 public:
  MonitorRequest();
  virtual ~MonitorRequest();

  MonitorRequest(const MonitorRequest& from);

  inline MonitorRequest& operator=(const MonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitorRequest(MonitorRequest&& from) noexcept
    : MonitorRequest() {
    *this = ::std::move(from);
  }

  inline MonitorRequest& operator=(MonitorRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorRequest* internal_default_instance() {
    return reinterpret_cast<const MonitorRequest*>(
               &_MonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MonitorRequest* other);
  friend void swap(MonitorRequest& a, MonitorRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitorRequest* New() const final {
    return CreateMaybeMessage<MonitorRequest>(NULL);
  }

  MonitorRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitorRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitorRequest& from);
  void MergeFrom(const MonitorRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 duration_ms = 1;
  void clear_duration_ms();
  static const int kDurationMsFieldNumber = 1;
  ::google::protobuf::uint64 duration_ms() const;
  void set_duration_ms(::google::protobuf::uint64 value);

  // int32 monitoring_level = 2;
  void clear_monitoring_level();
  static const int kMonitoringLevelFieldNumber = 2;
  ::google::protobuf::int32 monitoring_level() const;
  void set_monitoring_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.MonitorRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 duration_ms_;
  ::google::protobuf::int32 monitoring_level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.MonitorResponse) */ {
 public:
  MonitorResponse();
  virtual ~MonitorResponse();

  MonitorResponse(const MonitorResponse& from);

  inline MonitorResponse& operator=(const MonitorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitorResponse(MonitorResponse&& from) noexcept
    : MonitorResponse() {
    *this = ::std::move(from);
  }

  inline MonitorResponse& operator=(MonitorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitorResponse* internal_default_instance() {
    return reinterpret_cast<const MonitorResponse*>(
               &_MonitorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MonitorResponse* other);
  friend void swap(MonitorResponse& a, MonitorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitorResponse* New() const final {
    return CreateMaybeMessage<MonitorResponse>(NULL);
  }

  MonitorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitorResponse& from);
  void MergeFrom(const MonitorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.MonitorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfileOptions

// bool include_dataset_ops = 1;
inline void ProfileOptions::clear_include_dataset_ops() {
  include_dataset_ops_ = false;
}
inline bool ProfileOptions::include_dataset_ops() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileOptions.include_dataset_ops)
  return include_dataset_ops_;
}
inline void ProfileOptions::set_include_dataset_ops(bool value) {
  
  include_dataset_ops_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileOptions.include_dataset_ops)
}

// -------------------------------------------------------------------

// ToolRequestOptions

// string output_formats = 2;
inline void ToolRequestOptions::clear_output_formats() {
  output_formats_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ToolRequestOptions::output_formats() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ToolRequestOptions.output_formats)
  return output_formats_.GetNoArena();
}
inline void ToolRequestOptions::set_output_formats(const ::std::string& value) {
  
  output_formats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ToolRequestOptions.output_formats)
}
#if LANG_CXX11
inline void ToolRequestOptions::set_output_formats(::std::string&& value) {
  
  output_formats_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ToolRequestOptions.output_formats)
}
#endif
inline void ToolRequestOptions::set_output_formats(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_formats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ToolRequestOptions.output_formats)
}
inline void ToolRequestOptions::set_output_formats(const char* value, size_t size) {
  
  output_formats_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ToolRequestOptions.output_formats)
}
inline ::std::string* ToolRequestOptions::mutable_output_formats() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ToolRequestOptions.output_formats)
  return output_formats_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ToolRequestOptions::release_output_formats() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ToolRequestOptions.output_formats)
  
  return output_formats_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ToolRequestOptions::set_allocated_output_formats(::std::string* output_formats) {
  if (output_formats != NULL) {
    
  } else {
    
  }
  output_formats_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_formats);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ToolRequestOptions.output_formats)
}

// bool save_to_repo = 3;
inline void ToolRequestOptions::clear_save_to_repo() {
  save_to_repo_ = false;
}
inline bool ToolRequestOptions::save_to_repo() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ToolRequestOptions.save_to_repo)
  return save_to_repo_;
}
inline void ToolRequestOptions::set_save_to_repo(bool value) {
  
  save_to_repo_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ToolRequestOptions.save_to_repo)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProfileRequest

// uint64 duration_ms = 1;
inline void ProfileRequest::clear_duration_ms() {
  duration_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ProfileRequest::duration_ms() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileRequest.duration_ms)
  return duration_ms_;
}
inline void ProfileRequest::set_duration_ms(::google::protobuf::uint64 value) {
  
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileRequest.duration_ms)
}

// uint64 max_events = 2;
inline void ProfileRequest::clear_max_events() {
  max_events_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ProfileRequest::max_events() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileRequest.max_events)
  return max_events_;
}
inline void ProfileRequest::set_max_events(::google::protobuf::uint64 value) {
  
  max_events_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileRequest.max_events)
}

// repeated string tools = 3;
inline int ProfileRequest::tools_size() const {
  return tools_.size();
}
inline void ProfileRequest::clear_tools() {
  tools_.Clear();
}
inline const ::std::string& ProfileRequest::tools(int index) const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileRequest.tools)
  return tools_.Get(index);
}
inline ::std::string* ProfileRequest::mutable_tools(int index) {
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileRequest.tools)
  return tools_.Mutable(index);
}
inline void ProfileRequest::set_tools(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileRequest.tools)
  tools_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProfileRequest::set_tools(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileRequest.tools)
  tools_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProfileRequest::set_tools(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tools_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileRequest.tools)
}
inline void ProfileRequest::set_tools(int index, const char* value, size_t size) {
  tools_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileRequest.tools)
}
inline ::std::string* ProfileRequest::add_tools() {
  // @@protoc_insertion_point(field_add_mutable:diplomacy.tensorflow.ProfileRequest.tools)
  return tools_.Add();
}
inline void ProfileRequest::add_tools(const ::std::string& value) {
  tools_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.ProfileRequest.tools)
}
#if LANG_CXX11
inline void ProfileRequest::add_tools(::std::string&& value) {
  tools_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.ProfileRequest.tools)
}
#endif
inline void ProfileRequest::add_tools(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tools_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:diplomacy.tensorflow.ProfileRequest.tools)
}
inline void ProfileRequest::add_tools(const char* value, size_t size) {
  tools_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:diplomacy.tensorflow.ProfileRequest.tools)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileRequest::tools() const {
  // @@protoc_insertion_point(field_list:diplomacy.tensorflow.ProfileRequest.tools)
  return tools_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileRequest::mutable_tools() {
  // @@protoc_insertion_point(field_mutable_list:diplomacy.tensorflow.ProfileRequest.tools)
  return &tools_;
}

// map<string, .diplomacy.tensorflow.ToolRequestOptions> tool_options = 8;
inline int ProfileRequest::tool_options_size() const {
  return tool_options_.size();
}
inline void ProfileRequest::clear_tool_options() {
  tool_options_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::ToolRequestOptions >&
ProfileRequest::tool_options() const {
  // @@protoc_insertion_point(field_map:diplomacy.tensorflow.ProfileRequest.tool_options)
  return tool_options_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::ToolRequestOptions >*
ProfileRequest::mutable_tool_options() {
  // @@protoc_insertion_point(field_mutable_map:diplomacy.tensorflow.ProfileRequest.tool_options)
  return tool_options_.MutableMap();
}

// .diplomacy.tensorflow.ProfileOptions opts = 4;
inline bool ProfileRequest::has_opts() const {
  return this != internal_default_instance() && opts_ != NULL;
}
inline void ProfileRequest::clear_opts() {
  if (GetArenaNoVirtual() == NULL && opts_ != NULL) {
    delete opts_;
  }
  opts_ = NULL;
}
inline const ::diplomacy::tensorflow::ProfileOptions& ProfileRequest::_internal_opts() const {
  return *opts_;
}
inline const ::diplomacy::tensorflow::ProfileOptions& ProfileRequest::opts() const {
  const ::diplomacy::tensorflow::ProfileOptions* p = opts_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileRequest.opts)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::ProfileOptions*>(
      &::diplomacy::tensorflow::_ProfileOptions_default_instance_);
}
inline ::diplomacy::tensorflow::ProfileOptions* ProfileRequest::release_opts() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileRequest.opts)
  
  ::diplomacy::tensorflow::ProfileOptions* temp = opts_;
  opts_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::ProfileOptions* ProfileRequest::mutable_opts() {
  
  if (opts_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::ProfileOptions>(GetArenaNoVirtual());
    opts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileRequest.opts)
  return opts_;
}
inline void ProfileRequest::set_allocated_opts(::diplomacy::tensorflow::ProfileOptions* opts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opts_;
  }
  if (opts) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opts, submessage_arena);
    }
    
  } else {
    
  }
  opts_ = opts;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileRequest.opts)
}

// string repository_root = 5;
inline void ProfileRequest::clear_repository_root() {
  repository_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::repository_root() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileRequest.repository_root)
  return repository_root_.GetNoArena();
}
inline void ProfileRequest::set_repository_root(const ::std::string& value) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileRequest.repository_root)
}
#if LANG_CXX11
inline void ProfileRequest::set_repository_root(::std::string&& value) {
  
  repository_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileRequest.repository_root)
}
#endif
inline void ProfileRequest::set_repository_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileRequest.repository_root)
}
inline void ProfileRequest::set_repository_root(const char* value, size_t size) {
  
  repository_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileRequest.repository_root)
}
inline ::std::string* ProfileRequest::mutable_repository_root() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileRequest.repository_root)
  return repository_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_repository_root() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileRequest.repository_root)
  
  return repository_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_repository_root(::std::string* repository_root) {
  if (repository_root != NULL) {
    
  } else {
    
  }
  repository_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repository_root);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileRequest.repository_root)
}

// string session_id = 6;
inline void ProfileRequest::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::session_id() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileRequest.session_id)
  return session_id_.GetNoArena();
}
inline void ProfileRequest::set_session_id(const ::std::string& value) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileRequest.session_id)
}
#if LANG_CXX11
inline void ProfileRequest::set_session_id(::std::string&& value) {
  
  session_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileRequest.session_id)
}
#endif
inline void ProfileRequest::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileRequest.session_id)
}
inline void ProfileRequest::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileRequest.session_id)
}
inline ::std::string* ProfileRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileRequest.session_id)
  return session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileRequest.session_id)
  
  return session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileRequest.session_id)
}

// string host_name = 7;
inline void ProfileRequest::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileRequest::host_name() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileRequest.host_name)
  return host_name_.GetNoArena();
}
inline void ProfileRequest::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileRequest.host_name)
}
#if LANG_CXX11
inline void ProfileRequest::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileRequest.host_name)
}
#endif
inline void ProfileRequest::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileRequest.host_name)
}
inline void ProfileRequest::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileRequest.host_name)
}
inline ::std::string* ProfileRequest::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileRequest.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileRequest::release_host_name() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileRequest.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileRequest::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileRequest.host_name)
}

// -------------------------------------------------------------------

// ProfileToolData

// string name = 1;
inline void ProfileToolData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileToolData::name() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileToolData.name)
  return name_.GetNoArena();
}
inline void ProfileToolData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileToolData.name)
}
#if LANG_CXX11
inline void ProfileToolData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileToolData.name)
}
#endif
inline void ProfileToolData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileToolData.name)
}
inline void ProfileToolData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileToolData.name)
}
inline ::std::string* ProfileToolData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileToolData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileToolData::release_name() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileToolData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileToolData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileToolData.name)
}

// bytes data = 2;
inline void ProfileToolData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileToolData::data() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileToolData.data)
  return data_.GetNoArena();
}
inline void ProfileToolData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileToolData.data)
}
#if LANG_CXX11
inline void ProfileToolData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileToolData.data)
}
#endif
inline void ProfileToolData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileToolData.data)
}
inline void ProfileToolData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileToolData.data)
}
inline ::std::string* ProfileToolData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileToolData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileToolData::release_data() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileToolData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileToolData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileToolData.data)
}

// -------------------------------------------------------------------

// ProfileResponse

// repeated .diplomacy.tensorflow.GraphDef computation_graph = 2;
inline int ProfileResponse::computation_graph_size() const {
  return computation_graph_.size();
}
inline ::diplomacy::tensorflow::GraphDef* ProfileResponse::mutable_computation_graph(int index) {
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileResponse.computation_graph)
  return computation_graph_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::GraphDef >*
ProfileResponse::mutable_computation_graph() {
  // @@protoc_insertion_point(field_mutable_list:diplomacy.tensorflow.ProfileResponse.computation_graph)
  return &computation_graph_;
}
inline const ::diplomacy::tensorflow::GraphDef& ProfileResponse::computation_graph(int index) const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileResponse.computation_graph)
  return computation_graph_.Get(index);
}
inline ::diplomacy::tensorflow::GraphDef* ProfileResponse::add_computation_graph() {
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.ProfileResponse.computation_graph)
  return computation_graph_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::GraphDef >&
ProfileResponse::computation_graph() const {
  // @@protoc_insertion_point(field_list:diplomacy.tensorflow.ProfileResponse.computation_graph)
  return computation_graph_;
}

// .diplomacy.tensorflow.RunMetadata hlo_metadata = 5;
inline bool ProfileResponse::has_hlo_metadata() const {
  return this != internal_default_instance() && hlo_metadata_ != NULL;
}
inline const ::diplomacy::tensorflow::RunMetadata& ProfileResponse::_internal_hlo_metadata() const {
  return *hlo_metadata_;
}
inline const ::diplomacy::tensorflow::RunMetadata& ProfileResponse::hlo_metadata() const {
  const ::diplomacy::tensorflow::RunMetadata* p = hlo_metadata_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileResponse.hlo_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::RunMetadata*>(
      &::diplomacy::tensorflow::_RunMetadata_default_instance_);
}
inline ::diplomacy::tensorflow::RunMetadata* ProfileResponse::release_hlo_metadata() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileResponse.hlo_metadata)
  
  ::diplomacy::tensorflow::RunMetadata* temp = hlo_metadata_;
  hlo_metadata_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::RunMetadata* ProfileResponse::mutable_hlo_metadata() {
  
  if (hlo_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::RunMetadata>(GetArenaNoVirtual());
    hlo_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileResponse.hlo_metadata)
  return hlo_metadata_;
}
inline void ProfileResponse::set_allocated_hlo_metadata(::diplomacy::tensorflow::RunMetadata* hlo_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(hlo_metadata_);
  }
  if (hlo_metadata) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(hlo_metadata)->GetArena();
    if (message_arena != submessage_arena) {
      hlo_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hlo_metadata, submessage_arena);
    }
    
  } else {
    
  }
  hlo_metadata_ = hlo_metadata;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileResponse.hlo_metadata)
}

// bytes encoded_trace = 3;
inline void ProfileResponse::clear_encoded_trace() {
  encoded_trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProfileResponse::encoded_trace() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileResponse.encoded_trace)
  return encoded_trace_.GetNoArena();
}
inline void ProfileResponse::set_encoded_trace(const ::std::string& value) {
  
  encoded_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileResponse.encoded_trace)
}
#if LANG_CXX11
inline void ProfileResponse::set_encoded_trace(::std::string&& value) {
  
  encoded_trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.ProfileResponse.encoded_trace)
}
#endif
inline void ProfileResponse::set_encoded_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encoded_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.ProfileResponse.encoded_trace)
}
inline void ProfileResponse::set_encoded_trace(const void* value, size_t size) {
  
  encoded_trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.ProfileResponse.encoded_trace)
}
inline ::std::string* ProfileResponse::mutable_encoded_trace() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileResponse.encoded_trace)
  return encoded_trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfileResponse::release_encoded_trace() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileResponse.encoded_trace)
  
  return encoded_trace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfileResponse::set_allocated_encoded_trace(::std::string* encoded_trace) {
  if (encoded_trace != NULL) {
    
  } else {
    
  }
  encoded_trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encoded_trace);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileResponse.encoded_trace)
}

// .diplomacy.tensorflow.tpu.op_profile.Profile op_profile = 4;
inline bool ProfileResponse::has_op_profile() const {
  return this != internal_default_instance() && op_profile_ != NULL;
}
inline const ::diplomacy::tensorflow::tpu::op_profile::Profile& ProfileResponse::_internal_op_profile() const {
  return *op_profile_;
}
inline const ::diplomacy::tensorflow::tpu::op_profile::Profile& ProfileResponse::op_profile() const {
  const ::diplomacy::tensorflow::tpu::op_profile::Profile* p = op_profile_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileResponse.op_profile)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::tpu::op_profile::Profile*>(
      &::diplomacy::tensorflow::tpu::op_profile::_Profile_default_instance_);
}
inline ::diplomacy::tensorflow::tpu::op_profile::Profile* ProfileResponse::release_op_profile() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.ProfileResponse.op_profile)
  
  ::diplomacy::tensorflow::tpu::op_profile::Profile* temp = op_profile_;
  op_profile_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::tpu::op_profile::Profile* ProfileResponse::mutable_op_profile() {
  
  if (op_profile_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::tpu::op_profile::Profile>(GetArenaNoVirtual());
    op_profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileResponse.op_profile)
  return op_profile_;
}
inline void ProfileResponse::set_allocated_op_profile(::diplomacy::tensorflow::tpu::op_profile::Profile* op_profile) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(op_profile_);
  }
  if (op_profile) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      op_profile = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, op_profile, submessage_arena);
    }
    
  } else {
    
  }
  op_profile_ = op_profile;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ProfileResponse.op_profile)
}

// repeated .diplomacy.tensorflow.ProfileToolData tool_data = 6;
inline int ProfileResponse::tool_data_size() const {
  return tool_data_.size();
}
inline void ProfileResponse::clear_tool_data() {
  tool_data_.Clear();
}
inline ::diplomacy::tensorflow::ProfileToolData* ProfileResponse::mutable_tool_data(int index) {
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.ProfileResponse.tool_data)
  return tool_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileToolData >*
ProfileResponse::mutable_tool_data() {
  // @@protoc_insertion_point(field_mutable_list:diplomacy.tensorflow.ProfileResponse.tool_data)
  return &tool_data_;
}
inline const ::diplomacy::tensorflow::ProfileToolData& ProfileResponse::tool_data(int index) const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileResponse.tool_data)
  return tool_data_.Get(index);
}
inline ::diplomacy::tensorflow::ProfileToolData* ProfileResponse::add_tool_data() {
  // @@protoc_insertion_point(field_add:diplomacy.tensorflow.ProfileResponse.tool_data)
  return tool_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::diplomacy::tensorflow::ProfileToolData >&
ProfileResponse::tool_data() const {
  // @@protoc_insertion_point(field_list:diplomacy.tensorflow.ProfileResponse.tool_data)
  return tool_data_;
}

// bool empty_trace = 7;
inline void ProfileResponse::clear_empty_trace() {
  empty_trace_ = false;
}
inline bool ProfileResponse::empty_trace() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.ProfileResponse.empty_trace)
  return empty_trace_;
}
inline void ProfileResponse::set_empty_trace(bool value) {
  
  empty_trace_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.ProfileResponse.empty_trace)
}

// -------------------------------------------------------------------

// MonitorRequest

// uint64 duration_ms = 1;
inline void MonitorRequest::clear_duration_ms() {
  duration_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MonitorRequest::duration_ms() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MonitorRequest.duration_ms)
  return duration_ms_;
}
inline void MonitorRequest::set_duration_ms(::google::protobuf::uint64 value) {
  
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.MonitorRequest.duration_ms)
}

// int32 monitoring_level = 2;
inline void MonitorRequest::clear_monitoring_level() {
  monitoring_level_ = 0;
}
inline ::google::protobuf::int32 MonitorRequest::monitoring_level() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MonitorRequest.monitoring_level)
  return monitoring_level_;
}
inline void MonitorRequest::set_monitoring_level(::google::protobuf::int32 value) {
  
  monitoring_level_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.MonitorRequest.monitoring_level)
}

// -------------------------------------------------------------------

// MonitorResponse

// string data = 1;
inline void MonitorResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MonitorResponse::data() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MonitorResponse.data)
  return data_.GetNoArena();
}
inline void MonitorResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.MonitorResponse.data)
}
#if LANG_CXX11
inline void MonitorResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.MonitorResponse.data)
}
#endif
inline void MonitorResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.MonitorResponse.data)
}
inline void MonitorResponse::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.MonitorResponse.data)
}
inline ::std::string* MonitorResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.MonitorResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonitorResponse::release_data() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.MonitorResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonitorResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.MonitorResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow
}  // namespace diplomacy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2ftpu_2fprofiler_2ftpu_5fprofiler_2eproto
