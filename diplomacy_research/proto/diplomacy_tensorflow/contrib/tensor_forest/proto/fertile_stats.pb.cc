// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/tensor_forest/proto/fertile_stats.proto

#include "diplomacy_tensorflow/contrib/tensor_forest/proto/fertile_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SparseVector;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_BinaryNode;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_TreeNode;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GiniStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LeafStat_LeastSquaresRegressionStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FertileSlot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LeafStat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SplitCandidate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LeafStat_GiniImpurityClassificationStats;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto
namespace diplomacy {
namespace tensorflow {
namespace tensorforest {
class FertileStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FertileStats>
      _instance;
} _FertileStats_default_instance_;
class GiniStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GiniStats>
      _instance;
} _GiniStats_default_instance_;
class LeafStat_GiniImpurityClassificationStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafStat_GiniImpurityClassificationStats>
      _instance;
  const ::diplomacy::tensorflow::decision_trees::Vector* dense_counts_;
  const ::diplomacy::tensorflow::decision_trees::SparseVector* sparse_counts_;
} _LeafStat_GiniImpurityClassificationStats_default_instance_;
class LeafStat_LeastSquaresRegressionStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafStat_LeastSquaresRegressionStats>
      _instance;
} _LeafStat_LeastSquaresRegressionStats_default_instance_;
class LeafStatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafStat>
      _instance;
  const ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats* classification_;
  const ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats* regression_;
} _LeafStat_default_instance_;
class FertileSlotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FertileSlot>
      _instance;
} _FertileSlot_default_instance_;
class SplitCandidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitCandidate>
      _instance;
} _SplitCandidate_default_instance_;
class TreePathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreePath>
      _instance;
} _TreePath_default_instance_;
}  // namespace tensorforest
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto {
static void InitDefaultsFertileStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_FertileStats_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::FertileStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::FertileStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FertileStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFertileStats}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_FertileSlot.base,}};

static void InitDefaultsGiniStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_GiniStats_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::GiniStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::GiniStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GiniStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGiniStats}, {}};

static void InitDefaultsLeafStat_GiniImpurityClassificationStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_LeafStat_GiniImpurityClassificationStats_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LeafStat_GiniImpurityClassificationStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLeafStat_GiniImpurityClassificationStats}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Vector.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_SparseVector.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_GiniStats.base,}};

static void InitDefaultsLeafStat_LeastSquaresRegressionStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_LeafStat_LeastSquaresRegressionStats_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeafStat_LeastSquaresRegressionStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeafStat_LeastSquaresRegressionStats}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Vector.base,}};

static void InitDefaultsLeafStat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_LeafStat_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::LeafStat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::LeafStat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LeafStat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLeafStat}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_GiniImpurityClassificationStats.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_LeastSquaresRegressionStats.base,}};

static void InitDefaultsFertileSlot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_FertileSlot_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::FertileSlot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::FertileSlot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FertileSlot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFertileSlot}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_SplitCandidate.base,}};

static void InitDefaultsSplitCandidate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_SplitCandidate_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::SplitCandidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::SplitCandidate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SplitCandidate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSplitCandidate}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_BinaryNode.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat.base,}};

static void InitDefaultsTreePath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_TreePath_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::TreePath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::TreePath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TreePath =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTreePath}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_TreeNode.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FertileStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GiniStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeafStat_GiniImpurityClassificationStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeafStat_LeastSquaresRegressionStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeafStat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FertileSlot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitCandidate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TreePath.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileStats, node_to_slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::GiniStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::GiniStats, square_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStatsDefaultTypeInternal, dense_counts_),
  offsetof(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStatsDefaultTypeInternal, sparse_counts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats, gini_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats, counts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats, mean_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats, mean_output_squares_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat, weight_sum_),
  offsetof(::diplomacy::tensorflow::tensorforest::LeafStatDefaultTypeInternal, classification_),
  offsetof(::diplomacy::tensorflow::tensorforest::LeafStatDefaultTypeInternal, regression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LeafStat, leaf_stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileSlot, leaf_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileSlot, candidates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileSlot, post_init_leaf_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileSlot, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::FertileSlot, depth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitCandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitCandidate, split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitCandidate, left_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitCandidate, right_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitCandidate, unique_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TreePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TreePath, nodes_visited_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::tensorforest::FertileStats)},
  { 6, -1, sizeof(::diplomacy::tensorflow::tensorforest::GiniStats)},
  { 12, -1, sizeof(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats)},
  { 21, -1, sizeof(::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats)},
  { 28, -1, sizeof(::diplomacy::tensorflow::tensorforest::LeafStat)},
  { 37, -1, sizeof(::diplomacy::tensorflow::tensorforest::FertileSlot)},
  { 47, -1, sizeof(::diplomacy::tensorflow::tensorforest::SplitCandidate)},
  { 56, -1, sizeof(::diplomacy::tensorflow::tensorforest::TreePath)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_FertileStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_GiniStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_LeafStat_GiniImpurityClassificationStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_LeafStat_LeastSquaresRegressionStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_LeafStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_FertileSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_SplitCandidate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_TreePath_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/contrib/tensor_forest/proto/fertile_stats.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nDdiplomacy_tensorflow/contrib/tensor_fo"
      "rest/proto/fertile_stats.proto\022!diplomac"
      "y.tensorflow.tensorforest\032Jdiplomacy_ten"
      "sorflow/contrib/decision_trees/proto/gen"
      "eric_tree_model.proto\"T\n\014FertileStats\022D\n"
      "\014node_to_slot\030\001 \003(\0132..diplomacy.tensorfl"
      "ow.tensorforest.FertileSlot\"\033\n\tGiniStats"
      "\022\016\n\006square\030\002 \001(\002\"\230\005\n\010LeafStat\022\022\n\nweight_"
      "sum\030\003 \001(\002\022e\n\016classification\030\001 \001(\0132K.dipl"
      "omacy.tensorflow.tensorforest.LeafStat.G"
      "iniImpurityClassificationStatsH\000\022]\n\nregr"
      "ession\030\002 \001(\0132G.diplomacy.tensorflow.tens"
      "orforest.LeafStat.LeastSquaresRegression"
      "StatsH\000\032\370\001\n\037GiniImpurityClassificationSt"
      "ats\022C\n\014dense_counts\030\001 \001(\0132+.diplomacy.te"
      "nsorflow.decision_trees.VectorH\000\022J\n\rspar"
      "se_counts\030\002 \001(\01321.diplomacy.tensorflow.d"
      "ecision_trees.SparseVectorH\000\022:\n\004gini\030\003 \001"
      "(\0132,.diplomacy.tensorflow.tensorforest.G"
      "iniStatsB\010\n\006counts\032\251\001\n\033LeastSquaresRegre"
      "ssionStats\022@\n\013mean_output\030\001 \001(\0132+.diplom"
      "acy.tensorflow.decision_trees.Vector\022H\n\023"
      "mean_output_squares\030\002 \001(\0132+.diplomacy.te"
      "nsorflow.decision_trees.VectorB\013\n\tleaf_s"
      "tat\"\200\002\n\013FertileSlot\022\?\n\nleaf_stats\030\004 \001(\0132"
      "+.diplomacy.tensorflow.tensorforest.Leaf"
      "Stat\022E\n\ncandidates\030\001 \003(\01321.diplomacy.ten"
      "sorflow.tensorforest.SplitCandidate\022I\n\024p"
      "ost_init_leaf_stats\030\006 \001(\0132+.diplomacy.te"
      "nsorflow.tensorforest.LeafStat\022\017\n\007node_i"
      "d\030\005 \001(\005\022\r\n\005depth\030\007 \001(\005\"\346\001\n\016SplitCandidat"
      "e\022>\n\005split\030\001 \001(\0132/.diplomacy.tensorflow."
      "decision_trees.BinaryNode\022\?\n\nleft_stats\030"
      "\004 \001(\0132+.diplomacy.tensorflow.tensorfores"
      "t.LeafStat\022@\n\013right_stats\030\005 \001(\0132+.diplom"
      "acy.tensorflow.tensorforest.LeafStat\022\021\n\t"
      "unique_id\030\006 \001(\t\"P\n\010TreePath\022D\n\rnodes_vis"
      "ited\030\001 \003(\0132-.diplomacy.tensorflow.decisi"
      "on_trees.TreeNodeB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/contrib/tensor_forest/proto/fertile_stats.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto
namespace diplomacy {
namespace tensorflow {
namespace tensorforest {

// ===================================================================

void FertileStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FertileStats::kNodeToSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FertileStats::FertileStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_FertileStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.FertileStats)
}
FertileStats::FertileStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_to_slot_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_FertileStats.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.FertileStats)
}
FertileStats::FertileStats(const FertileStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_to_slot_(from.node_to_slot_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.FertileStats)
}

void FertileStats::SharedCtor() {
}

FertileStats::~FertileStats() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.FertileStats)
  SharedDtor();
}

void FertileStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void FertileStats::ArenaDtor(void* object) {
  FertileStats* _this = reinterpret_cast< FertileStats* >(object);
  (void)_this;
}
void FertileStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FertileStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FertileStats::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FertileStats& FertileStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_FertileStats.base);
  return *internal_default_instance();
}


void FertileStats::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.FertileStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_to_slot_.Clear();
  _internal_metadata_.Clear();
}

bool FertileStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.FertileStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .diplomacy.tensorflow.tensorforest.FertileSlot node_to_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_to_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.FertileStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.FertileStats)
  return false;
#undef DO_
}

void FertileStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.FertileStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.tensorforest.FertileSlot node_to_slot = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_to_slot_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_to_slot(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.FertileStats)
}

::google::protobuf::uint8* FertileStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.FertileStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.tensorforest.FertileSlot node_to_slot = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_to_slot_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_to_slot(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.FertileStats)
  return target;
}

size_t FertileStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.FertileStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.tensorforest.FertileSlot node_to_slot = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_to_slot_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_to_slot(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FertileStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.FertileStats)
  GOOGLE_DCHECK_NE(&from, this);
  const FertileStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FertileStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.FertileStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.FertileStats)
    MergeFrom(*source);
  }
}

void FertileStats::MergeFrom(const FertileStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.FertileStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_to_slot_.MergeFrom(from.node_to_slot_);
}

void FertileStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.FertileStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FertileStats::CopyFrom(const FertileStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.FertileStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FertileStats::IsInitialized() const {
  return true;
}

void FertileStats::Swap(FertileStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FertileStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FertileStats::UnsafeArenaSwap(FertileStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FertileStats::InternalSwap(FertileStats* other) {
  using std::swap;
  CastToBase(&node_to_slot_)->InternalSwap(CastToBase(&other->node_to_slot_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FertileStats::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GiniStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GiniStats::kSquareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GiniStats::GiniStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_GiniStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.GiniStats)
}
GiniStats::GiniStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_GiniStats.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.GiniStats)
}
GiniStats::GiniStats(const GiniStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  square_ = from.square_;
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.GiniStats)
}

void GiniStats::SharedCtor() {
  square_ = 0;
}

GiniStats::~GiniStats() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.GiniStats)
  SharedDtor();
}

void GiniStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void GiniStats::ArenaDtor(void* object) {
  GiniStats* _this = reinterpret_cast< GiniStats* >(object);
  (void)_this;
}
void GiniStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GiniStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GiniStats::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GiniStats& GiniStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_GiniStats.base);
  return *internal_default_instance();
}


void GiniStats::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.GiniStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  square_ = 0;
  _internal_metadata_.Clear();
}

bool GiniStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.GiniStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float square = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &square_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.GiniStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.GiniStats)
  return false;
#undef DO_
}

void GiniStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.GiniStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float square = 2;
  if (this->square() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->square(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.GiniStats)
}

::google::protobuf::uint8* GiniStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.GiniStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float square = 2;
  if (this->square() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->square(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.GiniStats)
  return target;
}

size_t GiniStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.GiniStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float square = 2;
  if (this->square() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GiniStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.GiniStats)
  GOOGLE_DCHECK_NE(&from, this);
  const GiniStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GiniStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.GiniStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.GiniStats)
    MergeFrom(*source);
  }
}

void GiniStats::MergeFrom(const GiniStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.GiniStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.square() != 0) {
    set_square(from.square());
  }
}

void GiniStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.GiniStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiniStats::CopyFrom(const GiniStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.GiniStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiniStats::IsInitialized() const {
  return true;
}

void GiniStats::Swap(GiniStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GiniStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GiniStats::UnsafeArenaSwap(GiniStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GiniStats::InternalSwap(GiniStats* other) {
  using std::swap;
  swap(square_, other->square_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GiniStats::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeafStat_GiniImpurityClassificationStats::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_LeafStat_GiniImpurityClassificationStats_default_instance_.dense_counts_ = const_cast< ::diplomacy::tensorflow::decision_trees::Vector*>(
      ::diplomacy::tensorflow::decision_trees::Vector::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_LeafStat_GiniImpurityClassificationStats_default_instance_.sparse_counts_ = const_cast< ::diplomacy::tensorflow::decision_trees::SparseVector*>(
      ::diplomacy::tensorflow::decision_trees::SparseVector::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_LeafStat_GiniImpurityClassificationStats_default_instance_._instance.get_mutable()->gini_ = const_cast< ::diplomacy::tensorflow::tensorforest::GiniStats*>(
      ::diplomacy::tensorflow::tensorforest::GiniStats::internal_default_instance());
}
void LeafStat_GiniImpurityClassificationStats::set_allocated_dense_counts(::diplomacy::tensorflow::decision_trees::Vector* dense_counts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_counts();
  if (dense_counts) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(dense_counts)->GetArena();
    if (message_arena != submessage_arena) {
      dense_counts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dense_counts, submessage_arena);
    }
    set_has_dense_counts();
    counts_.dense_counts_ = dense_counts;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats.dense_counts)
}
void LeafStat_GiniImpurityClassificationStats::clear_dense_counts() {
  if (has_dense_counts()) {
    if (GetArenaNoVirtual() == NULL) {
      delete counts_.dense_counts_;
    }
    clear_has_counts();
  }
}
void LeafStat_GiniImpurityClassificationStats::set_allocated_sparse_counts(::diplomacy::tensorflow::decision_trees::SparseVector* sparse_counts) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_counts();
  if (sparse_counts) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(sparse_counts)->GetArena();
    if (message_arena != submessage_arena) {
      sparse_counts = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sparse_counts, submessage_arena);
    }
    set_has_sparse_counts();
    counts_.sparse_counts_ = sparse_counts;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats.sparse_counts)
}
void LeafStat_GiniImpurityClassificationStats::clear_sparse_counts() {
  if (has_sparse_counts()) {
    if (GetArenaNoVirtual() == NULL) {
      delete counts_.sparse_counts_;
    }
    clear_has_counts();
  }
}
void LeafStat_GiniImpurityClassificationStats::unsafe_arena_set_allocated_gini(
    ::diplomacy::tensorflow::tensorforest::GiniStats* gini) {
  if (GetArenaNoVirtual() == NULL) {
    delete gini_;
  }
  gini_ = gini;
  if (gini) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats.gini)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafStat_GiniImpurityClassificationStats::kDenseCountsFieldNumber;
const int LeafStat_GiniImpurityClassificationStats::kSparseCountsFieldNumber;
const int LeafStat_GiniImpurityClassificationStats::kGiniFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafStat_GiniImpurityClassificationStats::LeafStat_GiniImpurityClassificationStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_GiniImpurityClassificationStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
}
LeafStat_GiniImpurityClassificationStats::LeafStat_GiniImpurityClassificationStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_GiniImpurityClassificationStats.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
}
LeafStat_GiniImpurityClassificationStats::LeafStat_GiniImpurityClassificationStats(const LeafStat_GiniImpurityClassificationStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gini()) {
    gini_ = new ::diplomacy::tensorflow::tensorforest::GiniStats(*from.gini_);
  } else {
    gini_ = NULL;
  }
  clear_has_counts();
  switch (from.counts_case()) {
    case kDenseCounts: {
      mutable_dense_counts()->::diplomacy::tensorflow::decision_trees::Vector::MergeFrom(from.dense_counts());
      break;
    }
    case kSparseCounts: {
      mutable_sparse_counts()->::diplomacy::tensorflow::decision_trees::SparseVector::MergeFrom(from.sparse_counts());
      break;
    }
    case COUNTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
}

void LeafStat_GiniImpurityClassificationStats::SharedCtor() {
  gini_ = NULL;
  clear_has_counts();
}

LeafStat_GiniImpurityClassificationStats::~LeafStat_GiniImpurityClassificationStats() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  SharedDtor();
}

void LeafStat_GiniImpurityClassificationStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete gini_;
  if (has_counts()) {
    clear_counts();
  }
}

void LeafStat_GiniImpurityClassificationStats::ArenaDtor(void* object) {
  LeafStat_GiniImpurityClassificationStats* _this = reinterpret_cast< LeafStat_GiniImpurityClassificationStats* >(object);
  (void)_this;
}
void LeafStat_GiniImpurityClassificationStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LeafStat_GiniImpurityClassificationStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeafStat_GiniImpurityClassificationStats::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeafStat_GiniImpurityClassificationStats& LeafStat_GiniImpurityClassificationStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_GiniImpurityClassificationStats.base);
  return *internal_default_instance();
}


void LeafStat_GiniImpurityClassificationStats::clear_counts() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  switch (counts_case()) {
    case kDenseCounts: {
      if (GetArenaNoVirtual() == NULL) {
        delete counts_.dense_counts_;
      }
      break;
    }
    case kSparseCounts: {
      if (GetArenaNoVirtual() == NULL) {
        delete counts_.sparse_counts_;
      }
      break;
    }
    case COUNTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COUNTS_NOT_SET;
}


void LeafStat_GiniImpurityClassificationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gini_ != NULL) {
    delete gini_;
  }
  gini_ = NULL;
  clear_counts();
  _internal_metadata_.Clear();
}

bool LeafStat_GiniImpurityClassificationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.Vector dense_counts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dense_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.SparseVector sparse_counts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sparse_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.GiniStats gini = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gini()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  return false;
#undef DO_
}

void LeafStat_GiniImpurityClassificationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Vector dense_counts = 1;
  if (has_dense_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_dense_counts(), output);
  }

  // .diplomacy.tensorflow.decision_trees.SparseVector sparse_counts = 2;
  if (has_sparse_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sparse_counts(), output);
  }

  // .diplomacy.tensorflow.tensorforest.GiniStats gini = 3;
  if (this->has_gini()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_gini(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
}

::google::protobuf::uint8* LeafStat_GiniImpurityClassificationStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Vector dense_counts = 1;
  if (has_dense_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_dense_counts(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.SparseVector sparse_counts = 2;
  if (has_sparse_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sparse_counts(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.GiniStats gini = 3;
  if (this->has_gini()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_gini(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  return target;
}

size_t LeafStat_GiniImpurityClassificationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .diplomacy.tensorflow.tensorforest.GiniStats gini = 3;
  if (this->has_gini()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gini_);
  }

  switch (counts_case()) {
    // .diplomacy.tensorflow.decision_trees.Vector dense_counts = 1;
    case kDenseCounts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *counts_.dense_counts_);
      break;
    }
    // .diplomacy.tensorflow.decision_trees.SparseVector sparse_counts = 2;
    case kSparseCounts: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *counts_.sparse_counts_);
      break;
    }
    case COUNTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafStat_GiniImpurityClassificationStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafStat_GiniImpurityClassificationStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeafStat_GiniImpurityClassificationStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
    MergeFrom(*source);
  }
}

void LeafStat_GiniImpurityClassificationStats::MergeFrom(const LeafStat_GiniImpurityClassificationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gini()) {
    mutable_gini()->::diplomacy::tensorflow::tensorforest::GiniStats::MergeFrom(from.gini());
  }
  switch (from.counts_case()) {
    case kDenseCounts: {
      mutable_dense_counts()->::diplomacy::tensorflow::decision_trees::Vector::MergeFrom(from.dense_counts());
      break;
    }
    case kSparseCounts: {
      mutable_sparse_counts()->::diplomacy::tensorflow::decision_trees::SparseVector::MergeFrom(from.sparse_counts());
      break;
    }
    case COUNTS_NOT_SET: {
      break;
    }
  }
}

void LeafStat_GiniImpurityClassificationStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafStat_GiniImpurityClassificationStats::CopyFrom(const LeafStat_GiniImpurityClassificationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafStat_GiniImpurityClassificationStats::IsInitialized() const {
  return true;
}

void LeafStat_GiniImpurityClassificationStats::Swap(LeafStat_GiniImpurityClassificationStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LeafStat_GiniImpurityClassificationStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LeafStat_GiniImpurityClassificationStats::UnsafeArenaSwap(LeafStat_GiniImpurityClassificationStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LeafStat_GiniImpurityClassificationStats::InternalSwap(LeafStat_GiniImpurityClassificationStats* other) {
  using std::swap;
  swap(gini_, other->gini_);
  swap(counts_, other->counts_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeafStat_GiniImpurityClassificationStats::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeafStat_LeastSquaresRegressionStats::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_LeafStat_LeastSquaresRegressionStats_default_instance_._instance.get_mutable()->mean_output_ = const_cast< ::diplomacy::tensorflow::decision_trees::Vector*>(
      ::diplomacy::tensorflow::decision_trees::Vector::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_LeafStat_LeastSquaresRegressionStats_default_instance_._instance.get_mutable()->mean_output_squares_ = const_cast< ::diplomacy::tensorflow::decision_trees::Vector*>(
      ::diplomacy::tensorflow::decision_trees::Vector::internal_default_instance());
}
void LeafStat_LeastSquaresRegressionStats::unsafe_arena_set_allocated_mean_output(
    ::diplomacy::tensorflow::decision_trees::Vector* mean_output) {
  if (GetArenaNoVirtual() == NULL) {
    delete mean_output_;
  }
  mean_output_ = mean_output;
  if (mean_output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats.mean_output)
}
void LeafStat_LeastSquaresRegressionStats::clear_mean_output() {
  if (GetArenaNoVirtual() == NULL && mean_output_ != NULL) {
    delete mean_output_;
  }
  mean_output_ = NULL;
}
void LeafStat_LeastSquaresRegressionStats::unsafe_arena_set_allocated_mean_output_squares(
    ::diplomacy::tensorflow::decision_trees::Vector* mean_output_squares) {
  if (GetArenaNoVirtual() == NULL) {
    delete mean_output_squares_;
  }
  mean_output_squares_ = mean_output_squares;
  if (mean_output_squares) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats.mean_output_squares)
}
void LeafStat_LeastSquaresRegressionStats::clear_mean_output_squares() {
  if (GetArenaNoVirtual() == NULL && mean_output_squares_ != NULL) {
    delete mean_output_squares_;
  }
  mean_output_squares_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafStat_LeastSquaresRegressionStats::kMeanOutputFieldNumber;
const int LeafStat_LeastSquaresRegressionStats::kMeanOutputSquaresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafStat_LeastSquaresRegressionStats::LeafStat_LeastSquaresRegressionStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_LeastSquaresRegressionStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
}
LeafStat_LeastSquaresRegressionStats::LeafStat_LeastSquaresRegressionStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_LeastSquaresRegressionStats.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
}
LeafStat_LeastSquaresRegressionStats::LeafStat_LeastSquaresRegressionStats(const LeafStat_LeastSquaresRegressionStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mean_output()) {
    mean_output_ = new ::diplomacy::tensorflow::decision_trees::Vector(*from.mean_output_);
  } else {
    mean_output_ = NULL;
  }
  if (from.has_mean_output_squares()) {
    mean_output_squares_ = new ::diplomacy::tensorflow::decision_trees::Vector(*from.mean_output_squares_);
  } else {
    mean_output_squares_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
}

void LeafStat_LeastSquaresRegressionStats::SharedCtor() {
  ::memset(&mean_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_output_squares_) -
      reinterpret_cast<char*>(&mean_output_)) + sizeof(mean_output_squares_));
}

LeafStat_LeastSquaresRegressionStats::~LeafStat_LeastSquaresRegressionStats() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  SharedDtor();
}

void LeafStat_LeastSquaresRegressionStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete mean_output_;
  if (this != internal_default_instance()) delete mean_output_squares_;
}

void LeafStat_LeastSquaresRegressionStats::ArenaDtor(void* object) {
  LeafStat_LeastSquaresRegressionStats* _this = reinterpret_cast< LeafStat_LeastSquaresRegressionStats* >(object);
  (void)_this;
}
void LeafStat_LeastSquaresRegressionStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LeafStat_LeastSquaresRegressionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeafStat_LeastSquaresRegressionStats::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeafStat_LeastSquaresRegressionStats& LeafStat_LeastSquaresRegressionStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat_LeastSquaresRegressionStats.base);
  return *internal_default_instance();
}


void LeafStat_LeastSquaresRegressionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mean_output_ != NULL) {
    delete mean_output_;
  }
  mean_output_ = NULL;
  if (GetArenaNoVirtual() == NULL && mean_output_squares_ != NULL) {
    delete mean_output_squares_;
  }
  mean_output_squares_ = NULL;
  _internal_metadata_.Clear();
}

bool LeafStat_LeastSquaresRegressionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.Vector mean_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mean_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.Vector mean_output_squares = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mean_output_squares()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  return false;
#undef DO_
}

void LeafStat_LeastSquaresRegressionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Vector mean_output = 1;
  if (this->has_mean_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mean_output(), output);
  }

  // .diplomacy.tensorflow.decision_trees.Vector mean_output_squares = 2;
  if (this->has_mean_output_squares()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_mean_output_squares(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
}

::google::protobuf::uint8* LeafStat_LeastSquaresRegressionStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Vector mean_output = 1;
  if (this->has_mean_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mean_output(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.Vector mean_output_squares = 2;
  if (this->has_mean_output_squares()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_mean_output_squares(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  return target;
}

size_t LeafStat_LeastSquaresRegressionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .diplomacy.tensorflow.decision_trees.Vector mean_output = 1;
  if (this->has_mean_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mean_output_);
  }

  // .diplomacy.tensorflow.decision_trees.Vector mean_output_squares = 2;
  if (this->has_mean_output_squares()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mean_output_squares_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafStat_LeastSquaresRegressionStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafStat_LeastSquaresRegressionStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeafStat_LeastSquaresRegressionStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
    MergeFrom(*source);
  }
}

void LeafStat_LeastSquaresRegressionStats::MergeFrom(const LeafStat_LeastSquaresRegressionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mean_output()) {
    mutable_mean_output()->::diplomacy::tensorflow::decision_trees::Vector::MergeFrom(from.mean_output());
  }
  if (from.has_mean_output_squares()) {
    mutable_mean_output_squares()->::diplomacy::tensorflow::decision_trees::Vector::MergeFrom(from.mean_output_squares());
  }
}

void LeafStat_LeastSquaresRegressionStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafStat_LeastSquaresRegressionStats::CopyFrom(const LeafStat_LeastSquaresRegressionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafStat_LeastSquaresRegressionStats::IsInitialized() const {
  return true;
}

void LeafStat_LeastSquaresRegressionStats::Swap(LeafStat_LeastSquaresRegressionStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LeafStat_LeastSquaresRegressionStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LeafStat_LeastSquaresRegressionStats::UnsafeArenaSwap(LeafStat_LeastSquaresRegressionStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LeafStat_LeastSquaresRegressionStats::InternalSwap(LeafStat_LeastSquaresRegressionStats* other) {
  using std::swap;
  swap(mean_output_, other->mean_output_);
  swap(mean_output_squares_, other->mean_output_squares_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeafStat_LeastSquaresRegressionStats::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LeafStat::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_LeafStat_default_instance_.classification_ = const_cast< ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats*>(
      ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_LeafStat_default_instance_.regression_ = const_cast< ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats*>(
      ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats::internal_default_instance());
}
void LeafStat::set_allocated_classification(::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats* classification) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf_stat();
  if (classification) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(classification);
    if (message_arena != submessage_arena) {
      classification = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    set_has_classification();
    leaf_stat_.classification_ = classification;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.tensorforest.LeafStat.classification)
}
void LeafStat::set_allocated_regression(::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats* regression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf_stat();
  if (regression) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(regression);
    if (message_arena != submessage_arena) {
      regression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, regression, submessage_arena);
    }
    set_has_regression();
    leaf_stat_.regression_ = regression;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.tensorforest.LeafStat.regression)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafStat::kWeightSumFieldNumber;
const int LeafStat::kClassificationFieldNumber;
const int LeafStat::kRegressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafStat::LeafStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.LeafStat)
}
LeafStat::LeafStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.LeafStat)
}
LeafStat::LeafStat(const LeafStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_sum_ = from.weight_sum_;
  clear_has_leaf_stat();
  switch (from.leaf_stat_case()) {
    case kClassification: {
      mutable_classification()->::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats::MergeFrom(from.classification());
      break;
    }
    case kRegression: {
      mutable_regression()->::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats::MergeFrom(from.regression());
      break;
    }
    case LEAF_STAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.LeafStat)
}

void LeafStat::SharedCtor() {
  weight_sum_ = 0;
  clear_has_leaf_stat();
}

LeafStat::~LeafStat() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.LeafStat)
  SharedDtor();
}

void LeafStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_leaf_stat()) {
    clear_leaf_stat();
  }
}

void LeafStat::ArenaDtor(void* object) {
  LeafStat* _this = reinterpret_cast< LeafStat* >(object);
  (void)_this;
}
void LeafStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LeafStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LeafStat::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeafStat& LeafStat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_LeafStat.base);
  return *internal_default_instance();
}


void LeafStat::clear_leaf_stat() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.tensorforest.LeafStat)
  switch (leaf_stat_case()) {
    case kClassification: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_stat_.classification_;
      }
      break;
    }
    case kRegression: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_stat_.regression_;
      }
      break;
    }
    case LEAF_STAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEAF_STAT_NOT_SET;
}


void LeafStat::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.LeafStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_sum_ = 0;
  clear_leaf_stat();
  _internal_metadata_.Clear();
}

bool LeafStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.LeafStat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats classification = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats regression = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_regression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float weight_sum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.LeafStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.LeafStat)
  return false;
#undef DO_
}

void LeafStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.LeafStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats classification = 1;
  if (has_classification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_classification(), output);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats regression = 2;
  if (has_regression()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_regression(), output);
  }

  // float weight_sum = 3;
  if (this->weight_sum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight_sum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.LeafStat)
}

::google::protobuf::uint8* LeafStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.LeafStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats classification = 1;
  if (has_classification()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_classification(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats regression = 2;
  if (has_regression()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_regression(), deterministic, target);
  }

  // float weight_sum = 3;
  if (this->weight_sum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight_sum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.LeafStat)
  return target;
}

size_t LeafStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.LeafStat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float weight_sum = 3;
  if (this->weight_sum() != 0) {
    total_size += 1 + 4;
  }

  switch (leaf_stat_case()) {
    // .diplomacy.tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats classification = 1;
    case kClassification: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaf_stat_.classification_);
      break;
    }
    // .diplomacy.tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats regression = 2;
    case kRegression: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaf_stat_.regression_);
      break;
    }
    case LEAF_STAT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.LeafStat)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeafStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.LeafStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.LeafStat)
    MergeFrom(*source);
  }
}

void LeafStat::MergeFrom(const LeafStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.LeafStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.weight_sum() != 0) {
    set_weight_sum(from.weight_sum());
  }
  switch (from.leaf_stat_case()) {
    case kClassification: {
      mutable_classification()->::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats::MergeFrom(from.classification());
      break;
    }
    case kRegression: {
      mutable_regression()->::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats::MergeFrom(from.regression());
      break;
    }
    case LEAF_STAT_NOT_SET: {
      break;
    }
  }
}

void LeafStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.LeafStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafStat::CopyFrom(const LeafStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.LeafStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafStat::IsInitialized() const {
  return true;
}

void LeafStat::Swap(LeafStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LeafStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LeafStat::UnsafeArenaSwap(LeafStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LeafStat::InternalSwap(LeafStat* other) {
  using std::swap;
  swap(weight_sum_, other->weight_sum_);
  swap(leaf_stat_, other->leaf_stat_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LeafStat::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FertileSlot::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_FertileSlot_default_instance_._instance.get_mutable()->leaf_stats_ = const_cast< ::diplomacy::tensorflow::tensorforest::LeafStat*>(
      ::diplomacy::tensorflow::tensorforest::LeafStat::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_FertileSlot_default_instance_._instance.get_mutable()->post_init_leaf_stats_ = const_cast< ::diplomacy::tensorflow::tensorforest::LeafStat*>(
      ::diplomacy::tensorflow::tensorforest::LeafStat::internal_default_instance());
}
void FertileSlot::unsafe_arena_set_allocated_leaf_stats(
    ::diplomacy::tensorflow::tensorforest::LeafStat* leaf_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete leaf_stats_;
  }
  leaf_stats_ = leaf_stats;
  if (leaf_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.FertileSlot.leaf_stats)
}
void FertileSlot::unsafe_arena_set_allocated_post_init_leaf_stats(
    ::diplomacy::tensorflow::tensorforest::LeafStat* post_init_leaf_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete post_init_leaf_stats_;
  }
  post_init_leaf_stats_ = post_init_leaf_stats;
  if (post_init_leaf_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.FertileSlot.post_init_leaf_stats)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FertileSlot::kLeafStatsFieldNumber;
const int FertileSlot::kCandidatesFieldNumber;
const int FertileSlot::kPostInitLeafStatsFieldNumber;
const int FertileSlot::kNodeIdFieldNumber;
const int FertileSlot::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FertileSlot::FertileSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_FertileSlot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.FertileSlot)
}
FertileSlot::FertileSlot(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  candidates_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_FertileSlot.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.FertileSlot)
}
FertileSlot::FertileSlot(const FertileSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leaf_stats()) {
    leaf_stats_ = new ::diplomacy::tensorflow::tensorforest::LeafStat(*from.leaf_stats_);
  } else {
    leaf_stats_ = NULL;
  }
  if (from.has_post_init_leaf_stats()) {
    post_init_leaf_stats_ = new ::diplomacy::tensorflow::tensorforest::LeafStat(*from.post_init_leaf_stats_);
  } else {
    post_init_leaf_stats_ = NULL;
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(depth_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.FertileSlot)
}

void FertileSlot::SharedCtor() {
  ::memset(&leaf_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&leaf_stats_)) + sizeof(depth_));
}

FertileSlot::~FertileSlot() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.FertileSlot)
  SharedDtor();
}

void FertileSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete leaf_stats_;
  if (this != internal_default_instance()) delete post_init_leaf_stats_;
}

void FertileSlot::ArenaDtor(void* object) {
  FertileSlot* _this = reinterpret_cast< FertileSlot* >(object);
  (void)_this;
}
void FertileSlot::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FertileSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FertileSlot::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FertileSlot& FertileSlot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_FertileSlot.base);
  return *internal_default_instance();
}


void FertileSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  if (GetArenaNoVirtual() == NULL && leaf_stats_ != NULL) {
    delete leaf_stats_;
  }
  leaf_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && post_init_leaf_stats_ != NULL) {
    delete post_init_leaf_stats_;
  }
  post_init_leaf_stats_ = NULL;
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(depth_));
  _internal_metadata_.Clear();
}

bool FertileSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .diplomacy.tensorflow.tensorforest.SplitCandidate candidates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_candidates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.LeafStat leaf_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leaf_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.LeafStat post_init_leaf_stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_post_init_leaf_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 depth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.FertileSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.FertileSlot)
  return false;
#undef DO_
}

void FertileSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.tensorforest.SplitCandidate candidates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->candidates(static_cast<int>(i)),
      output);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat leaf_stats = 4;
  if (this->has_leaf_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_leaf_stats(), output);
  }

  // int32 node_id = 5;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->node_id(), output);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat post_init_leaf_stats = 6;
  if (this->has_post_init_leaf_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_post_init_leaf_stats(), output);
  }

  // int32 depth = 7;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->depth(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.FertileSlot)
}

::google::protobuf::uint8* FertileSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.tensorforest.SplitCandidate candidates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->candidates(static_cast<int>(i)), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat leaf_stats = 4;
  if (this->has_leaf_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_leaf_stats(), deterministic, target);
  }

  // int32 node_id = 5;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->node_id(), target);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat post_init_leaf_stats = 6;
  if (this->has_post_init_leaf_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_post_init_leaf_stats(), deterministic, target);
  }

  // int32 depth = 7;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->depth(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.FertileSlot)
  return target;
}

size_t FertileSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.tensorforest.SplitCandidate candidates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->candidates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candidates(static_cast<int>(i)));
    }
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat leaf_stats = 4;
  if (this->has_leaf_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leaf_stats_);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat post_init_leaf_stats = 6;
  if (this->has_post_init_leaf_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *post_init_leaf_stats_);
  }

  // int32 node_id = 5;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // int32 depth = 7;
  if (this->depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FertileSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const FertileSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FertileSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.FertileSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.FertileSlot)
    MergeFrom(*source);
  }
}

void FertileSlot::MergeFrom(const FertileSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  if (from.has_leaf_stats()) {
    mutable_leaf_stats()->::diplomacy::tensorflow::tensorforest::LeafStat::MergeFrom(from.leaf_stats());
  }
  if (from.has_post_init_leaf_stats()) {
    mutable_post_init_leaf_stats()->::diplomacy::tensorflow::tensorforest::LeafStat::MergeFrom(from.post_init_leaf_stats());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
}

void FertileSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FertileSlot::CopyFrom(const FertileSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.FertileSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FertileSlot::IsInitialized() const {
  return true;
}

void FertileSlot::Swap(FertileSlot* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FertileSlot* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FertileSlot::UnsafeArenaSwap(FertileSlot* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FertileSlot::InternalSwap(FertileSlot* other) {
  using std::swap;
  CastToBase(&candidates_)->InternalSwap(CastToBase(&other->candidates_));
  swap(leaf_stats_, other->leaf_stats_);
  swap(post_init_leaf_stats_, other->post_init_leaf_stats_);
  swap(node_id_, other->node_id_);
  swap(depth_, other->depth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FertileSlot::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SplitCandidate::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_SplitCandidate_default_instance_._instance.get_mutable()->split_ = const_cast< ::diplomacy::tensorflow::decision_trees::BinaryNode*>(
      ::diplomacy::tensorflow::decision_trees::BinaryNode::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_SplitCandidate_default_instance_._instance.get_mutable()->left_stats_ = const_cast< ::diplomacy::tensorflow::tensorforest::LeafStat*>(
      ::diplomacy::tensorflow::tensorforest::LeafStat::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_SplitCandidate_default_instance_._instance.get_mutable()->right_stats_ = const_cast< ::diplomacy::tensorflow::tensorforest::LeafStat*>(
      ::diplomacy::tensorflow::tensorforest::LeafStat::internal_default_instance());
}
void SplitCandidate::unsafe_arena_set_allocated_split(
    ::diplomacy::tensorflow::decision_trees::BinaryNode* split) {
  if (GetArenaNoVirtual() == NULL) {
    delete split_;
  }
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.SplitCandidate.split)
}
void SplitCandidate::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
}
void SplitCandidate::unsafe_arena_set_allocated_left_stats(
    ::diplomacy::tensorflow::tensorforest::LeafStat* left_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete left_stats_;
  }
  left_stats_ = left_stats;
  if (left_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.SplitCandidate.left_stats)
}
void SplitCandidate::unsafe_arena_set_allocated_right_stats(
    ::diplomacy::tensorflow::tensorforest::LeafStat* right_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete right_stats_;
  }
  right_stats_ = right_stats;
  if (right_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.tensorforest.SplitCandidate.right_stats)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitCandidate::kSplitFieldNumber;
const int SplitCandidate::kLeftStatsFieldNumber;
const int SplitCandidate::kRightStatsFieldNumber;
const int SplitCandidate::kUniqueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitCandidate::SplitCandidate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_SplitCandidate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.SplitCandidate)
}
SplitCandidate::SplitCandidate(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_SplitCandidate.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.SplitCandidate)
}
SplitCandidate::SplitCandidate(const SplitCandidate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unique_id().size() > 0) {
    unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_id(),
      GetArenaNoVirtual());
  }
  if (from.has_split()) {
    split_ = new ::diplomacy::tensorflow::decision_trees::BinaryNode(*from.split_);
  } else {
    split_ = NULL;
  }
  if (from.has_left_stats()) {
    left_stats_ = new ::diplomacy::tensorflow::tensorforest::LeafStat(*from.left_stats_);
  } else {
    left_stats_ = NULL;
  }
  if (from.has_right_stats()) {
    right_stats_ = new ::diplomacy::tensorflow::tensorforest::LeafStat(*from.right_stats_);
  } else {
    right_stats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.SplitCandidate)
}

void SplitCandidate::SharedCtor() {
  unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&split_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_stats_) -
      reinterpret_cast<char*>(&split_)) + sizeof(right_stats_));
}

SplitCandidate::~SplitCandidate() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.SplitCandidate)
  SharedDtor();
}

void SplitCandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  unique_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete split_;
  if (this != internal_default_instance()) delete left_stats_;
  if (this != internal_default_instance()) delete right_stats_;
}

void SplitCandidate::ArenaDtor(void* object) {
  SplitCandidate* _this = reinterpret_cast< SplitCandidate* >(object);
  (void)_this;
}
void SplitCandidate::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SplitCandidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SplitCandidate::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitCandidate& SplitCandidate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_SplitCandidate.base);
  return *internal_default_instance();
}


void SplitCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unique_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_stats_ != NULL) {
    delete left_stats_;
  }
  left_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_stats_ != NULL) {
    delete right_stats_;
  }
  right_stats_ = NULL;
  _internal_metadata_.Clear();
}

bool SplitCandidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.BinaryNode split = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.LeafStat left_stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.LeafStat right_stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unique_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_id().data(), static_cast<int>(this->unique_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.tensorforest.SplitCandidate.unique_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.SplitCandidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.SplitCandidate)
  return false;
#undef DO_
}

void SplitCandidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.BinaryNode split = 1;
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_split(), output);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat left_stats = 4;
  if (this->has_left_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_left_stats(), output);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat right_stats = 5;
  if (this->has_right_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_right_stats(), output);
  }

  // string unique_id = 6;
  if (this->unique_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_id().data(), static_cast<int>(this->unique_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.tensorforest.SplitCandidate.unique_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->unique_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.SplitCandidate)
}

::google::protobuf::uint8* SplitCandidate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.BinaryNode split = 1;
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_split(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat left_stats = 4;
  if (this->has_left_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_left_stats(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat right_stats = 5;
  if (this->has_right_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_right_stats(), deterministic, target);
  }

  // string unique_id = 6;
  if (this->unique_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_id().data(), static_cast<int>(this->unique_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.tensorforest.SplitCandidate.unique_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unique_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.SplitCandidate)
  return target;
}

size_t SplitCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string unique_id = 6;
  if (this->unique_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unique_id());
  }

  // .diplomacy.tensorflow.decision_trees.BinaryNode split = 1;
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat left_stats = 4;
  if (this->has_left_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_stats_);
  }

  // .diplomacy.tensorflow.tensorforest.LeafStat right_stats = 5;
  if (this->has_right_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitCandidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitCandidate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitCandidate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.SplitCandidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.SplitCandidate)
    MergeFrom(*source);
  }
}

void SplitCandidate::MergeFrom(const SplitCandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unique_id().size() > 0) {
    set_unique_id(from.unique_id());
  }
  if (from.has_split()) {
    mutable_split()->::diplomacy::tensorflow::decision_trees::BinaryNode::MergeFrom(from.split());
  }
  if (from.has_left_stats()) {
    mutable_left_stats()->::diplomacy::tensorflow::tensorforest::LeafStat::MergeFrom(from.left_stats());
  }
  if (from.has_right_stats()) {
    mutable_right_stats()->::diplomacy::tensorflow::tensorforest::LeafStat::MergeFrom(from.right_stats());
  }
}

void SplitCandidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitCandidate::CopyFrom(const SplitCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.SplitCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitCandidate::IsInitialized() const {
  return true;
}

void SplitCandidate::Swap(SplitCandidate* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SplitCandidate* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SplitCandidate::UnsafeArenaSwap(SplitCandidate* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SplitCandidate::InternalSwap(SplitCandidate* other) {
  using std::swap;
  unique_id_.Swap(&other->unique_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(split_, other->split_);
  swap(left_stats_, other->left_stats_);
  swap(right_stats_, other->right_stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SplitCandidate::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TreePath::InitAsDefaultInstance() {
}
void TreePath::clear_nodes_visited() {
  nodes_visited_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreePath::kNodesVisitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreePath::TreePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_TreePath.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.TreePath)
}
TreePath::TreePath(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  nodes_visited_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_TreePath.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.tensorforest.TreePath)
}
TreePath::TreePath(const TreePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_visited_(from.nodes_visited_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.TreePath)
}

void TreePath::SharedCtor() {
}

TreePath::~TreePath() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.TreePath)
  SharedDtor();
}

void TreePath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void TreePath::ArenaDtor(void* object) {
  TreePath* _this = reinterpret_cast< TreePath* >(object);
  (void)_this;
}
void TreePath::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TreePath::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreePath& TreePath::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::scc_info_TreePath.base);
  return *internal_default_instance();
}


void TreePath::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.TreePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_visited_.Clear();
  _internal_metadata_.Clear();
}

bool TreePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.TreePath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes_visited = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes_visited()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.TreePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.TreePath)
  return false;
#undef DO_
}

void TreePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.TreePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes_visited = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_visited_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes_visited(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.TreePath)
}

::google::protobuf::uint8* TreePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.TreePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes_visited = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_visited_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes_visited(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.TreePath)
  return target;
}

size_t TreePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.TreePath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes_visited = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_visited_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes_visited(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.TreePath)
  GOOGLE_DCHECK_NE(&from, this);
  const TreePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.TreePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.TreePath)
    MergeFrom(*source);
  }
}

void TreePath::MergeFrom(const TreePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.TreePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_visited_.MergeFrom(from.nodes_visited_);
}

void TreePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.TreePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreePath::CopyFrom(const TreePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.TreePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreePath::IsInitialized() const {
  return true;
}

void TreePath::Swap(TreePath* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreePath* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreePath::UnsafeArenaSwap(TreePath* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreePath::InternalSwap(TreePath* other) {
  using std::swap;
  CastToBase(&nodes_visited_)->InternalSwap(CastToBase(&other->nodes_visited_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TreePath::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ffertile_5fstats_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorforest
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::FertileStats* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::FertileStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::FertileStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::GiniStats* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::GiniStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::GiniStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::LeafStat_GiniImpurityClassificationStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::LeafStat_LeastSquaresRegressionStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::LeafStat* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::LeafStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::LeafStat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::FertileSlot* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::FertileSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::FertileSlot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::SplitCandidate* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::SplitCandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::SplitCandidate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::TreePath* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::TreePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::tensorforest::TreePath >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
