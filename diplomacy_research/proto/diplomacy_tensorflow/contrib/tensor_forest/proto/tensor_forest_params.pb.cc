// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/tensor_forest/proto/tensor_forest_params.proto

#include "diplomacy_tensorflow/contrib/tensor_forest/proto/tensor_forest_params.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExponentialParam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LinearParam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ThresholdParam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SplitFinishConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SplitPruningConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DepthDependentParam;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto
namespace diplomacy {
namespace tensorflow {
namespace tensorforest {
class SplitPruningConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitPruningConfig>
      _instance;
} _SplitPruningConfig_default_instance_;
class SplitFinishConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplitFinishConfig>
      _instance;
} _SplitFinishConfig_default_instance_;
class LinearParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinearParam>
      _instance;
} _LinearParam_default_instance_;
class ExponentialParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExponentialParam>
      _instance;
} _ExponentialParam_default_instance_;
class ThresholdParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ThresholdParam>
      _instance;
} _ThresholdParam_default_instance_;
class DepthDependentParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DepthDependentParam>
      _instance;
  float constant_value_;
  const ::diplomacy::tensorflow::tensorforest::LinearParam* linear_;
  const ::diplomacy::tensorflow::tensorforest::ExponentialParam* exponential_;
  const ::diplomacy::tensorflow::tensorforest::ThresholdParam* threshold_;
} _DepthDependentParam_default_instance_;
class TensorForestParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TensorForestParams>
      _instance;
} _TensorForestParams_default_instance_;
}  // namespace tensorforest
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto {
static void InitDefaultsSplitPruningConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_SplitPruningConfig_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::SplitPruningConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::SplitPruningConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SplitPruningConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSplitPruningConfig}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_DepthDependentParam.base,}};

static void InitDefaultsSplitFinishConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_SplitFinishConfig_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::SplitFinishConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::SplitFinishConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SplitFinishConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSplitFinishConfig}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_DepthDependentParam.base,}};

static void InitDefaultsLinearParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_LinearParam_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::LinearParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::LinearParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LinearParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLinearParam}, {}};

static void InitDefaultsExponentialParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_ExponentialParam_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::ExponentialParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::ExponentialParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExponentialParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExponentialParam}, {}};

static void InitDefaultsThresholdParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_ThresholdParam_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::ThresholdParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::ThresholdParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ThresholdParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsThresholdParam}, {}};

static void InitDefaultsDepthDependentParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_DepthDependentParam_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::DepthDependentParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::DepthDependentParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DepthDependentParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDepthDependentParam}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_LinearParam.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_ExponentialParam.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_ThresholdParam.base,}};

static void InitDefaultsTensorForestParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_;
    new (ptr) ::diplomacy::tensorflow::tensorforest::TensorForestParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::tensorforest::TensorForestParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TensorForestParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTensorForestParams}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_SplitPruningConfig.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_SplitFinishConfig.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_DepthDependentParam.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SplitPruningConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplitFinishConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinearParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExponentialParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ThresholdParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DepthDependentParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TensorForestParams.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitPruningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitPruningConfig, prune_every_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitPruningConfig, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitFinishConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitFinishConfig, check_every_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::SplitFinishConfig, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LinearParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LinearParam, slope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LinearParam, y_intercept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LinearParam, min_val_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::LinearParam, max_val_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ExponentialParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ExponentialParam, bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ExponentialParam, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ExponentialParam, multiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ExponentialParam, depth_multiplier_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ThresholdParam, on_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ThresholdParam, off_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::ThresholdParam, threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::DepthDependentParam, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::DepthDependentParam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::diplomacy::tensorflow::tensorforest::DepthDependentParamDefaultTypeInternal, constant_value_),
  offsetof(::diplomacy::tensorflow::tensorforest::DepthDependentParamDefaultTypeInternal, linear_),
  offsetof(::diplomacy::tensorflow::tensorforest::DepthDependentParamDefaultTypeInternal, exponential_),
  offsetof(::diplomacy::tensorflow::tensorforest::DepthDependentParamDefaultTypeInternal, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::DepthDependentParam, ParamType_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, leaf_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, stats_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, collection_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, pruning_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, finish_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, num_trees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, max_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, num_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, inequality_test_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, is_regression_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, drop_final_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, collate_examples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, checkpoint_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, use_running_stats_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, initialize_average_splits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, inference_tree_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, num_outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, num_splits_to_consider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, split_after_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, dominate_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, min_split_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, graph_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, num_select_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::tensorforest::TensorForestParams, num_classes_to_track_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::tensorforest::SplitPruningConfig)},
  { 7, -1, sizeof(::diplomacy::tensorflow::tensorforest::SplitFinishConfig)},
  { 14, -1, sizeof(::diplomacy::tensorflow::tensorforest::LinearParam)},
  { 23, -1, sizeof(::diplomacy::tensorflow::tensorforest::ExponentialParam)},
  { 32, -1, sizeof(::diplomacy::tensorflow::tensorforest::ThresholdParam)},
  { 40, -1, sizeof(::diplomacy::tensorflow::tensorforest::DepthDependentParam)},
  { 50, -1, sizeof(::diplomacy::tensorflow::tensorforest::TensorForestParams)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_SplitPruningConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_SplitFinishConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_LinearParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_ExponentialParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_ThresholdParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_DepthDependentParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/contrib/tensor_forest/proto/tensor_forest_params.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nKdiplomacy_tensorflow/contrib/tensor_fo"
      "rest/proto/tensor_forest_params.proto\022!d"
      "iplomacy.tensorflow.tensorforest\032Jdiplom"
      "acy_tensorflow/contrib/decision_trees/pr"
      "oto/generic_tree_model.proto\"\264\001\n\022SplitPr"
      "uningConfig\022S\n\023prune_every_samples\030\001 \001(\013"
      "26.diplomacy.tensorflow.tensorforest.Dep"
      "thDependentParam\022I\n\004type\030\002 \001(\0162;.diploma"
      "cy.tensorflow.tensorforest.SplitPruningS"
      "trategyType\"\260\001\n\021SplitFinishConfig\022Q\n\021che"
      "ck_every_steps\030\001 \001(\01326.diplomacy.tensorf"
      "low.tensorforest.DepthDependentParam\022H\n\004"
      "type\030\002 \001(\0162:.diplomacy.tensorflow.tensor"
      "forest.SplitFinishStrategyType\"S\n\013Linear"
      "Param\022\r\n\005slope\030\001 \001(\002\022\023\n\013y_intercept\030\002 \001("
      "\002\022\017\n\007min_val\030\003 \001(\002\022\017\n\007max_val\030\004 \001(\002\"\\\n\020E"
      "xponentialParam\022\014\n\004bias\030\001 \001(\002\022\014\n\004base\030\002 "
      "\001(\002\022\022\n\nmultiplier\030\003 \001(\002\022\030\n\020depth_multipl"
      "ier\030\004 \001(\002\"H\n\016ThresholdParam\022\020\n\010on_value\030"
      "\001 \001(\002\022\021\n\toff_value\030\002 \001(\002\022\021\n\tthreshold\030\003 "
      "\001(\002\"\222\002\n\023DepthDependentParam\022\030\n\016constant_"
      "value\030\001 \001(\002H\000\022@\n\006linear\030\002 \001(\0132..diplomac"
      "y.tensorflow.tensorforest.LinearParamH\000\022"
      "J\n\013exponential\030\003 \001(\01323.diplomacy.tensorf"
      "low.tensorforest.ExponentialParamH\000\022F\n\tt"
      "hreshold\030\004 \001(\01321.diplomacy.tensorflow.te"
      "nsorforest.ThresholdParamH\000B\013\n\tParamType"
      "\"\233\t\n\022TensorForestParams\022C\n\tleaf_type\030\001 \001"
      "(\01620.diplomacy.tensorflow.tensorforest.L"
      "eafModelType\022E\n\nstats_type\030\002 \001(\01621.diplo"
      "macy.tensorflow.tensorforest.StatsModelT"
      "ype\022O\n\017collection_type\030\003 \001(\01626.diplomacy"
      ".tensorflow.tensorforest.SplitCollection"
      "Type\022K\n\014pruning_type\030\004 \001(\01325.diplomacy.t"
      "ensorflow.tensorforest.SplitPruningConfi"
      "g\022I\n\013finish_type\030\005 \001(\01324.diplomacy.tenso"
      "rflow.tensorforest.SplitFinishConfig\022\021\n\t"
      "num_trees\030\006 \001(\005\022\021\n\tmax_nodes\030\007 \001(\005\022\024\n\014nu"
      "m_features\030\025 \001(\005\022V\n\024inequality_test_type"
      "\030\023 \001(\01628.diplomacy.tensorflow.decision_t"
      "rees.InequalityTest.Type\022\025\n\ris_regressio"
      "n\030\010 \001(\010\022\030\n\020drop_final_class\030\t \001(\010\022\030\n\020col"
      "late_examples\030\n \001(\010\022\030\n\020checkpoint_stats\030"
      "\013 \001(\010\022 \n\030use_running_stats_method\030\024 \001(\010\022"
      "!\n\031initialize_average_splits\030\026 \001(\010\022\034\n\024in"
      "ference_tree_paths\030\027 \001(\010\022\023\n\013num_outputs\030"
      "\014 \001(\005\022V\n\026num_splits_to_consider\030\r \001(\01326."
      "diplomacy.tensorflow.tensorforest.DepthD"
      "ependentParam\022S\n\023split_after_samples\030\016 \001"
      "(\01326.diplomacy.tensorflow.tensorforest.D"
      "epthDependentParam\022Q\n\021dominate_fraction\030"
      "\017 \001(\01326.diplomacy.tensorflow.tensorfores"
      "t.DepthDependentParam\022Q\n\021min_split_sampl"
      "es\030\022 \001(\01326.diplomacy.tensorflow.tensorfo"
      "rest.DepthDependentParam\022\021\n\tgraph_dir\030\020 "
      "\001(\t\022\033\n\023num_select_features\030\021 \001(\005\022\034\n\024num_"
      "classes_to_track\030\030 \001(\005*\220\001\n\rLeafModelType"
      "\022\036\n\032MODEL_DENSE_CLASSIFICATION\020\000\022\037\n\033MODE"
      "L_SPARSE_CLASSIFICATION\020\001\022\024\n\020MODEL_REGRE"
      "SSION\020\002\022(\n$MODEL_SPARSE_OR_DENSE_CLASSIF"
      "ICATION\020\003*\245\001\n\016StatsModelType\022\024\n\020STATS_DE"
      "NSE_GINI\020\000\022\025\n\021STATS_SPARSE_GINI\020\001\022\"\n\036STA"
      "TS_LEAST_SQUARES_REGRESSION\020\002\022 \n\034STATS_S"
      "PARSE_THEN_DENSE_GINI\020\003\022 \n\034STATS_FIXED_S"
      "IZE_SPARSE_GINI\020\004*H\n\023SplitCollectionType"
      "\022\024\n\020COLLECTION_BASIC\020\000\022\033\n\027GRAPH_RUNNER_C"
      "OLLECTION\020\001*\226\001\n\030SplitPruningStrategyType"
      "\022\024\n\020SPLIT_PRUNE_NONE\020\000\022\024\n\020SPLIT_PRUNE_HA"
      "LF\020\001\022\027\n\023SPLIT_PRUNE_QUARTER\020\002\022\032\n\026SPLIT_P"
      "RUNE_10_PERCENT\020\003\022\031\n\025SPLIT_PRUNE_HOEFFDI"
      "NG\020\004*{\n\027SplitFinishStrategyType\022\026\n\022SPLIT"
      "_FINISH_BASIC\020\000\022#\n\037SPLIT_FINISH_DOMINATE"
      "_HOEFFDING\020\002\022#\n\037SPLIT_FINISH_DOMINATE_BO"
      "OTSTRAP\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2937);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/contrib/tensor_forest/proto/tensor_forest_params.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto
namespace diplomacy {
namespace tensorflow {
namespace tensorforest {
const ::google::protobuf::EnumDescriptor* LeafModelType_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_enum_descriptors[0];
}
bool LeafModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatsModelType_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_enum_descriptors[1];
}
bool StatsModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SplitCollectionType_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_enum_descriptors[2];
}
bool SplitCollectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SplitPruningStrategyType_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_enum_descriptors[3];
}
bool SplitPruningStrategyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SplitFinishStrategyType_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_enum_descriptors[4];
}
bool SplitFinishStrategyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SplitPruningConfig::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_SplitPruningConfig_default_instance_._instance.get_mutable()->prune_every_samples_ = const_cast< ::diplomacy::tensorflow::tensorforest::DepthDependentParam*>(
      ::diplomacy::tensorflow::tensorforest::DepthDependentParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitPruningConfig::kPruneEverySamplesFieldNumber;
const int SplitPruningConfig::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitPruningConfig::SplitPruningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_SplitPruningConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
}
SplitPruningConfig::SplitPruningConfig(const SplitPruningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prune_every_samples()) {
    prune_every_samples_ = new ::diplomacy::tensorflow::tensorforest::DepthDependentParam(*from.prune_every_samples_);
  } else {
    prune_every_samples_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
}

void SplitPruningConfig::SharedCtor() {
  ::memset(&prune_every_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&prune_every_samples_)) + sizeof(type_));
}

SplitPruningConfig::~SplitPruningConfig() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  SharedDtor();
}

void SplitPruningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete prune_every_samples_;
}

void SplitPruningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SplitPruningConfig::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitPruningConfig& SplitPruningConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_SplitPruningConfig.base);
  return *internal_default_instance();
}


void SplitPruningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && prune_every_samples_ != NULL) {
    delete prune_every_samples_;
  }
  prune_every_samples_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SplitPruningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.tensorforest.DepthDependentParam prune_every_samples = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prune_every_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.SplitPruningStrategyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::diplomacy::tensorflow::tensorforest::SplitPruningStrategyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  return false;
#undef DO_
}

void SplitPruningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam prune_every_samples = 1;
  if (this->has_prune_every_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_prune_every_samples(), output);
  }

  // .diplomacy.tensorflow.tensorforest.SplitPruningStrategyType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
}

::google::protobuf::uint8* SplitPruningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam prune_every_samples = 1;
  if (this->has_prune_every_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_prune_every_samples(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.SplitPruningStrategyType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  return target;
}

size_t SplitPruningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .diplomacy.tensorflow.tensorforest.DepthDependentParam prune_every_samples = 1;
  if (this->has_prune_every_samples()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prune_every_samples_);
  }

  // .diplomacy.tensorflow.tensorforest.SplitPruningStrategyType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitPruningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitPruningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitPruningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
    MergeFrom(*source);
  }
}

void SplitPruningConfig::MergeFrom(const SplitPruningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prune_every_samples()) {
    mutable_prune_every_samples()->::diplomacy::tensorflow::tensorforest::DepthDependentParam::MergeFrom(from.prune_every_samples());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SplitPruningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitPruningConfig::CopyFrom(const SplitPruningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.SplitPruningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitPruningConfig::IsInitialized() const {
  return true;
}

void SplitPruningConfig::Swap(SplitPruningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitPruningConfig::InternalSwap(SplitPruningConfig* other) {
  using std::swap;
  swap(prune_every_samples_, other->prune_every_samples_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SplitPruningConfig::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SplitFinishConfig::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_SplitFinishConfig_default_instance_._instance.get_mutable()->check_every_steps_ = const_cast< ::diplomacy::tensorflow::tensorforest::DepthDependentParam*>(
      ::diplomacy::tensorflow::tensorforest::DepthDependentParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitFinishConfig::kCheckEveryStepsFieldNumber;
const int SplitFinishConfig::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitFinishConfig::SplitFinishConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_SplitFinishConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
}
SplitFinishConfig::SplitFinishConfig(const SplitFinishConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_check_every_steps()) {
    check_every_steps_ = new ::diplomacy::tensorflow::tensorforest::DepthDependentParam(*from.check_every_steps_);
  } else {
    check_every_steps_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
}

void SplitFinishConfig::SharedCtor() {
  ::memset(&check_every_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&check_every_steps_)) + sizeof(type_));
}

SplitFinishConfig::~SplitFinishConfig() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  SharedDtor();
}

void SplitFinishConfig::SharedDtor() {
  if (this != internal_default_instance()) delete check_every_steps_;
}

void SplitFinishConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SplitFinishConfig::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplitFinishConfig& SplitFinishConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_SplitFinishConfig.base);
  return *internal_default_instance();
}


void SplitFinishConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && check_every_steps_ != NULL) {
    delete check_every_steps_;
  }
  check_every_steps_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SplitFinishConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.tensorforest.DepthDependentParam check_every_steps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_every_steps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.SplitFinishStrategyType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::diplomacy::tensorflow::tensorforest::SplitFinishStrategyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  return false;
#undef DO_
}

void SplitFinishConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam check_every_steps = 1;
  if (this->has_check_every_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_check_every_steps(), output);
  }

  // .diplomacy.tensorflow.tensorforest.SplitFinishStrategyType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
}

::google::protobuf::uint8* SplitFinishConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam check_every_steps = 1;
  if (this->has_check_every_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_check_every_steps(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.SplitFinishStrategyType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  return target;
}

size_t SplitFinishConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .diplomacy.tensorflow.tensorforest.DepthDependentParam check_every_steps = 1;
  if (this->has_check_every_steps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *check_every_steps_);
  }

  // .diplomacy.tensorflow.tensorforest.SplitFinishStrategyType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplitFinishConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SplitFinishConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitFinishConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
    MergeFrom(*source);
  }
}

void SplitFinishConfig::MergeFrom(const SplitFinishConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_check_every_steps()) {
    mutable_check_every_steps()->::diplomacy::tensorflow::tensorforest::DepthDependentParam::MergeFrom(from.check_every_steps());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SplitFinishConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitFinishConfig::CopyFrom(const SplitFinishConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.SplitFinishConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitFinishConfig::IsInitialized() const {
  return true;
}

void SplitFinishConfig::Swap(SplitFinishConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitFinishConfig::InternalSwap(SplitFinishConfig* other) {
  using std::swap;
  swap(check_every_steps_, other->check_every_steps_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SplitFinishConfig::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LinearParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinearParam::kSlopeFieldNumber;
const int LinearParam::kYInterceptFieldNumber;
const int LinearParam::kMinValFieldNumber;
const int LinearParam::kMaxValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinearParam::LinearParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_LinearParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.LinearParam)
}
LinearParam::LinearParam(const LinearParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slope_, &from.slope_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_val_) -
    reinterpret_cast<char*>(&slope_)) + sizeof(max_val_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.LinearParam)
}

void LinearParam::SharedCtor() {
  ::memset(&slope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_val_) -
      reinterpret_cast<char*>(&slope_)) + sizeof(max_val_));
}

LinearParam::~LinearParam() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.LinearParam)
  SharedDtor();
}

void LinearParam::SharedDtor() {
}

void LinearParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LinearParam::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinearParam& LinearParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_LinearParam.base);
  return *internal_default_instance();
}


void LinearParam::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.LinearParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&slope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_val_) -
      reinterpret_cast<char*>(&slope_)) + sizeof(max_val_));
  _internal_metadata_.Clear();
}

bool LinearParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.LinearParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float slope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_intercept = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_intercept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_val = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.LinearParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.LinearParam)
  return false;
#undef DO_
}

void LinearParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.LinearParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float slope = 1;
  if (this->slope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->slope(), output);
  }

  // float y_intercept = 2;
  if (this->y_intercept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_intercept(), output);
  }

  // float min_val = 3;
  if (this->min_val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_val(), output);
  }

  // float max_val = 4;
  if (this->max_val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_val(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.LinearParam)
}

::google::protobuf::uint8* LinearParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.LinearParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float slope = 1;
  if (this->slope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->slope(), target);
  }

  // float y_intercept = 2;
  if (this->y_intercept() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_intercept(), target);
  }

  // float min_val = 3;
  if (this->min_val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_val(), target);
  }

  // float max_val = 4;
  if (this->max_val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_val(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.LinearParam)
  return target;
}

size_t LinearParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.LinearParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float slope = 1;
  if (this->slope() != 0) {
    total_size += 1 + 4;
  }

  // float y_intercept = 2;
  if (this->y_intercept() != 0) {
    total_size += 1 + 4;
  }

  // float min_val = 3;
  if (this->min_val() != 0) {
    total_size += 1 + 4;
  }

  // float max_val = 4;
  if (this->max_val() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.LinearParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinearParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.LinearParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.LinearParam)
    MergeFrom(*source);
  }
}

void LinearParam::MergeFrom(const LinearParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.LinearParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slope() != 0) {
    set_slope(from.slope());
  }
  if (from.y_intercept() != 0) {
    set_y_intercept(from.y_intercept());
  }
  if (from.min_val() != 0) {
    set_min_val(from.min_val());
  }
  if (from.max_val() != 0) {
    set_max_val(from.max_val());
  }
}

void LinearParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.LinearParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearParam::CopyFrom(const LinearParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.LinearParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearParam::IsInitialized() const {
  return true;
}

void LinearParam::Swap(LinearParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinearParam::InternalSwap(LinearParam* other) {
  using std::swap;
  swap(slope_, other->slope_);
  swap(y_intercept_, other->y_intercept_);
  swap(min_val_, other->min_val_);
  swap(max_val_, other->max_val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LinearParam::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExponentialParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExponentialParam::kBiasFieldNumber;
const int ExponentialParam::kBaseFieldNumber;
const int ExponentialParam::kMultiplierFieldNumber;
const int ExponentialParam::kDepthMultiplierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExponentialParam::ExponentialParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_ExponentialParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.ExponentialParam)
}
ExponentialParam::ExponentialParam(const ExponentialParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bias_, &from.bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&depth_multiplier_) -
    reinterpret_cast<char*>(&bias_)) + sizeof(depth_multiplier_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.ExponentialParam)
}

void ExponentialParam::SharedCtor() {
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_multiplier_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(depth_multiplier_));
}

ExponentialParam::~ExponentialParam() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.ExponentialParam)
  SharedDtor();
}

void ExponentialParam::SharedDtor() {
}

void ExponentialParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExponentialParam::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExponentialParam& ExponentialParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_ExponentialParam.base);
  return *internal_default_instance();
}


void ExponentialParam::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_multiplier_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(depth_multiplier_));
  _internal_metadata_.Clear();
}

bool ExponentialParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float bias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float base = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float multiplier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float depth_multiplier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.ExponentialParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.ExponentialParam)
  return false;
#undef DO_
}

void ExponentialParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float bias = 1;
  if (this->bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bias(), output);
  }

  // float base = 2;
  if (this->base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->base(), output);
  }

  // float multiplier = 3;
  if (this->multiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->multiplier(), output);
  }

  // float depth_multiplier = 4;
  if (this->depth_multiplier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->depth_multiplier(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.ExponentialParam)
}

::google::protobuf::uint8* ExponentialParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float bias = 1;
  if (this->bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bias(), target);
  }

  // float base = 2;
  if (this->base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->base(), target);
  }

  // float multiplier = 3;
  if (this->multiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->multiplier(), target);
  }

  // float depth_multiplier = 4;
  if (this->depth_multiplier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->depth_multiplier(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.ExponentialParam)
  return target;
}

size_t ExponentialParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float bias = 1;
  if (this->bias() != 0) {
    total_size += 1 + 4;
  }

  // float base = 2;
  if (this->base() != 0) {
    total_size += 1 + 4;
  }

  // float multiplier = 3;
  if (this->multiplier() != 0) {
    total_size += 1 + 4;
  }

  // float depth_multiplier = 4;
  if (this->depth_multiplier() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExponentialParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ExponentialParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExponentialParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.ExponentialParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.ExponentialParam)
    MergeFrom(*source);
  }
}

void ExponentialParam::MergeFrom(const ExponentialParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bias() != 0) {
    set_bias(from.bias());
  }
  if (from.base() != 0) {
    set_base(from.base());
  }
  if (from.multiplier() != 0) {
    set_multiplier(from.multiplier());
  }
  if (from.depth_multiplier() != 0) {
    set_depth_multiplier(from.depth_multiplier());
  }
}

void ExponentialParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExponentialParam::CopyFrom(const ExponentialParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.ExponentialParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExponentialParam::IsInitialized() const {
  return true;
}

void ExponentialParam::Swap(ExponentialParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExponentialParam::InternalSwap(ExponentialParam* other) {
  using std::swap;
  swap(bias_, other->bias_);
  swap(base_, other->base_);
  swap(multiplier_, other->multiplier_);
  swap(depth_multiplier_, other->depth_multiplier_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExponentialParam::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ThresholdParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThresholdParam::kOnValueFieldNumber;
const int ThresholdParam::kOffValueFieldNumber;
const int ThresholdParam::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThresholdParam::ThresholdParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_ThresholdParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.ThresholdParam)
}
ThresholdParam::ThresholdParam(const ThresholdParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&on_value_, &from.on_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&on_value_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.ThresholdParam)
}

void ThresholdParam::SharedCtor() {
  ::memset(&on_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&on_value_)) + sizeof(threshold_));
}

ThresholdParam::~ThresholdParam() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.ThresholdParam)
  SharedDtor();
}

void ThresholdParam::SharedDtor() {
}

void ThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ThresholdParam::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ThresholdParam& ThresholdParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_ThresholdParam.base);
  return *internal_default_instance();
}


void ThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&on_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&on_value_)) + sizeof(threshold_));
  _internal_metadata_.Clear();
}

bool ThresholdParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float on_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &on_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float off_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &off_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.ThresholdParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.ThresholdParam)
  return false;
#undef DO_
}

void ThresholdParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float on_value = 1;
  if (this->on_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->on_value(), output);
  }

  // float off_value = 2;
  if (this->off_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->off_value(), output);
  }

  // float threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->threshold(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.ThresholdParam)
}

::google::protobuf::uint8* ThresholdParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float on_value = 1;
  if (this->on_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->on_value(), target);
  }

  // float off_value = 2;
  if (this->off_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->off_value(), target);
  }

  // float threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->threshold(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.ThresholdParam)
  return target;
}

size_t ThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float on_value = 1;
  if (this->on_value() != 0) {
    total_size += 1 + 4;
  }

  // float off_value = 2;
  if (this->off_value() != 0) {
    total_size += 1 + 4;
  }

  // float threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThresholdParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ThresholdParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.ThresholdParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.ThresholdParam)
    MergeFrom(*source);
  }
}

void ThresholdParam::MergeFrom(const ThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on_value() != 0) {
    set_on_value(from.on_value());
  }
  if (from.off_value() != 0) {
    set_off_value(from.off_value());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
}

void ThresholdParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdParam::CopyFrom(const ThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.ThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParam::IsInitialized() const {
  return true;
}

void ThresholdParam::Swap(ThresholdParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ThresholdParam::InternalSwap(ThresholdParam* other) {
  using std::swap;
  swap(on_value_, other->on_value_);
  swap(off_value_, other->off_value_);
  swap(threshold_, other->threshold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ThresholdParam::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DepthDependentParam::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_DepthDependentParam_default_instance_.constant_value_ = 0;
  ::diplomacy::tensorflow::tensorforest::_DepthDependentParam_default_instance_.linear_ = const_cast< ::diplomacy::tensorflow::tensorforest::LinearParam*>(
      ::diplomacy::tensorflow::tensorforest::LinearParam::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_DepthDependentParam_default_instance_.exponential_ = const_cast< ::diplomacy::tensorflow::tensorforest::ExponentialParam*>(
      ::diplomacy::tensorflow::tensorforest::ExponentialParam::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_DepthDependentParam_default_instance_.threshold_ = const_cast< ::diplomacy::tensorflow::tensorforest::ThresholdParam*>(
      ::diplomacy::tensorflow::tensorforest::ThresholdParam::internal_default_instance());
}
void DepthDependentParam::set_allocated_linear(::diplomacy::tensorflow::tensorforest::LinearParam* linear) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ParamType();
  if (linear) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    ParamType_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.tensorforest.DepthDependentParam.linear)
}
void DepthDependentParam::set_allocated_exponential(::diplomacy::tensorflow::tensorforest::ExponentialParam* exponential) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ParamType();
  if (exponential) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exponential = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exponential, submessage_arena);
    }
    set_has_exponential();
    ParamType_.exponential_ = exponential;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.tensorforest.DepthDependentParam.exponential)
}
void DepthDependentParam::set_allocated_threshold(::diplomacy::tensorflow::tensorforest::ThresholdParam* threshold) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ParamType();
  if (threshold) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      threshold = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threshold, submessage_arena);
    }
    set_has_threshold();
    ParamType_.threshold_ = threshold;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.tensorforest.DepthDependentParam.threshold)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthDependentParam::kConstantValueFieldNumber;
const int DepthDependentParam::kLinearFieldNumber;
const int DepthDependentParam::kExponentialFieldNumber;
const int DepthDependentParam::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthDependentParam::DepthDependentParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_DepthDependentParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.DepthDependentParam)
}
DepthDependentParam::DepthDependentParam(const DepthDependentParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ParamType();
  switch (from.ParamType_case()) {
    case kConstantValue: {
      set_constant_value(from.constant_value());
      break;
    }
    case kLinear: {
      mutable_linear()->::diplomacy::tensorflow::tensorforest::LinearParam::MergeFrom(from.linear());
      break;
    }
    case kExponential: {
      mutable_exponential()->::diplomacy::tensorflow::tensorforest::ExponentialParam::MergeFrom(from.exponential());
      break;
    }
    case kThreshold: {
      mutable_threshold()->::diplomacy::tensorflow::tensorforest::ThresholdParam::MergeFrom(from.threshold());
      break;
    }
    case PARAMTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.DepthDependentParam)
}

void DepthDependentParam::SharedCtor() {
  clear_has_ParamType();
}

DepthDependentParam::~DepthDependentParam() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  SharedDtor();
}

void DepthDependentParam::SharedDtor() {
  if (has_ParamType()) {
    clear_ParamType();
  }
}

void DepthDependentParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DepthDependentParam::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DepthDependentParam& DepthDependentParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_DepthDependentParam.base);
  return *internal_default_instance();
}


void DepthDependentParam::clear_ParamType() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  switch (ParamType_case()) {
    case kConstantValue: {
      // No need to clear
      break;
    }
    case kLinear: {
      delete ParamType_.linear_;
      break;
    }
    case kExponential: {
      delete ParamType_.exponential_;
      break;
    }
    case kThreshold: {
      delete ParamType_.threshold_;
      break;
    }
    case PARAMTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMTYPE_NOT_SET;
}


void DepthDependentParam::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ParamType();
  _internal_metadata_.Clear();
}

bool DepthDependentParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float constant_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          clear_ParamType();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ParamType_.constant_value_)));
          set_has_constant_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.LinearParam linear = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.ExponentialParam exponential = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exponential()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.ThresholdParam threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  return false;
#undef DO_
}

void DepthDependentParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float constant_value = 1;
  if (has_constant_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->constant_value(), output);
  }

  // .diplomacy.tensorflow.tensorforest.LinearParam linear = 2;
  if (has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_linear(), output);
  }

  // .diplomacy.tensorflow.tensorforest.ExponentialParam exponential = 3;
  if (has_exponential()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_exponential(), output);
  }

  // .diplomacy.tensorflow.tensorforest.ThresholdParam threshold = 4;
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_threshold(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.DepthDependentParam)
}

::google::protobuf::uint8* DepthDependentParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float constant_value = 1;
  if (has_constant_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->constant_value(), target);
  }

  // .diplomacy.tensorflow.tensorforest.LinearParam linear = 2;
  if (has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_linear(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.ExponentialParam exponential = 3;
  if (has_exponential()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_exponential(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.ThresholdParam threshold = 4;
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_threshold(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  return target;
}

size_t DepthDependentParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (ParamType_case()) {
    // float constant_value = 1;
    case kConstantValue: {
      total_size += 1 + 4;
      break;
    }
    // .diplomacy.tensorflow.tensorforest.LinearParam linear = 2;
    case kLinear: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ParamType_.linear_);
      break;
    }
    // .diplomacy.tensorflow.tensorforest.ExponentialParam exponential = 3;
    case kExponential: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ParamType_.exponential_);
      break;
    }
    // .diplomacy.tensorflow.tensorforest.ThresholdParam threshold = 4;
    case kThreshold: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ParamType_.threshold_);
      break;
    }
    case PARAMTYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthDependentParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthDependentParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DepthDependentParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.DepthDependentParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.DepthDependentParam)
    MergeFrom(*source);
  }
}

void DepthDependentParam::MergeFrom(const DepthDependentParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ParamType_case()) {
    case kConstantValue: {
      set_constant_value(from.constant_value());
      break;
    }
    case kLinear: {
      mutable_linear()->::diplomacy::tensorflow::tensorforest::LinearParam::MergeFrom(from.linear());
      break;
    }
    case kExponential: {
      mutable_exponential()->::diplomacy::tensorflow::tensorforest::ExponentialParam::MergeFrom(from.exponential());
      break;
    }
    case kThreshold: {
      mutable_threshold()->::diplomacy::tensorflow::tensorforest::ThresholdParam::MergeFrom(from.threshold());
      break;
    }
    case PARAMTYPE_NOT_SET: {
      break;
    }
  }
}

void DepthDependentParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthDependentParam::CopyFrom(const DepthDependentParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.DepthDependentParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthDependentParam::IsInitialized() const {
  return true;
}

void DepthDependentParam::Swap(DepthDependentParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthDependentParam::InternalSwap(DepthDependentParam* other) {
  using std::swap;
  swap(ParamType_, other->ParamType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DepthDependentParam::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TensorForestParams::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_._instance.get_mutable()->pruning_type_ = const_cast< ::diplomacy::tensorflow::tensorforest::SplitPruningConfig*>(
      ::diplomacy::tensorflow::tensorforest::SplitPruningConfig::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_._instance.get_mutable()->finish_type_ = const_cast< ::diplomacy::tensorflow::tensorforest::SplitFinishConfig*>(
      ::diplomacy::tensorflow::tensorforest::SplitFinishConfig::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_._instance.get_mutable()->num_splits_to_consider_ = const_cast< ::diplomacy::tensorflow::tensorforest::DepthDependentParam*>(
      ::diplomacy::tensorflow::tensorforest::DepthDependentParam::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_._instance.get_mutable()->split_after_samples_ = const_cast< ::diplomacy::tensorflow::tensorforest::DepthDependentParam*>(
      ::diplomacy::tensorflow::tensorforest::DepthDependentParam::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_._instance.get_mutable()->dominate_fraction_ = const_cast< ::diplomacy::tensorflow::tensorforest::DepthDependentParam*>(
      ::diplomacy::tensorflow::tensorforest::DepthDependentParam::internal_default_instance());
  ::diplomacy::tensorflow::tensorforest::_TensorForestParams_default_instance_._instance.get_mutable()->min_split_samples_ = const_cast< ::diplomacy::tensorflow::tensorforest::DepthDependentParam*>(
      ::diplomacy::tensorflow::tensorforest::DepthDependentParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorForestParams::kLeafTypeFieldNumber;
const int TensorForestParams::kStatsTypeFieldNumber;
const int TensorForestParams::kCollectionTypeFieldNumber;
const int TensorForestParams::kPruningTypeFieldNumber;
const int TensorForestParams::kFinishTypeFieldNumber;
const int TensorForestParams::kNumTreesFieldNumber;
const int TensorForestParams::kMaxNodesFieldNumber;
const int TensorForestParams::kNumFeaturesFieldNumber;
const int TensorForestParams::kInequalityTestTypeFieldNumber;
const int TensorForestParams::kIsRegressionFieldNumber;
const int TensorForestParams::kDropFinalClassFieldNumber;
const int TensorForestParams::kCollateExamplesFieldNumber;
const int TensorForestParams::kCheckpointStatsFieldNumber;
const int TensorForestParams::kUseRunningStatsMethodFieldNumber;
const int TensorForestParams::kInitializeAverageSplitsFieldNumber;
const int TensorForestParams::kInferenceTreePathsFieldNumber;
const int TensorForestParams::kNumOutputsFieldNumber;
const int TensorForestParams::kNumSplitsToConsiderFieldNumber;
const int TensorForestParams::kSplitAfterSamplesFieldNumber;
const int TensorForestParams::kDominateFractionFieldNumber;
const int TensorForestParams::kMinSplitSamplesFieldNumber;
const int TensorForestParams::kGraphDirFieldNumber;
const int TensorForestParams::kNumSelectFeaturesFieldNumber;
const int TensorForestParams::kNumClassesToTrackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorForestParams::TensorForestParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_TensorForestParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.tensorforest.TensorForestParams)
}
TensorForestParams::TensorForestParams(const TensorForestParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graph_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.graph_dir().size() > 0) {
    graph_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_dir_);
  }
  if (from.has_pruning_type()) {
    pruning_type_ = new ::diplomacy::tensorflow::tensorforest::SplitPruningConfig(*from.pruning_type_);
  } else {
    pruning_type_ = NULL;
  }
  if (from.has_finish_type()) {
    finish_type_ = new ::diplomacy::tensorflow::tensorforest::SplitFinishConfig(*from.finish_type_);
  } else {
    finish_type_ = NULL;
  }
  if (from.has_num_splits_to_consider()) {
    num_splits_to_consider_ = new ::diplomacy::tensorflow::tensorforest::DepthDependentParam(*from.num_splits_to_consider_);
  } else {
    num_splits_to_consider_ = NULL;
  }
  if (from.has_split_after_samples()) {
    split_after_samples_ = new ::diplomacy::tensorflow::tensorforest::DepthDependentParam(*from.split_after_samples_);
  } else {
    split_after_samples_ = NULL;
  }
  if (from.has_dominate_fraction()) {
    dominate_fraction_ = new ::diplomacy::tensorflow::tensorforest::DepthDependentParam(*from.dominate_fraction_);
  } else {
    dominate_fraction_ = NULL;
  }
  if (from.has_min_split_samples()) {
    min_split_samples_ = new ::diplomacy::tensorflow::tensorforest::DepthDependentParam(*from.min_split_samples_);
  } else {
    min_split_samples_ = NULL;
  }
  ::memcpy(&leaf_type_, &from.leaf_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_classes_to_track_) -
    reinterpret_cast<char*>(&leaf_type_)) + sizeof(num_classes_to_track_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.tensorforest.TensorForestParams)
}

void TensorForestParams::SharedCtor() {
  graph_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pruning_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_classes_to_track_) -
      reinterpret_cast<char*>(&pruning_type_)) + sizeof(num_classes_to_track_));
}

TensorForestParams::~TensorForestParams() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.tensorforest.TensorForestParams)
  SharedDtor();
}

void TensorForestParams::SharedDtor() {
  graph_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pruning_type_;
  if (this != internal_default_instance()) delete finish_type_;
  if (this != internal_default_instance()) delete num_splits_to_consider_;
  if (this != internal_default_instance()) delete split_after_samples_;
  if (this != internal_default_instance()) delete dominate_fraction_;
  if (this != internal_default_instance()) delete min_split_samples_;
}

void TensorForestParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TensorForestParams::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TensorForestParams& TensorForestParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::scc_info_TensorForestParams.base);
  return *internal_default_instance();
}


void TensorForestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pruning_type_ != NULL) {
    delete pruning_type_;
  }
  pruning_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && finish_type_ != NULL) {
    delete finish_type_;
  }
  finish_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && num_splits_to_consider_ != NULL) {
    delete num_splits_to_consider_;
  }
  num_splits_to_consider_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_after_samples_ != NULL) {
    delete split_after_samples_;
  }
  split_after_samples_ = NULL;
  if (GetArenaNoVirtual() == NULL && dominate_fraction_ != NULL) {
    delete dominate_fraction_;
  }
  dominate_fraction_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_split_samples_ != NULL) {
    delete min_split_samples_;
  }
  min_split_samples_ = NULL;
  ::memset(&leaf_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_classes_to_track_) -
      reinterpret_cast<char*>(&leaf_type_)) + sizeof(num_classes_to_track_));
  _internal_metadata_.Clear();
}

bool TensorForestParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.tensorforest.LeafModelType leaf_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_leaf_type(static_cast< ::diplomacy::tensorflow::tensorforest::LeafModelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.StatsModelType stats_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stats_type(static_cast< ::diplomacy::tensorflow::tensorforest::StatsModelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.SplitCollectionType collection_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_collection_type(static_cast< ::diplomacy::tensorflow::tensorforest::SplitCollectionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.SplitPruningConfig pruning_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pruning_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.SplitFinishConfig finish_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_finish_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_trees = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_trees_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_nodes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_regression = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_regression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool drop_final_class = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_final_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool collate_examples = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool checkpoint_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkpoint_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_outputs = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_outputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.DepthDependentParam num_splits_to_consider = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_num_splits_to_consider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.DepthDependentParam split_after_samples = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_split_after_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.DepthDependentParam dominate_fraction = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dominate_fraction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string graph_dir = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_graph_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->graph_dir().data(), static_cast<int>(this->graph_dir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.tensorforest.TensorForestParams.graph_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_select_features = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_select_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.tensorforest.DepthDependentParam min_split_samples = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_split_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.InequalityTest.Type inequality_test_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_inequality_test_type(static_cast< ::diplomacy::tensorflow::decision_trees::InequalityTest_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_running_stats_method = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_running_stats_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_features = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool initialize_average_splits = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialize_average_splits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inference_tree_paths = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inference_tree_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_classes_to_track = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_to_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.tensorforest.TensorForestParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.tensorforest.TensorForestParams)
  return false;
#undef DO_
}

void TensorForestParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.LeafModelType leaf_type = 1;
  if (this->leaf_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->leaf_type(), output);
  }

  // .diplomacy.tensorflow.tensorforest.StatsModelType stats_type = 2;
  if (this->stats_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stats_type(), output);
  }

  // .diplomacy.tensorflow.tensorforest.SplitCollectionType collection_type = 3;
  if (this->collection_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->collection_type(), output);
  }

  // .diplomacy.tensorflow.tensorforest.SplitPruningConfig pruning_type = 4;
  if (this->has_pruning_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pruning_type(), output);
  }

  // .diplomacy.tensorflow.tensorforest.SplitFinishConfig finish_type = 5;
  if (this->has_finish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_finish_type(), output);
  }

  // int32 num_trees = 6;
  if (this->num_trees() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_trees(), output);
  }

  // int32 max_nodes = 7;
  if (this->max_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_nodes(), output);
  }

  // bool is_regression = 8;
  if (this->is_regression() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_regression(), output);
  }

  // bool drop_final_class = 9;
  if (this->drop_final_class() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->drop_final_class(), output);
  }

  // bool collate_examples = 10;
  if (this->collate_examples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->collate_examples(), output);
  }

  // bool checkpoint_stats = 11;
  if (this->checkpoint_stats() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->checkpoint_stats(), output);
  }

  // int32 num_outputs = 12;
  if (this->num_outputs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->num_outputs(), output);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam num_splits_to_consider = 13;
  if (this->has_num_splits_to_consider()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_num_splits_to_consider(), output);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam split_after_samples = 14;
  if (this->has_split_after_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_split_after_samples(), output);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam dominate_fraction = 15;
  if (this->has_dominate_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_dominate_fraction(), output);
  }

  // string graph_dir = 16;
  if (this->graph_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_dir().data(), static_cast<int>(this->graph_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.tensorforest.TensorForestParams.graph_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->graph_dir(), output);
  }

  // int32 num_select_features = 17;
  if (this->num_select_features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->num_select_features(), output);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam min_split_samples = 18;
  if (this->has_min_split_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_min_split_samples(), output);
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest.Type inequality_test_type = 19;
  if (this->inequality_test_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->inequality_test_type(), output);
  }

  // bool use_running_stats_method = 20;
  if (this->use_running_stats_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->use_running_stats_method(), output);
  }

  // int32 num_features = 21;
  if (this->num_features() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->num_features(), output);
  }

  // bool initialize_average_splits = 22;
  if (this->initialize_average_splits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->initialize_average_splits(), output);
  }

  // bool inference_tree_paths = 23;
  if (this->inference_tree_paths() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->inference_tree_paths(), output);
  }

  // int32 num_classes_to_track = 24;
  if (this->num_classes_to_track() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->num_classes_to_track(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.tensorforest.TensorForestParams)
}

::google::protobuf::uint8* TensorForestParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.tensorforest.LeafModelType leaf_type = 1;
  if (this->leaf_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->leaf_type(), target);
  }

  // .diplomacy.tensorflow.tensorforest.StatsModelType stats_type = 2;
  if (this->stats_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stats_type(), target);
  }

  // .diplomacy.tensorflow.tensorforest.SplitCollectionType collection_type = 3;
  if (this->collection_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->collection_type(), target);
  }

  // .diplomacy.tensorflow.tensorforest.SplitPruningConfig pruning_type = 4;
  if (this->has_pruning_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pruning_type(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.SplitFinishConfig finish_type = 5;
  if (this->has_finish_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_finish_type(), deterministic, target);
  }

  // int32 num_trees = 6;
  if (this->num_trees() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_trees(), target);
  }

  // int32 max_nodes = 7;
  if (this->max_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_nodes(), target);
  }

  // bool is_regression = 8;
  if (this->is_regression() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_regression(), target);
  }

  // bool drop_final_class = 9;
  if (this->drop_final_class() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->drop_final_class(), target);
  }

  // bool collate_examples = 10;
  if (this->collate_examples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->collate_examples(), target);
  }

  // bool checkpoint_stats = 11;
  if (this->checkpoint_stats() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->checkpoint_stats(), target);
  }

  // int32 num_outputs = 12;
  if (this->num_outputs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->num_outputs(), target);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam num_splits_to_consider = 13;
  if (this->has_num_splits_to_consider()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_num_splits_to_consider(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam split_after_samples = 14;
  if (this->has_split_after_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_split_after_samples(), deterministic, target);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam dominate_fraction = 15;
  if (this->has_dominate_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_dominate_fraction(), deterministic, target);
  }

  // string graph_dir = 16;
  if (this->graph_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->graph_dir().data(), static_cast<int>(this->graph_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.tensorforest.TensorForestParams.graph_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->graph_dir(), target);
  }

  // int32 num_select_features = 17;
  if (this->num_select_features() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->num_select_features(), target);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam min_split_samples = 18;
  if (this->has_min_split_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_min_split_samples(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest.Type inequality_test_type = 19;
  if (this->inequality_test_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->inequality_test_type(), target);
  }

  // bool use_running_stats_method = 20;
  if (this->use_running_stats_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->use_running_stats_method(), target);
  }

  // int32 num_features = 21;
  if (this->num_features() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->num_features(), target);
  }

  // bool initialize_average_splits = 22;
  if (this->initialize_average_splits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->initialize_average_splits(), target);
  }

  // bool inference_tree_paths = 23;
  if (this->inference_tree_paths() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->inference_tree_paths(), target);
  }

  // int32 num_classes_to_track = 24;
  if (this->num_classes_to_track() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->num_classes_to_track(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.tensorforest.TensorForestParams)
  return target;
}

size_t TensorForestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string graph_dir = 16;
  if (this->graph_dir().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->graph_dir());
  }

  // .diplomacy.tensorflow.tensorforest.SplitPruningConfig pruning_type = 4;
  if (this->has_pruning_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pruning_type_);
  }

  // .diplomacy.tensorflow.tensorforest.SplitFinishConfig finish_type = 5;
  if (this->has_finish_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *finish_type_);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam num_splits_to_consider = 13;
  if (this->has_num_splits_to_consider()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *num_splits_to_consider_);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam split_after_samples = 14;
  if (this->has_split_after_samples()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *split_after_samples_);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam dominate_fraction = 15;
  if (this->has_dominate_fraction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dominate_fraction_);
  }

  // .diplomacy.tensorflow.tensorforest.DepthDependentParam min_split_samples = 18;
  if (this->has_min_split_samples()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_split_samples_);
  }

  // .diplomacy.tensorflow.tensorforest.LeafModelType leaf_type = 1;
  if (this->leaf_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaf_type());
  }

  // .diplomacy.tensorflow.tensorforest.StatsModelType stats_type = 2;
  if (this->stats_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats_type());
  }

  // .diplomacy.tensorflow.tensorforest.SplitCollectionType collection_type = 3;
  if (this->collection_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->collection_type());
  }

  // int32 num_trees = 6;
  if (this->num_trees() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_trees());
  }

  // int32 max_nodes = 7;
  if (this->max_nodes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_nodes());
  }

  // bool is_regression = 8;
  if (this->is_regression() != 0) {
    total_size += 1 + 1;
  }

  // bool drop_final_class = 9;
  if (this->drop_final_class() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_examples = 10;
  if (this->collate_examples() != 0) {
    total_size += 1 + 1;
  }

  // bool checkpoint_stats = 11;
  if (this->checkpoint_stats() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_outputs = 12;
  if (this->num_outputs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_outputs());
  }

  // int32 num_select_features = 17;
  if (this->num_select_features() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_select_features());
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest.Type inequality_test_type = 19;
  if (this->inequality_test_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->inequality_test_type());
  }

  // int32 num_features = 21;
  if (this->num_features() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_features());
  }

  // bool use_running_stats_method = 20;
  if (this->use_running_stats_method() != 0) {
    total_size += 2 + 1;
  }

  // bool initialize_average_splits = 22;
  if (this->initialize_average_splits() != 0) {
    total_size += 2 + 1;
  }

  // bool inference_tree_paths = 23;
  if (this->inference_tree_paths() != 0) {
    total_size += 2 + 1;
  }

  // int32 num_classes_to_track = 24;
  if (this->num_classes_to_track() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_classes_to_track());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorForestParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorForestParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TensorForestParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.tensorforest.TensorForestParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.tensorforest.TensorForestParams)
    MergeFrom(*source);
  }
}

void TensorForestParams::MergeFrom(const TensorForestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graph_dir().size() > 0) {

    graph_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.graph_dir_);
  }
  if (from.has_pruning_type()) {
    mutable_pruning_type()->::diplomacy::tensorflow::tensorforest::SplitPruningConfig::MergeFrom(from.pruning_type());
  }
  if (from.has_finish_type()) {
    mutable_finish_type()->::diplomacy::tensorflow::tensorforest::SplitFinishConfig::MergeFrom(from.finish_type());
  }
  if (from.has_num_splits_to_consider()) {
    mutable_num_splits_to_consider()->::diplomacy::tensorflow::tensorforest::DepthDependentParam::MergeFrom(from.num_splits_to_consider());
  }
  if (from.has_split_after_samples()) {
    mutable_split_after_samples()->::diplomacy::tensorflow::tensorforest::DepthDependentParam::MergeFrom(from.split_after_samples());
  }
  if (from.has_dominate_fraction()) {
    mutable_dominate_fraction()->::diplomacy::tensorflow::tensorforest::DepthDependentParam::MergeFrom(from.dominate_fraction());
  }
  if (from.has_min_split_samples()) {
    mutable_min_split_samples()->::diplomacy::tensorflow::tensorforest::DepthDependentParam::MergeFrom(from.min_split_samples());
  }
  if (from.leaf_type() != 0) {
    set_leaf_type(from.leaf_type());
  }
  if (from.stats_type() != 0) {
    set_stats_type(from.stats_type());
  }
  if (from.collection_type() != 0) {
    set_collection_type(from.collection_type());
  }
  if (from.num_trees() != 0) {
    set_num_trees(from.num_trees());
  }
  if (from.max_nodes() != 0) {
    set_max_nodes(from.max_nodes());
  }
  if (from.is_regression() != 0) {
    set_is_regression(from.is_regression());
  }
  if (from.drop_final_class() != 0) {
    set_drop_final_class(from.drop_final_class());
  }
  if (from.collate_examples() != 0) {
    set_collate_examples(from.collate_examples());
  }
  if (from.checkpoint_stats() != 0) {
    set_checkpoint_stats(from.checkpoint_stats());
  }
  if (from.num_outputs() != 0) {
    set_num_outputs(from.num_outputs());
  }
  if (from.num_select_features() != 0) {
    set_num_select_features(from.num_select_features());
  }
  if (from.inequality_test_type() != 0) {
    set_inequality_test_type(from.inequality_test_type());
  }
  if (from.num_features() != 0) {
    set_num_features(from.num_features());
  }
  if (from.use_running_stats_method() != 0) {
    set_use_running_stats_method(from.use_running_stats_method());
  }
  if (from.initialize_average_splits() != 0) {
    set_initialize_average_splits(from.initialize_average_splits());
  }
  if (from.inference_tree_paths() != 0) {
    set_inference_tree_paths(from.inference_tree_paths());
  }
  if (from.num_classes_to_track() != 0) {
    set_num_classes_to_track(from.num_classes_to_track());
  }
}

void TensorForestParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorForestParams::CopyFrom(const TensorForestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.tensorforest.TensorForestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorForestParams::IsInitialized() const {
  return true;
}

void TensorForestParams::Swap(TensorForestParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorForestParams::InternalSwap(TensorForestParams* other) {
  using std::swap;
  graph_dir_.Swap(&other->graph_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pruning_type_, other->pruning_type_);
  swap(finish_type_, other->finish_type_);
  swap(num_splits_to_consider_, other->num_splits_to_consider_);
  swap(split_after_samples_, other->split_after_samples_);
  swap(dominate_fraction_, other->dominate_fraction_);
  swap(min_split_samples_, other->min_split_samples_);
  swap(leaf_type_, other->leaf_type_);
  swap(stats_type_, other->stats_type_);
  swap(collection_type_, other->collection_type_);
  swap(num_trees_, other->num_trees_);
  swap(max_nodes_, other->max_nodes_);
  swap(is_regression_, other->is_regression_);
  swap(drop_final_class_, other->drop_final_class_);
  swap(collate_examples_, other->collate_examples_);
  swap(checkpoint_stats_, other->checkpoint_stats_);
  swap(num_outputs_, other->num_outputs_);
  swap(num_select_features_, other->num_select_features_);
  swap(inequality_test_type_, other->inequality_test_type_);
  swap(num_features_, other->num_features_);
  swap(use_running_stats_method_, other->use_running_stats_method_);
  swap(initialize_average_splits_, other->initialize_average_splits_);
  swap(inference_tree_paths_, other->inference_tree_paths_);
  swap(num_classes_to_track_, other->num_classes_to_track_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TensorForestParams::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2ftensor_5fforest_2fproto_2ftensor_5fforest_5fparams_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorforest
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::SplitPruningConfig* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::SplitPruningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::tensorforest::SplitPruningConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::SplitFinishConfig* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::SplitFinishConfig >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::tensorforest::SplitFinishConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::LinearParam* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::LinearParam >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::tensorforest::LinearParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::ExponentialParam* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::ExponentialParam >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::tensorforest::ExponentialParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::ThresholdParam* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::ThresholdParam >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::tensorforest::ThresholdParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::DepthDependentParam* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::DepthDependentParam >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::tensorforest::DepthDependentParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::tensorforest::TensorForestParams* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::tensorforest::TensorForestParams >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::tensorforest::TensorForestParams >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
