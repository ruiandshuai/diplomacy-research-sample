// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/mpi/mpi_msg.proto

#ifndef PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto
#define PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "diplomacy_tensorflow/core/protobuf/worker.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto 

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto
namespace diplomacy {
namespace tensorflow {
class MPIRecvTensorResponse;
class MPIRecvTensorResponseDefaultTypeInternal;
extern MPIRecvTensorResponseDefaultTypeInternal _MPIRecvTensorResponse_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> ::diplomacy::tensorflow::MPIRecvTensorResponse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::MPIRecvTensorResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace diplomacy {
namespace tensorflow {

// ===================================================================

class MPIRecvTensorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.MPIRecvTensorResponse) */ {
 public:
  MPIRecvTensorResponse();
  virtual ~MPIRecvTensorResponse();

  MPIRecvTensorResponse(const MPIRecvTensorResponse& from);

  inline MPIRecvTensorResponse& operator=(const MPIRecvTensorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MPIRecvTensorResponse(MPIRecvTensorResponse&& from) noexcept
    : MPIRecvTensorResponse() {
    *this = ::std::move(from);
  }

  inline MPIRecvTensorResponse& operator=(MPIRecvTensorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MPIRecvTensorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPIRecvTensorResponse* internal_default_instance() {
    return reinterpret_cast<const MPIRecvTensorResponse*>(
               &_MPIRecvTensorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MPIRecvTensorResponse* other);
  void Swap(MPIRecvTensorResponse* other);
  friend void swap(MPIRecvTensorResponse& a, MPIRecvTensorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MPIRecvTensorResponse* New() const final {
    return CreateMaybeMessage<MPIRecvTensorResponse>(NULL);
  }

  MPIRecvTensorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MPIRecvTensorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MPIRecvTensorResponse& from);
  void MergeFrom(const MPIRecvTensorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPIRecvTensorResponse* other);
  protected:
  explicit MPIRecvTensorResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_key();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      ::std::string* key);

  // .diplomacy.tensorflow.RecvTensorResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  const ::diplomacy::tensorflow::RecvTensorResponse& _internal_response() const;
  public:
  const ::diplomacy::tensorflow::RecvTensorResponse& response() const;
  ::diplomacy::tensorflow::RecvTensorResponse* release_response();
  ::diplomacy::tensorflow::RecvTensorResponse* mutable_response();
  void set_allocated_response(::diplomacy::tensorflow::RecvTensorResponse* response);
  void unsafe_arena_set_allocated_response(
      ::diplomacy::tensorflow::RecvTensorResponse* response);
  ::diplomacy::tensorflow::RecvTensorResponse* unsafe_arena_release_response();

  // int64 step_id = 4;
  void clear_step_id();
  static const int kStepIdFieldNumber = 4;
  ::google::protobuf::int64 step_id() const;
  void set_step_id(::google::protobuf::int64 value);

  // uint64 checksum = 5;
  void clear_checksum();
  static const int kChecksumFieldNumber = 5;
  ::google::protobuf::uint64 checksum() const;
  void set_checksum(::google::protobuf::uint64 value);

  // bool singleSend = 2;
  void clear_singlesend();
  static const int kSingleSendFieldNumber = 2;
  bool singlesend() const;
  void set_singlesend(bool value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.MPIRecvTensorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::diplomacy::tensorflow::RecvTensorResponse* response_;
  ::google::protobuf::int64 step_id_;
  ::google::protobuf::uint64 checksum_;
  bool singlesend_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MPIRecvTensorResponse

// .diplomacy.tensorflow.RecvTensorResponse response = 1;
inline bool MPIRecvTensorResponse::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline const ::diplomacy::tensorflow::RecvTensorResponse& MPIRecvTensorResponse::_internal_response() const {
  return *response_;
}
inline const ::diplomacy::tensorflow::RecvTensorResponse& MPIRecvTensorResponse::response() const {
  const ::diplomacy::tensorflow::RecvTensorResponse* p = response_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MPIRecvTensorResponse.response)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::RecvTensorResponse*>(
      &::diplomacy::tensorflow::_RecvTensorResponse_default_instance_);
}
inline ::diplomacy::tensorflow::RecvTensorResponse* MPIRecvTensorResponse::release_response() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.MPIRecvTensorResponse.response)
  
  ::diplomacy::tensorflow::RecvTensorResponse* temp = response_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  response_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::RecvTensorResponse* MPIRecvTensorResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:diplomacy.tensorflow.MPIRecvTensorResponse.response)
  
  ::diplomacy::tensorflow::RecvTensorResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::RecvTensorResponse* MPIRecvTensorResponse::mutable_response() {
  
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::RecvTensorResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.MPIRecvTensorResponse.response)
  return response_;
}
inline void MPIRecvTensorResponse::set_allocated_response(::diplomacy::tensorflow::RecvTensorResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_);
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.MPIRecvTensorResponse.response)
}

// bool singleSend = 2;
inline void MPIRecvTensorResponse::clear_singlesend() {
  singlesend_ = false;
}
inline bool MPIRecvTensorResponse::singlesend() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MPIRecvTensorResponse.singleSend)
  return singlesend_;
}
inline void MPIRecvTensorResponse::set_singlesend(bool value) {
  
  singlesend_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.MPIRecvTensorResponse.singleSend)
}

// string key = 3;
inline void MPIRecvTensorResponse::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MPIRecvTensorResponse::key() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MPIRecvTensorResponse.key)
  return key_.Get();
}
inline void MPIRecvTensorResponse::set_key(const ::std::string& value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.MPIRecvTensorResponse.key)
}
#if LANG_CXX11
inline void MPIRecvTensorResponse::set_key(::std::string&& value) {
  
  key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.MPIRecvTensorResponse.key)
}
#endif
inline void MPIRecvTensorResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.MPIRecvTensorResponse.key)
}
inline void MPIRecvTensorResponse::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.MPIRecvTensorResponse.key)
}
inline ::std::string* MPIRecvTensorResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.MPIRecvTensorResponse.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MPIRecvTensorResponse::release_key() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.MPIRecvTensorResponse.key)
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MPIRecvTensorResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.MPIRecvTensorResponse.key)
}
inline ::std::string* MPIRecvTensorResponse::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:diplomacy.tensorflow.MPIRecvTensorResponse.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MPIRecvTensorResponse::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.MPIRecvTensorResponse.key)
}

// int64 step_id = 4;
inline void MPIRecvTensorResponse::clear_step_id() {
  step_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MPIRecvTensorResponse::step_id() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MPIRecvTensorResponse.step_id)
  return step_id_;
}
inline void MPIRecvTensorResponse::set_step_id(::google::protobuf::int64 value) {
  
  step_id_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.MPIRecvTensorResponse.step_id)
}

// uint64 checksum = 5;
inline void MPIRecvTensorResponse::clear_checksum() {
  checksum_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MPIRecvTensorResponse::checksum() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.MPIRecvTensorResponse.checksum)
  return checksum_;
}
inline void MPIRecvTensorResponse::set_checksum(::google::protobuf::uint64 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.MPIRecvTensorResponse.checksum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow
}  // namespace diplomacy

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto
