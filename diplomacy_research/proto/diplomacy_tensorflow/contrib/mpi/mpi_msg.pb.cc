// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/mpi/mpi_msg.proto

#include "diplomacy_tensorflow/contrib/mpi/mpi_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecvTensorResponse;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_2eproto
namespace diplomacy {
namespace tensorflow {
class MPIRecvTensorResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MPIRecvTensorResponse>
      _instance;
} _MPIRecvTensorResponse_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto {
static void InitDefaultsMPIRecvTensorResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_MPIRecvTensorResponse_default_instance_;
    new (ptr) ::diplomacy::tensorflow::MPIRecvTensorResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::MPIRecvTensorResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MPIRecvTensorResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMPIRecvTensorResponse}, {
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_2eproto::scc_info_RecvTensorResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MPIRecvTensorResponse.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::MPIRecvTensorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::MPIRecvTensorResponse, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::MPIRecvTensorResponse, singlesend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::MPIRecvTensorResponse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::MPIRecvTensorResponse, step_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::MPIRecvTensorResponse, checksum_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::MPIRecvTensorResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_MPIRecvTensorResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/contrib/mpi/mpi_msg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.diplomacy_tensorflow/contrib/mpi/mpi_m"
      "sg.proto\022\024diplomacy.tensorflow\032/diplomac"
      "y_tensorflow/core/protobuf/worker.proto\""
      "\227\001\n\025MPIRecvTensorResponse\022:\n\010response\030\001 "
      "\001(\0132(.diplomacy.tensorflow.RecvTensorRes"
      "ponse\022\022\n\nsingleSend\030\002 \001(\010\022\013\n\003key\030\003 \001(\t\022\017"
      "\n\007step_id\030\004 \001(\003\022\020\n\010checksum\030\005 \001(\004B\003\370\001\001b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/contrib/mpi/mpi_msg.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto
namespace diplomacy {
namespace tensorflow {

// ===================================================================

void MPIRecvTensorResponse::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::_MPIRecvTensorResponse_default_instance_._instance.get_mutable()->response_ = const_cast< ::diplomacy::tensorflow::RecvTensorResponse*>(
      ::diplomacy::tensorflow::RecvTensorResponse::internal_default_instance());
}
void MPIRecvTensorResponse::unsafe_arena_set_allocated_response(
    ::diplomacy::tensorflow::RecvTensorResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.MPIRecvTensorResponse.response)
}
void MPIRecvTensorResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPIRecvTensorResponse::kResponseFieldNumber;
const int MPIRecvTensorResponse::kSingleSendFieldNumber;
const int MPIRecvTensorResponse::kKeyFieldNumber;
const int MPIRecvTensorResponse::kStepIdFieldNumber;
const int MPIRecvTensorResponse::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPIRecvTensorResponse::MPIRecvTensorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::scc_info_MPIRecvTensorResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.MPIRecvTensorResponse)
}
MPIRecvTensorResponse::MPIRecvTensorResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::scc_info_MPIRecvTensorResponse.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.MPIRecvTensorResponse)
}
MPIRecvTensorResponse::MPIRecvTensorResponse(const MPIRecvTensorResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key(),
      GetArenaNoVirtual());
  }
  if (from.has_response()) {
    response_ = new ::diplomacy::tensorflow::RecvTensorResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&singlesend_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(singlesend_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.MPIRecvTensorResponse)
}

void MPIRecvTensorResponse::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&singlesend_) -
      reinterpret_cast<char*>(&response_)) + sizeof(singlesend_));
}

MPIRecvTensorResponse::~MPIRecvTensorResponse() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.MPIRecvTensorResponse)
  SharedDtor();
}

void MPIRecvTensorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_;
}

void MPIRecvTensorResponse::ArenaDtor(void* object) {
  MPIRecvTensorResponse* _this = reinterpret_cast< MPIRecvTensorResponse* >(object);
  (void)_this;
}
void MPIRecvTensorResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MPIRecvTensorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MPIRecvTensorResponse::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MPIRecvTensorResponse& MPIRecvTensorResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::scc_info_MPIRecvTensorResponse.base);
  return *internal_default_instance();
}


void MPIRecvTensorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&singlesend_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(singlesend_));
  _internal_metadata_.Clear();
}

bool MPIRecvTensorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.RecvTensorResponse response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool singleSend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &singlesend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.MPIRecvTensorResponse.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 step_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 checksum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.MPIRecvTensorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.MPIRecvTensorResponse)
  return false;
#undef DO_
}

void MPIRecvTensorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.RecvTensorResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_response(), output);
  }

  // bool singleSend = 2;
  if (this->singlesend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->singlesend(), output);
  }

  // string key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.MPIRecvTensorResponse.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // int64 step_id = 4;
  if (this->step_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->step_id(), output);
  }

  // uint64 checksum = 5;
  if (this->checksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->checksum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.MPIRecvTensorResponse)
}

::google::protobuf::uint8* MPIRecvTensorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.RecvTensorResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_response(), deterministic, target);
  }

  // bool singleSend = 2;
  if (this->singlesend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->singlesend(), target);
  }

  // string key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.MPIRecvTensorResponse.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // int64 step_id = 4;
  if (this->step_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->step_id(), target);
  }

  // uint64 checksum = 5;
  if (this->checksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->checksum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.MPIRecvTensorResponse)
  return target;
}

size_t MPIRecvTensorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .diplomacy.tensorflow.RecvTensorResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // int64 step_id = 4;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // uint64 checksum = 5;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->checksum());
  }

  // bool singleSend = 2;
  if (this->singlesend() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPIRecvTensorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MPIRecvTensorResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MPIRecvTensorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.MPIRecvTensorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.MPIRecvTensorResponse)
    MergeFrom(*source);
  }
}

void MPIRecvTensorResponse::MergeFrom(const MPIRecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    set_key(from.key());
  }
  if (from.has_response()) {
    mutable_response()->::diplomacy::tensorflow::RecvTensorResponse::MergeFrom(from.response());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.checksum() != 0) {
    set_checksum(from.checksum());
  }
  if (from.singlesend() != 0) {
    set_singlesend(from.singlesend());
  }
}

void MPIRecvTensorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPIRecvTensorResponse::CopyFrom(const MPIRecvTensorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.MPIRecvTensorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPIRecvTensorResponse::IsInitialized() const {
  return true;
}

void MPIRecvTensorResponse::Swap(MPIRecvTensorResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MPIRecvTensorResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MPIRecvTensorResponse::UnsafeArenaSwap(MPIRecvTensorResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MPIRecvTensorResponse::InternalSwap(MPIRecvTensorResponse* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_, other->response_);
  swap(step_id_, other->step_id_);
  swap(checksum_, other->checksum_);
  swap(singlesend_, other->singlesend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MPIRecvTensorResponse::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_2fmpi_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::MPIRecvTensorResponse* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::MPIRecvTensorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::MPIRecvTensorResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
