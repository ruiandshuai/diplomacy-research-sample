// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/decision_trees/proto/generic_tree_model.proto

#include "diplomacy_tensorflow/contrib/decision_trees/proto/generic_tree_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Averaging;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ModelAndFeatures_FeaturesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObliqueFeatures;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SparseVector;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SparseVector_SparseValueEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Summation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vector;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DecisionTree;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_FeatureId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ModelAndFeatures_Feature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_BinaryNode;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_InequalityTest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Leaf;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_TreeNode;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Ensemble;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto
namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace diplomacy {
namespace tensorflow {
namespace decision_trees {
class ModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Model>
      _instance;
  const ::diplomacy::tensorflow::decision_trees::DecisionTree* decision_tree_;
  const ::diplomacy::tensorflow::decision_trees::Ensemble* ensemble_;
  const ::google::protobuf::Any* custom_model_;
} _Model_default_instance_;
class ModelAndFeatures_FeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelAndFeatures_Feature>
      _instance;
} _ModelAndFeatures_Feature_default_instance_;
class ModelAndFeatures_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelAndFeatures_FeaturesEntry_DoNotUse>
      _instance;
} _ModelAndFeatures_FeaturesEntry_DoNotUse_default_instance_;
class ModelAndFeaturesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelAndFeatures>
      _instance;
} _ModelAndFeatures_default_instance_;
class Ensemble_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ensemble_Member>
      _instance;
} _Ensemble_Member_default_instance_;
class EnsembleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ensemble>
      _instance;
  const ::diplomacy::tensorflow::decision_trees::Summation* summation_combination_technique_;
  const ::diplomacy::tensorflow::decision_trees::Averaging* averaging_combination_technique_;
  const ::google::protobuf::Any* custom_combination_technique_;
} _Ensemble_default_instance_;
class SummationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Summation>
      _instance;
} _Summation_default_instance_;
class AveragingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Averaging>
      _instance;
} _Averaging_default_instance_;
class DecisionTreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecisionTree>
      _instance;
} _DecisionTree_default_instance_;
class TreeNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeNode>
      _instance;
  const ::diplomacy::tensorflow::decision_trees::BinaryNode* binary_node_;
  const ::diplomacy::tensorflow::decision_trees::Leaf* leaf_;
  const ::google::protobuf::Any* custom_node_type_;
} _TreeNode_default_instance_;
class BinaryNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinaryNode>
      _instance;
  const ::diplomacy::tensorflow::decision_trees::InequalityTest* inequality_left_child_test_;
  const ::google::protobuf::Any* custom_left_child_test_;
} _BinaryNode_default_instance_;
class SparseVector_SparseValueEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparseVector_SparseValueEntry_DoNotUse>
      _instance;
} _SparseVector_SparseValueEntry_DoNotUse_default_instance_;
class SparseVectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SparseVector>
      _instance;
} _SparseVector_default_instance_;
class VectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector>
      _instance;
} _Vector_default_instance_;
class LeafDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Leaf>
      _instance;
  const ::diplomacy::tensorflow::decision_trees::Vector* vector_;
  const ::diplomacy::tensorflow::decision_trees::SparseVector* sparse_vector_;
} _Leaf_default_instance_;
class FeatureIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeatureId>
      _instance;
} _FeatureId_default_instance_;
class ObliqueFeaturesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObliqueFeatures>
      _instance;
} _ObliqueFeatures_default_instance_;
class InequalityTestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InequalityTest>
      _instance;
  const ::diplomacy::tensorflow::decision_trees::FeatureId* feature_id_;
  const ::diplomacy::tensorflow::decision_trees::ObliqueFeatures* oblique_;
} _InequalityTest_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value>
      _instance;
  float float_value_;
  double double_value_;
  ::google::protobuf::int32 int32_value_;
  ::google::protobuf::int64 int64_value_;
  const ::google::protobuf::Any* custom_value_;
} _Value_default_instance_;
}  // namespace decision_trees
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto {
static void InitDefaultsModelAndFeatures_Feature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_Feature_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ModelAndFeatures_Feature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsModelAndFeatures_Feature}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_FeatureId.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsModelAndFeatures_FeaturesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse();
  }
  ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ModelAndFeatures_FeaturesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsModelAndFeatures_FeaturesEntry_DoNotUse}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures_Feature.base,}};

static void InitDefaultsModelAndFeatures() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::ModelAndFeatures();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::ModelAndFeatures::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ModelAndFeatures =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsModelAndFeatures}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures_FeaturesEntry_DoNotUse.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsEnsemble() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Model_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Model();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Ensemble_Member_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Ensemble_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Ensemble_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Ensemble();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::Model::InitAsDefaultInstance();
  ::diplomacy::tensorflow::decision_trees::Ensemble_Member::InitAsDefaultInstance();
  ::diplomacy::tensorflow::decision_trees::Ensemble::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Ensemble =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsEnsemble}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Summation.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Averaging.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_DecisionTree.base,}};

static void InitDefaultsSummation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Summation_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Summation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::Summation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Summation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSummation}, {
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsAveraging() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Averaging_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Averaging();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::Averaging::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Averaging =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAveraging}, {
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsDecisionTree() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_DecisionTree_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::DecisionTree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::DecisionTree::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DecisionTree =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDecisionTree}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_TreeNode.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsTreeNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::TreeNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::TreeNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TreeNode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTreeNode}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_BinaryNode.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Leaf.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsBinaryNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_BinaryNode_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::BinaryNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::BinaryNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_BinaryNode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsBinaryNode}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_InequalityTest.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsSparseVector_SparseValueEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_SparseVector_SparseValueEntry_DoNotUse_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse();
  }
  ::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SparseVector_SparseValueEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSparseVector_SparseValueEntry_DoNotUse}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Value.base,}};

static void InitDefaultsSparseVector() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_SparseVector_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::SparseVector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::SparseVector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SparseVector =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSparseVector}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_SparseVector_SparseValueEntry_DoNotUse.base,}};

static void InitDefaultsVector() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Vector_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Vector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::Vector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Vector =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVector}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Value.base,}};

static void InitDefaultsLeaf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Leaf_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Leaf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::Leaf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Leaf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLeaf}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Vector.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_SparseVector.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsFeatureId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_FeatureId_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::FeatureId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::FeatureId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FeatureId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFeatureId}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsObliqueFeatures() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_ObliqueFeatures_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::ObliqueFeatures();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::ObliqueFeatures::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObliqueFeatures =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObliqueFeatures}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_FeatureId.base,}};

static void InitDefaultsInequalityTest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_InequalityTest_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::InequalityTest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::InequalityTest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_InequalityTest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsInequalityTest}, {
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_FeatureId.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ObliqueFeatures.base,
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Value.base,}};

static void InitDefaultsValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::decision_trees::_Value_default_instance_;
    new (ptr) ::diplomacy::tensorflow::decision_trees::Value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::decision_trees::Value::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Value =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValue}, {
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ModelAndFeatures_Feature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelAndFeatures_FeaturesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModelAndFeatures.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ensemble.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Summation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Averaging.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DecisionTree.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TreeNode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinaryNode.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SparseVector_SparseValueEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SparseVector.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vector.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Leaf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FeatureId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObliqueFeatures.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InequalityTest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value.base);
}

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Model, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::diplomacy::tensorflow::decision_trees::ModelDefaultTypeInternal, decision_tree_),
  offsetof(::diplomacy::tensorflow::decision_trees::ModelDefaultTypeInternal, ensemble_),
  offsetof(::diplomacy::tensorflow::decision_trees::ModelDefaultTypeInternal, custom_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Model, additional_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Model, model_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature, feature_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature, additional_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ModelAndFeatures, additional_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble_Member, submodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble_Member, submodel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble_Member, additional_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble, members_),
  offsetof(::diplomacy::tensorflow::decision_trees::EnsembleDefaultTypeInternal, summation_combination_technique_),
  offsetof(::diplomacy::tensorflow::decision_trees::EnsembleDefaultTypeInternal, averaging_combination_technique_),
  offsetof(::diplomacy::tensorflow::decision_trees::EnsembleDefaultTypeInternal, custom_combination_technique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble, additional_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Ensemble, combination_technique_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Summation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Summation, additional_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Averaging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Averaging, additional_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::DecisionTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::DecisionTree, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::DecisionTree, additional_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::TreeNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::TreeNode, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::TreeNode, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::TreeNode, subtree_size_),
  offsetof(::diplomacy::tensorflow::decision_trees::TreeNodeDefaultTypeInternal, binary_node_),
  offsetof(::diplomacy::tensorflow::decision_trees::TreeNodeDefaultTypeInternal, leaf_),
  offsetof(::diplomacy::tensorflow::decision_trees::TreeNodeDefaultTypeInternal, custom_node_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::TreeNode, additional_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::TreeNode, node_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::BinaryNode, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::BinaryNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::BinaryNode, left_child_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::BinaryNode, right_child_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::BinaryNode, default_direction_),
  offsetof(::diplomacy::tensorflow::decision_trees::BinaryNodeDefaultTypeInternal, inequality_left_child_test_),
  offsetof(::diplomacy::tensorflow::decision_trees::BinaryNodeDefaultTypeInternal, custom_left_child_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::BinaryNode, left_child_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::SparseVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::SparseVector, sparse_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Vector, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Leaf, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Leaf, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::diplomacy::tensorflow::decision_trees::LeafDefaultTypeInternal, vector_),
  offsetof(::diplomacy::tensorflow::decision_trees::LeafDefaultTypeInternal, sparse_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Leaf, additional_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Leaf, leaf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::FeatureId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::FeatureId, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::FeatureId, additional_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ObliqueFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ObliqueFeatures, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::ObliqueFeatures, weights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::InequalityTest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::InequalityTest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::diplomacy::tensorflow::decision_trees::InequalityTestDefaultTypeInternal, feature_id_),
  offsetof(::diplomacy::tensorflow::decision_trees::InequalityTestDefaultTypeInternal, oblique_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::InequalityTest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::InequalityTest, threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::InequalityTest, FeatureSum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::diplomacy::tensorflow::decision_trees::ValueDefaultTypeInternal, float_value_),
  offsetof(::diplomacy::tensorflow::decision_trees::ValueDefaultTypeInternal, double_value_),
  offsetof(::diplomacy::tensorflow::decision_trees::ValueDefaultTypeInternal, int32_value_),
  offsetof(::diplomacy::tensorflow::decision_trees::ValueDefaultTypeInternal, int64_value_),
  offsetof(::diplomacy::tensorflow::decision_trees::ValueDefaultTypeInternal, custom_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::decision_trees::Value, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::decision_trees::Model)},
  { 10, -1, sizeof(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature)},
  { 17, 24, sizeof(::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse)},
  { 26, -1, sizeof(::diplomacy::tensorflow::decision_trees::ModelAndFeatures)},
  { 34, -1, sizeof(::diplomacy::tensorflow::decision_trees::Ensemble_Member)},
  { 42, -1, sizeof(::diplomacy::tensorflow::decision_trees::Ensemble)},
  { 53, -1, sizeof(::diplomacy::tensorflow::decision_trees::Summation)},
  { 59, -1, sizeof(::diplomacy::tensorflow::decision_trees::Averaging)},
  { 65, -1, sizeof(::diplomacy::tensorflow::decision_trees::DecisionTree)},
  { 72, -1, sizeof(::diplomacy::tensorflow::decision_trees::TreeNode)},
  { 85, -1, sizeof(::diplomacy::tensorflow::decision_trees::BinaryNode)},
  { 96, 103, sizeof(::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse)},
  { 105, -1, sizeof(::diplomacy::tensorflow::decision_trees::SparseVector)},
  { 111, -1, sizeof(::diplomacy::tensorflow::decision_trees::Vector)},
  { 117, -1, sizeof(::diplomacy::tensorflow::decision_trees::Leaf)},
  { 126, -1, sizeof(::diplomacy::tensorflow::decision_trees::FeatureId)},
  { 133, -1, sizeof(::diplomacy::tensorflow::decision_trees::ObliqueFeatures)},
  { 140, -1, sizeof(::diplomacy::tensorflow::decision_trees::InequalityTest)},
  { 150, -1, sizeof(::diplomacy::tensorflow::decision_trees::Value)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Model_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_Feature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Ensemble_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Ensemble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Summation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Averaging_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_DecisionTree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_BinaryNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_SparseVector_SparseValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_SparseVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Vector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Leaf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_FeatureId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_ObliqueFeatures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_InequalityTest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::decision_trees::_Value_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/contrib/decision_trees/proto/generic_tree_model.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nJdiplomacy_tensorflow/contrib/decision_"
      "trees/proto/generic_tree_model.proto\022#di"
      "plomacy.tensorflow.decision_trees\032\031googl"
      "e/protobuf/any.proto\032\036google/protobuf/wr"
      "appers.proto\"\374\001\n\005Model\022J\n\rdecision_tree\030"
      "\001 \001(\01321.diplomacy.tensorflow.decision_tr"
      "ees.DecisionTreeH\000\022A\n\010ensemble\030\002 \001(\0132-.d"
      "iplomacy.tensorflow.decision_trees.Ensem"
      "bleH\000\022,\n\014custom_model\030\003 \001(\0132\024.google.pro"
      "tobuf.AnyH\000\022-\n\017additional_data\030\004 \003(\0132\024.g"
      "oogle.protobuf.AnyB\007\n\005model\"\306\003\n\020ModelAnd"
      "Features\022U\n\010features\030\001 \003(\0132C.diplomacy.t"
      "ensorflow.decision_trees.ModelAndFeature"
      "s.FeaturesEntry\0229\n\005model\030\002 \001(\0132*.diploma"
      "cy.tensorflow.decision_trees.Model\022-\n\017ad"
      "ditional_data\030\003 \003(\0132\024.google.protobuf.An"
      "y\032\200\001\n\007Feature\022F\n\nfeature_id\030\001 \001(\0132..dipl"
      "omacy.tensorflow.decision_trees.FeatureI"
      "dB\002\030\001\022-\n\017additional_data\030\002 \003(\0132\024.google."
      "protobuf.Any\032n\n\rFeaturesEntry\022\013\n\003key\030\001 \001"
      "(\t\022L\n\005value\030\002 \001(\0132=.diplomacy.tensorflow"
      ".decision_trees.ModelAndFeatures.Feature"
      ":\0028\001\"\267\004\n\010Ensemble\022E\n\007members\030d \003(\01324.dip"
      "lomacy.tensorflow.decision_trees.Ensembl"
      "e.Member\022Y\n\037summation_combination_techni"
      "que\030\001 \001(\0132..diplomacy.tensorflow.decisio"
      "n_trees.SummationH\000\022Y\n\037averaging_combina"
      "tion_technique\030\002 \001(\0132..diplomacy.tensorf"
      "low.decision_trees.AveragingH\000\022<\n\034custom"
      "_combination_technique\030\003 \001(\0132\024.google.pr"
      "otobuf.AnyH\000\022-\n\017additional_data\030\004 \003(\0132\024."
      "google.protobuf.Any\032\247\001\n\006Member\022<\n\010submod"
      "el\030\001 \001(\0132*.diplomacy.tensorflow.decision"
      "_trees.Model\0220\n\013submodel_id\030\002 \001(\0132\033.goog"
      "le.protobuf.Int32Value\022-\n\017additional_dat"
      "a\030\003 \003(\0132\024.google.protobuf.AnyB\027\n\025combina"
      "tion_technique\":\n\tSummation\022-\n\017additiona"
      "l_data\030\001 \003(\0132\024.google.protobuf.Any\":\n\tAv"
      "eraging\022-\n\017additional_data\030\001 \003(\0132\024.googl"
      "e.protobuf.Any\"{\n\014DecisionTree\022<\n\005nodes\030"
      "\001 \003(\0132-.diplomacy.tensorflow.decision_tr"
      "ees.TreeNode\022-\n\017additional_data\030\002 \003(\0132\024."
      "google.protobuf.Any\"\210\003\n\010TreeNode\022,\n\007node"
      "_id\030\001 \001(\0132\033.google.protobuf.Int32Value\022*"
      "\n\005depth\030\002 \001(\0132\033.google.protobuf.Int32Val"
      "ue\0221\n\014subtree_size\030\003 \001(\0132\033.google.protob"
      "uf.Int32Value\022F\n\013binary_node\030\004 \001(\0132/.dip"
      "lomacy.tensorflow.decision_trees.BinaryN"
      "odeH\000\0229\n\004leaf\030\005 \001(\0132).diplomacy.tensorfl"
      "ow.decision_trees.LeafH\000\0220\n\020custom_node_"
      "type\030\006 \001(\0132\024.google.protobuf.AnyH\000\022-\n\017ad"
      "ditional_data\030\007 \003(\0132\024.google.protobuf.An"
      "yB\013\n\tnode_type\"\223\003\n\nBinaryNode\0222\n\rleft_ch"
      "ild_id\030\001 \001(\0132\033.google.protobuf.Int32Valu"
      "e\0223\n\016right_child_id\030\002 \001(\0132\033.google.proto"
      "buf.Int32Value\022T\n\021default_direction\030\003 \001("
      "\01629.diplomacy.tensorflow.decision_trees."
      "BinaryNode.Direction\022Y\n\032inequality_left_"
      "child_test\030\004 \001(\01323.diplomacy.tensorflow."
      "decision_trees.InequalityTestH\000\0226\n\026custo"
      "m_left_child_test\030\005 \001(\0132\024.google.protobu"
      "f.AnyH\000\" \n\tDirection\022\010\n\004LEFT\020\000\022\t\n\005RIGHT\020"
      "\001B\021\n\017left_child_test\"\310\001\n\014SparseVector\022X\n"
      "\014sparse_value\030\001 \003(\0132B.diplomacy.tensorfl"
      "ow.decision_trees.SparseVector.SparseVal"
      "ueEntry\032^\n\020SparseValueEntry\022\013\n\003key\030\001 \001(\003"
      "\0229\n\005value\030\002 \001(\0132*.diplomacy.tensorflow.d"
      "ecision_trees.Value:\0028\001\"C\n\006Vector\0229\n\005val"
      "ue\030\001 \003(\0132*.diplomacy.tensorflow.decision"
      "_trees.Value\"\310\001\n\004Leaf\022=\n\006vector\030\001 \001(\0132+."
      "diplomacy.tensorflow.decision_trees.Vect"
      "orH\000\022J\n\rsparse_vector\030\002 \001(\01321.diplomacy."
      "tensorflow.decision_trees.SparseVectorH\000"
      "\022-\n\017additional_data\030\003 \003(\0132\024.google.proto"
      "buf.AnyB\006\n\004leaf\"d\n\tFeatureId\022(\n\002id\030\001 \001(\013"
      "2\034.google.protobuf.StringValue\022-\n\017additi"
      "onal_data\030\002 \003(\0132\024.google.protobuf.Any\"d\n"
      "\017ObliqueFeatures\022@\n\010features\030\001 \003(\0132..dip"
      "lomacy.tensorflow.decision_trees.Feature"
      "Id\022\017\n\007weights\030\002 \003(\002\"\206\003\n\016InequalityTest\022D"
      "\n\nfeature_id\030\001 \001(\0132..diplomacy.tensorflo"
      "w.decision_trees.FeatureIdH\000\022G\n\007oblique\030"
      "\004 \001(\01324.diplomacy.tensorflow.decision_tr"
      "ees.ObliqueFeaturesH\000\022F\n\004type\030\002 \001(\01628.di"
      "plomacy.tensorflow.decision_trees.Inequa"
      "lityTest.Type\022=\n\tthreshold\030\003 \001(\0132*.diplo"
      "macy.tensorflow.decision_trees.Value\"P\n\004"
      "Type\022\021\n\rLESS_OR_EQUAL\020\000\022\r\n\tLESS_THAN\020\001\022\024"
      "\n\020GREATER_OR_EQUAL\020\002\022\020\n\014GREATER_THAN\020\003B\014"
      "\n\nFeatureSum\"\233\001\n\005Value\022\025\n\013float_value\030\001 "
      "\001(\002H\000\022\026\n\014double_value\030\002 \001(\001H\000\022\025\n\013int32_v"
      "alue\030\003 \001(\005H\000\022\025\n\013int64_value\030\004 \001(\003H\000\022,\n\014c"
      "ustom_value\030\005 \001(\0132\024.google.protobuf.AnyH"
      "\000B\007\n\005valueB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3743);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/contrib/decision_trees/proto/generic_tree_model.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto
namespace diplomacy {
namespace tensorflow {
namespace decision_trees {
const ::google::protobuf::EnumDescriptor* BinaryNode_Direction_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_enum_descriptors[0];
}
bool BinaryNode_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BinaryNode_Direction BinaryNode::LEFT;
const BinaryNode_Direction BinaryNode::RIGHT;
const BinaryNode_Direction BinaryNode::Direction_MIN;
const BinaryNode_Direction BinaryNode::Direction_MAX;
const int BinaryNode::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InequalityTest_Type_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_enum_descriptors[1];
}
bool InequalityTest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InequalityTest_Type InequalityTest::LESS_OR_EQUAL;
const InequalityTest_Type InequalityTest::LESS_THAN;
const InequalityTest_Type InequalityTest::GREATER_OR_EQUAL;
const InequalityTest_Type InequalityTest::GREATER_THAN;
const InequalityTest_Type InequalityTest::Type_MIN;
const InequalityTest_Type InequalityTest::Type_MAX;
const int InequalityTest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Model::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_Model_default_instance_.decision_tree_ = const_cast< ::diplomacy::tensorflow::decision_trees::DecisionTree*>(
      ::diplomacy::tensorflow::decision_trees::DecisionTree::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_Model_default_instance_.ensemble_ = const_cast< ::diplomacy::tensorflow::decision_trees::Ensemble*>(
      ::diplomacy::tensorflow::decision_trees::Ensemble::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_Model_default_instance_.custom_model_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void Model::set_allocated_decision_tree(::diplomacy::tensorflow::decision_trees::DecisionTree* decision_tree) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (decision_tree) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(decision_tree);
    if (message_arena != submessage_arena) {
      decision_tree = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, decision_tree, submessage_arena);
    }
    set_has_decision_tree();
    model_.decision_tree_ = decision_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Model.decision_tree)
}
void Model::set_allocated_ensemble(::diplomacy::tensorflow::decision_trees::Ensemble* ensemble) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (ensemble) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(ensemble);
    if (message_arena != submessage_arena) {
      ensemble = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ensemble, submessage_arena);
    }
    set_has_ensemble();
    model_.ensemble_ = ensemble;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Model.ensemble)
}
void Model::set_allocated_custom_model(::google::protobuf::Any* custom_model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (custom_model) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_model, submessage_arena);
    }
    set_has_custom_model();
    model_.custom_model_ = custom_model;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Model.custom_model)
}
void Model::clear_custom_model() {
  if (has_custom_model()) {
    if (GetArenaNoVirtual() == NULL) {
      delete model_.custom_model_;
    }
    clear_has_model();
  }
}
void Model::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kDecisionTreeFieldNumber;
const int Model::kEnsembleFieldNumber;
const int Model::kCustomModelFieldNumber;
const int Model::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Model)
}
Model::Model(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Model)
}
Model::Model(const Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_model();
  switch (from.model_case()) {
    case kDecisionTree: {
      mutable_decision_tree()->::diplomacy::tensorflow::decision_trees::DecisionTree::MergeFrom(from.decision_tree());
      break;
    }
    case kEnsemble: {
      mutable_ensemble()->::diplomacy::tensorflow::decision_trees::Ensemble::MergeFrom(from.ensemble());
      break;
    }
    case kCustomModel: {
      mutable_custom_model()->::google::protobuf::Any::MergeFrom(from.custom_model());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Model)
}

void Model::SharedCtor() {
  clear_has_model();
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_model()) {
    clear_model();
  }
}

void Model::ArenaDtor(void* object) {
  Model* _this = reinterpret_cast< Model* >(object);
  (void)_this;
}
void Model::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Model& Model::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  return *internal_default_instance();
}


void Model::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.decision_trees.Model)
  switch (model_case()) {
    case kDecisionTree: {
      if (GetArenaNoVirtual() == NULL) {
        delete model_.decision_tree_;
      }
      break;
    }
    case kEnsemble: {
      if (GetArenaNoVirtual() == NULL) {
        delete model_.ensemble_;
      }
      break;
    }
    case kCustomModel: {
      if (GetArenaNoVirtual() == NULL) {
        delete model_.custom_model_;
      }
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  clear_model();
  _internal_metadata_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Model)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.DecisionTree decision_tree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_decision_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.Ensemble ensemble = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ensemble()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any custom_model = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.DecisionTree decision_tree = 1;
  if (has_decision_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_decision_tree(), output);
  }

  // .diplomacy.tensorflow.decision_trees.Ensemble ensemble = 2;
  if (has_ensemble()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ensemble(), output);
  }

  // .google.protobuf.Any custom_model = 3;
  if (has_custom_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_custom_model(), output);
  }

  // repeated .google.protobuf.Any additional_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.DecisionTree decision_tree = 1;
  if (has_decision_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_decision_tree(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.Ensemble ensemble = 2;
  if (has_ensemble()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ensemble(), deterministic, target);
  }

  // .google.protobuf.Any custom_model = 3;
  if (has_custom_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_custom_model(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Model)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  switch (model_case()) {
    // .diplomacy.tensorflow.decision_trees.DecisionTree decision_tree = 1;
    case kDecisionTree: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *model_.decision_tree_);
      break;
    }
    // .diplomacy.tensorflow.decision_trees.Ensemble ensemble = 2;
    case kEnsemble: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *model_.ensemble_);
      break;
    }
    // .google.protobuf.Any custom_model = 3;
    case kCustomModel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *model_.custom_model_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
  switch (from.model_case()) {
    case kDecisionTree: {
      mutable_decision_tree()->::diplomacy::tensorflow::decision_trees::DecisionTree::MergeFrom(from.decision_tree());
      break;
    }
    case kEnsemble: {
      mutable_ensemble()->::diplomacy::tensorflow::decision_trees::Ensemble::MergeFrom(from.ensemble());
      break;
    }
    case kCustomModel: {
      mutable_custom_model()->::google::protobuf::Any::MergeFrom(from.custom_model());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Model* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Model::UnsafeArenaSwap(Model* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModelAndFeatures_Feature::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_Feature_default_instance_._instance.get_mutable()->feature_id_ = const_cast< ::diplomacy::tensorflow::decision_trees::FeatureId*>(
      ::diplomacy::tensorflow::decision_trees::FeatureId::internal_default_instance());
}
void ModelAndFeatures_Feature::unsafe_arena_set_allocated_feature_id(
    ::diplomacy::tensorflow::decision_trees::FeatureId* feature_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete feature_id_;
  }
  feature_id_ = feature_id;
  if (feature_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature.feature_id)
}
void ModelAndFeatures_Feature::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelAndFeatures_Feature::kFeatureIdFieldNumber;
const int ModelAndFeatures_Feature::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelAndFeatures_Feature::ModelAndFeatures_Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures_Feature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
}
ModelAndFeatures_Feature::ModelAndFeatures_Feature(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures_Feature.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
}
ModelAndFeatures_Feature::ModelAndFeatures_Feature(const ModelAndFeatures_Feature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_feature_id()) {
    feature_id_ = new ::diplomacy::tensorflow::decision_trees::FeatureId(*from.feature_id_);
  } else {
    feature_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
}

void ModelAndFeatures_Feature::SharedCtor() {
  feature_id_ = NULL;
}

ModelAndFeatures_Feature::~ModelAndFeatures_Feature() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  SharedDtor();
}

void ModelAndFeatures_Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete feature_id_;
}

void ModelAndFeatures_Feature::ArenaDtor(void* object) {
  ModelAndFeatures_Feature* _this = reinterpret_cast< ModelAndFeatures_Feature* >(object);
  (void)_this;
}
void ModelAndFeatures_Feature::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModelAndFeatures_Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelAndFeatures_Feature::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelAndFeatures_Feature& ModelAndFeatures_Feature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures_Feature.base);
  return *internal_default_instance();
}


void ModelAndFeatures_Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  if (GetArenaNoVirtual() == NULL && feature_id_ != NULL) {
    delete feature_id_;
  }
  feature_id_ = NULL;
  _internal_metadata_.Clear();
}

bool ModelAndFeatures_Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  return false;
#undef DO_
}

void ModelAndFeatures_Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1 [deprecated = true];
  if (this->has_feature_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_feature_id(), output);
  }

  // repeated .google.protobuf.Any additional_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
}

::google::protobuf::uint8* ModelAndFeatures_Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1 [deprecated = true];
  if (this->has_feature_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_feature_id(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  return target;
}

size_t ModelAndFeatures_Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1 [deprecated = true];
  if (this->has_feature_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feature_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelAndFeatures_Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelAndFeatures_Feature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelAndFeatures_Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
    MergeFrom(*source);
  }
}

void ModelAndFeatures_Feature::MergeFrom(const ModelAndFeatures_Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
  if (from.has_feature_id()) {
    mutable_feature_id()->::diplomacy::tensorflow::decision_trees::FeatureId::MergeFrom(from.feature_id());
  }
}

void ModelAndFeatures_Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelAndFeatures_Feature::CopyFrom(const ModelAndFeatures_Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelAndFeatures_Feature::IsInitialized() const {
  return true;
}

void ModelAndFeatures_Feature::Swap(ModelAndFeatures_Feature* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModelAndFeatures_Feature* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ModelAndFeatures_Feature::UnsafeArenaSwap(ModelAndFeatures_Feature* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModelAndFeatures_Feature::InternalSwap(ModelAndFeatures_Feature* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  swap(feature_id_, other->feature_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelAndFeatures_Feature::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ModelAndFeatures_FeaturesEntry_DoNotUse::ModelAndFeatures_FeaturesEntry_DoNotUse() {}
ModelAndFeatures_FeaturesEntry_DoNotUse::ModelAndFeatures_FeaturesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ModelAndFeatures_FeaturesEntry_DoNotUse::MergeFrom(const ModelAndFeatures_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ModelAndFeatures_FeaturesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[2];
}
void ModelAndFeatures_FeaturesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ModelAndFeatures::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_ModelAndFeatures_default_instance_._instance.get_mutable()->model_ = const_cast< ::diplomacy::tensorflow::decision_trees::Model*>(
      ::diplomacy::tensorflow::decision_trees::Model::internal_default_instance());
}
void ModelAndFeatures::unsafe_arena_set_allocated_model(
    ::diplomacy::tensorflow::decision_trees::Model* model) {
  if (GetArenaNoVirtual() == NULL) {
    delete model_;
  }
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.ModelAndFeatures.model)
}
void ModelAndFeatures::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelAndFeatures::kFeaturesFieldNumber;
const int ModelAndFeatures::kModelFieldNumber;
const int ModelAndFeatures::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelAndFeatures::ModelAndFeatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
}
ModelAndFeatures::ModelAndFeatures(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  features_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
}
ModelAndFeatures::ModelAndFeatures(const ModelAndFeatures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  if (from.has_model()) {
    model_ = new ::diplomacy::tensorflow::decision_trees::Model(*from.model_);
  } else {
    model_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
}

void ModelAndFeatures::SharedCtor() {
  model_ = NULL;
}

ModelAndFeatures::~ModelAndFeatures() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  SharedDtor();
}

void ModelAndFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete model_;
}

void ModelAndFeatures::ArenaDtor(void* object) {
  ModelAndFeatures* _this = reinterpret_cast< ModelAndFeatures* >(object);
  (void)_this;
}
void ModelAndFeatures::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModelAndFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelAndFeatures::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelAndFeatures& ModelAndFeatures::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ModelAndFeatures.base);
  return *internal_default_instance();
}


void ModelAndFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  additional_data_.Clear();
  if (GetArenaNoVirtual() == NULL && model_ != NULL) {
    delete model_;
  }
  model_ = NULL;
  _internal_metadata_.Clear();
}

bool ModelAndFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature> features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          ModelAndFeatures_FeaturesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ModelAndFeatures_FeaturesEntry_DoNotUse,
              ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature > > parser(&features_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.decision_trees.ModelAndFeatures.FeaturesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.Model model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  return false;
#undef DO_
}

void ModelAndFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature> features = 1;
  if (!this->features().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy.tensorflow.decision_trees.ModelAndFeatures.FeaturesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->features().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ModelAndFeatures_FeaturesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(features_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ModelAndFeatures_FeaturesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it) {
        entry.reset(features_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // .diplomacy.tensorflow.decision_trees.Model model = 2;
  if (this->has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_model(), output);
  }

  // repeated .google.protobuf.Any additional_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
}

::google::protobuf::uint8* ModelAndFeatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature> features = 1;
  if (!this->features().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "diplomacy.tensorflow.decision_trees.ModelAndFeatures.FeaturesEntry.key");
      }
    };

    if (deterministic &&
        this->features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->features().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ModelAndFeatures_FeaturesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(features_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ModelAndFeatures_FeaturesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it) {
        entry.reset(features_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // .diplomacy.tensorflow.decision_trees.Model model = 2;
  if (this->has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_model(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  return target;
}

size_t ModelAndFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .diplomacy.tensorflow.decision_trees.ModelAndFeatures.Feature> features = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->features_size());
  {
    ::std::unique_ptr<ModelAndFeatures_FeaturesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >::const_iterator
        it = this->features().begin();
        it != this->features().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(features_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // repeated .google.protobuf.Any additional_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  // .diplomacy.tensorflow.decision_trees.Model model = 2;
  if (this->has_model()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *model_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelAndFeatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelAndFeatures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelAndFeatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
    MergeFrom(*source);
  }
}

void ModelAndFeatures::MergeFrom(const ModelAndFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  additional_data_.MergeFrom(from.additional_data_);
  if (from.has_model()) {
    mutable_model()->::diplomacy::tensorflow::decision_trees::Model::MergeFrom(from.model());
  }
}

void ModelAndFeatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelAndFeatures::CopyFrom(const ModelAndFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.ModelAndFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelAndFeatures::IsInitialized() const {
  return true;
}

void ModelAndFeatures::Swap(ModelAndFeatures* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModelAndFeatures* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ModelAndFeatures::UnsafeArenaSwap(ModelAndFeatures* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModelAndFeatures::InternalSwap(ModelAndFeatures* other) {
  using std::swap;
  features_.Swap(&other->features_);
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  swap(model_, other->model_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelAndFeatures::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ensemble_Member::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_Ensemble_Member_default_instance_._instance.get_mutable()->submodel_ = const_cast< ::diplomacy::tensorflow::decision_trees::Model*>(
      ::diplomacy::tensorflow::decision_trees::Model::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_Ensemble_Member_default_instance_._instance.get_mutable()->submodel_id_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Ensemble_Member::unsafe_arena_set_allocated_submodel(
    ::diplomacy::tensorflow::decision_trees::Model* submodel) {
  if (GetArenaNoVirtual() == NULL) {
    delete submodel_;
  }
  submodel_ = submodel;
  if (submodel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.Ensemble.Member.submodel)
}
void Ensemble_Member::unsafe_arena_set_allocated_submodel_id(
    ::google::protobuf::Int32Value* submodel_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete submodel_id_;
  }
  submodel_id_ = submodel_id;
  if (submodel_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.Ensemble.Member.submodel_id)
}
void Ensemble_Member::clear_submodel_id() {
  if (GetArenaNoVirtual() == NULL && submodel_id_ != NULL) {
    delete submodel_id_;
  }
  submodel_id_ = NULL;
}
void Ensemble_Member::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ensemble_Member::kSubmodelFieldNumber;
const int Ensemble_Member::kSubmodelIdFieldNumber;
const int Ensemble_Member::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ensemble_Member::Ensemble_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Ensemble.Member)
}
Ensemble_Member::Ensemble_Member(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Ensemble.Member)
}
Ensemble_Member::Ensemble_Member(const Ensemble_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submodel()) {
    submodel_ = new ::diplomacy::tensorflow::decision_trees::Model(*from.submodel_);
  } else {
    submodel_ = NULL;
  }
  if (from.has_submodel_id()) {
    submodel_id_ = new ::google::protobuf::Int32Value(*from.submodel_id_);
  } else {
    submodel_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Ensemble.Member)
}

void Ensemble_Member::SharedCtor() {
  ::memset(&submodel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submodel_id_) -
      reinterpret_cast<char*>(&submodel_)) + sizeof(submodel_id_));
}

Ensemble_Member::~Ensemble_Member() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  SharedDtor();
}

void Ensemble_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete submodel_;
  if (this != internal_default_instance()) delete submodel_id_;
}

void Ensemble_Member::ArenaDtor(void* object) {
  Ensemble_Member* _this = reinterpret_cast< Ensemble_Member* >(object);
  (void)_this;
}
void Ensemble_Member::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Ensemble_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ensemble_Member::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ensemble_Member& Ensemble_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  return *internal_default_instance();
}


void Ensemble_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  if (GetArenaNoVirtual() == NULL && submodel_ != NULL) {
    delete submodel_;
  }
  submodel_ = NULL;
  if (GetArenaNoVirtual() == NULL && submodel_id_ != NULL) {
    delete submodel_id_;
  }
  submodel_id_ = NULL;
  _internal_metadata_.Clear();
}

bool Ensemble_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.Model submodel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submodel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value submodel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submodel_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  return false;
#undef DO_
}

void Ensemble_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Model submodel = 1;
  if (this->has_submodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_submodel(), output);
  }

  // .google.protobuf.Int32Value submodel_id = 2;
  if (this->has_submodel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_submodel_id(), output);
  }

  // repeated .google.protobuf.Any additional_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Ensemble.Member)
}

::google::protobuf::uint8* Ensemble_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Model submodel = 1;
  if (this->has_submodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_submodel(), deterministic, target);
  }

  // .google.protobuf.Int32Value submodel_id = 2;
  if (this->has_submodel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_submodel_id(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  return target;
}

size_t Ensemble_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  // .diplomacy.tensorflow.decision_trees.Model submodel = 1;
  if (this->has_submodel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submodel_);
  }

  // .google.protobuf.Int32Value submodel_id = 2;
  if (this->has_submodel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submodel_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ensemble_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Ensemble_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ensemble_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Ensemble.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Ensemble.Member)
    MergeFrom(*source);
  }
}

void Ensemble_Member::MergeFrom(const Ensemble_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
  if (from.has_submodel()) {
    mutable_submodel()->::diplomacy::tensorflow::decision_trees::Model::MergeFrom(from.submodel());
  }
  if (from.has_submodel_id()) {
    mutable_submodel_id()->::google::protobuf::Int32Value::MergeFrom(from.submodel_id());
  }
}

void Ensemble_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ensemble_Member::CopyFrom(const Ensemble_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Ensemble.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ensemble_Member::IsInitialized() const {
  return true;
}

void Ensemble_Member::Swap(Ensemble_Member* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Ensemble_Member* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Ensemble_Member::UnsafeArenaSwap(Ensemble_Member* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Ensemble_Member::InternalSwap(Ensemble_Member* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  swap(submodel_, other->submodel_);
  swap(submodel_id_, other->submodel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ensemble_Member::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ensemble::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_Ensemble_default_instance_.summation_combination_technique_ = const_cast< ::diplomacy::tensorflow::decision_trees::Summation*>(
      ::diplomacy::tensorflow::decision_trees::Summation::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_Ensemble_default_instance_.averaging_combination_technique_ = const_cast< ::diplomacy::tensorflow::decision_trees::Averaging*>(
      ::diplomacy::tensorflow::decision_trees::Averaging::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_Ensemble_default_instance_.custom_combination_technique_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void Ensemble::set_allocated_summation_combination_technique(::diplomacy::tensorflow::decision_trees::Summation* summation_combination_technique) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_combination_technique();
  if (summation_combination_technique) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(summation_combination_technique);
    if (message_arena != submessage_arena) {
      summation_combination_technique = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, summation_combination_technique, submessage_arena);
    }
    set_has_summation_combination_technique();
    combination_technique_.summation_combination_technique_ = summation_combination_technique;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Ensemble.summation_combination_technique)
}
void Ensemble::set_allocated_averaging_combination_technique(::diplomacy::tensorflow::decision_trees::Averaging* averaging_combination_technique) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_combination_technique();
  if (averaging_combination_technique) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(averaging_combination_technique);
    if (message_arena != submessage_arena) {
      averaging_combination_technique = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, averaging_combination_technique, submessage_arena);
    }
    set_has_averaging_combination_technique();
    combination_technique_.averaging_combination_technique_ = averaging_combination_technique;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Ensemble.averaging_combination_technique)
}
void Ensemble::set_allocated_custom_combination_technique(::google::protobuf::Any* custom_combination_technique) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_combination_technique();
  if (custom_combination_technique) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_combination_technique = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_combination_technique, submessage_arena);
    }
    set_has_custom_combination_technique();
    combination_technique_.custom_combination_technique_ = custom_combination_technique;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Ensemble.custom_combination_technique)
}
void Ensemble::clear_custom_combination_technique() {
  if (has_custom_combination_technique()) {
    if (GetArenaNoVirtual() == NULL) {
      delete combination_technique_.custom_combination_technique_;
    }
    clear_has_combination_technique();
  }
}
void Ensemble::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ensemble::kMembersFieldNumber;
const int Ensemble::kSummationCombinationTechniqueFieldNumber;
const int Ensemble::kAveragingCombinationTechniqueFieldNumber;
const int Ensemble::kCustomCombinationTechniqueFieldNumber;
const int Ensemble::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ensemble::Ensemble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Ensemble)
}
Ensemble::Ensemble(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena),
  members_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Ensemble)
}
Ensemble::Ensemble(const Ensemble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_combination_technique();
  switch (from.combination_technique_case()) {
    case kSummationCombinationTechnique: {
      mutable_summation_combination_technique()->::diplomacy::tensorflow::decision_trees::Summation::MergeFrom(from.summation_combination_technique());
      break;
    }
    case kAveragingCombinationTechnique: {
      mutable_averaging_combination_technique()->::diplomacy::tensorflow::decision_trees::Averaging::MergeFrom(from.averaging_combination_technique());
      break;
    }
    case kCustomCombinationTechnique: {
      mutable_custom_combination_technique()->::google::protobuf::Any::MergeFrom(from.custom_combination_technique());
      break;
    }
    case COMBINATION_TECHNIQUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Ensemble)
}

void Ensemble::SharedCtor() {
  clear_has_combination_technique();
}

Ensemble::~Ensemble() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Ensemble)
  SharedDtor();
}

void Ensemble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_combination_technique()) {
    clear_combination_technique();
  }
}

void Ensemble::ArenaDtor(void* object) {
  Ensemble* _this = reinterpret_cast< Ensemble* >(object);
  (void)_this;
}
void Ensemble::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Ensemble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ensemble::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ensemble& Ensemble::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Ensemble.base);
  return *internal_default_instance();
}


void Ensemble::clear_combination_technique() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.decision_trees.Ensemble)
  switch (combination_technique_case()) {
    case kSummationCombinationTechnique: {
      if (GetArenaNoVirtual() == NULL) {
        delete combination_technique_.summation_combination_technique_;
      }
      break;
    }
    case kAveragingCombinationTechnique: {
      if (GetArenaNoVirtual() == NULL) {
        delete combination_technique_.averaging_combination_technique_;
      }
      break;
    }
    case kCustomCombinationTechnique: {
      if (GetArenaNoVirtual() == NULL) {
        delete combination_technique_.custom_combination_technique_;
      }
      break;
    }
    case COMBINATION_TECHNIQUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMBINATION_TECHNIQUE_NOT_SET;
}


void Ensemble::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Ensemble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  members_.Clear();
  clear_combination_technique();
  _internal_metadata_.Clear();
}

bool Ensemble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Ensemble)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.Summation summation_combination_technique = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summation_combination_technique()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.Averaging averaging_combination_technique = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_averaging_combination_technique()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any custom_combination_technique = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_combination_technique()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .diplomacy.tensorflow.decision_trees.Ensemble.Member members = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Ensemble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Ensemble)
  return false;
#undef DO_
}

void Ensemble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Ensemble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Summation summation_combination_technique = 1;
  if (has_summation_combination_technique()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_summation_combination_technique(), output);
  }

  // .diplomacy.tensorflow.decision_trees.Averaging averaging_combination_technique = 2;
  if (has_averaging_combination_technique()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_averaging_combination_technique(), output);
  }

  // .google.protobuf.Any custom_combination_technique = 3;
  if (has_custom_combination_technique()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_custom_combination_technique(), output);
  }

  // repeated .google.protobuf.Any additional_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  // repeated .diplomacy.tensorflow.decision_trees.Ensemble.Member members = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100,
      this->members(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Ensemble)
}

::google::protobuf::uint8* Ensemble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Ensemble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Summation summation_combination_technique = 1;
  if (has_summation_combination_technique()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_summation_combination_technique(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.Averaging averaging_combination_technique = 2;
  if (has_averaging_combination_technique()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_averaging_combination_technique(), deterministic, target);
  }

  // .google.protobuf.Any custom_combination_technique = 3;
  if (has_custom_combination_technique()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_custom_combination_technique(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .diplomacy.tensorflow.decision_trees.Ensemble.Member members = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->members(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Ensemble)
  return target;
}

size_t Ensemble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Ensemble)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  // repeated .diplomacy.tensorflow.decision_trees.Ensemble.Member members = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  switch (combination_technique_case()) {
    // .diplomacy.tensorflow.decision_trees.Summation summation_combination_technique = 1;
    case kSummationCombinationTechnique: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *combination_technique_.summation_combination_technique_);
      break;
    }
    // .diplomacy.tensorflow.decision_trees.Averaging averaging_combination_technique = 2;
    case kAveragingCombinationTechnique: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *combination_technique_.averaging_combination_technique_);
      break;
    }
    // .google.protobuf.Any custom_combination_technique = 3;
    case kCustomCombinationTechnique: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *combination_technique_.custom_combination_technique_);
      break;
    }
    case COMBINATION_TECHNIQUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ensemble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Ensemble)
  GOOGLE_DCHECK_NE(&from, this);
  const Ensemble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ensemble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Ensemble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Ensemble)
    MergeFrom(*source);
  }
}

void Ensemble::MergeFrom(const Ensemble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Ensemble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
  members_.MergeFrom(from.members_);
  switch (from.combination_technique_case()) {
    case kSummationCombinationTechnique: {
      mutable_summation_combination_technique()->::diplomacy::tensorflow::decision_trees::Summation::MergeFrom(from.summation_combination_technique());
      break;
    }
    case kAveragingCombinationTechnique: {
      mutable_averaging_combination_technique()->::diplomacy::tensorflow::decision_trees::Averaging::MergeFrom(from.averaging_combination_technique());
      break;
    }
    case kCustomCombinationTechnique: {
      mutable_custom_combination_technique()->::google::protobuf::Any::MergeFrom(from.custom_combination_technique());
      break;
    }
    case COMBINATION_TECHNIQUE_NOT_SET: {
      break;
    }
  }
}

void Ensemble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Ensemble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ensemble::CopyFrom(const Ensemble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Ensemble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ensemble::IsInitialized() const {
  return true;
}

void Ensemble::Swap(Ensemble* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Ensemble* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Ensemble::UnsafeArenaSwap(Ensemble* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Ensemble::InternalSwap(Ensemble* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  swap(combination_technique_, other->combination_technique_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ensemble::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Summation::InitAsDefaultInstance() {
}
void Summation::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Summation::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Summation::Summation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Summation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Summation)
}
Summation::Summation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Summation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Summation)
}
Summation::Summation(const Summation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Summation)
}

void Summation::SharedCtor() {
}

Summation::~Summation() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Summation)
  SharedDtor();
}

void Summation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Summation::ArenaDtor(void* object) {
  Summation* _this = reinterpret_cast< Summation* >(object);
  (void)_this;
}
void Summation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Summation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Summation::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Summation& Summation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Summation.base);
  return *internal_default_instance();
}


void Summation::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Summation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  _internal_metadata_.Clear();
}

bool Summation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Summation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.protobuf.Any additional_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Summation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Summation)
  return false;
#undef DO_
}

void Summation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Summation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any additional_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Summation)
}

::google::protobuf::uint8* Summation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Summation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any additional_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Summation)
  return target;
}

size_t Summation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Summation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Summation)
  GOOGLE_DCHECK_NE(&from, this);
  const Summation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Summation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Summation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Summation)
    MergeFrom(*source);
  }
}

void Summation::MergeFrom(const Summation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Summation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
}

void Summation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Summation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summation::CopyFrom(const Summation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Summation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summation::IsInitialized() const {
  return true;
}

void Summation::Swap(Summation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Summation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Summation::UnsafeArenaSwap(Summation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Summation::InternalSwap(Summation* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Summation::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Averaging::InitAsDefaultInstance() {
}
void Averaging::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Averaging::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Averaging::Averaging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Averaging.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Averaging)
}
Averaging::Averaging(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Averaging.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Averaging)
}
Averaging::Averaging(const Averaging& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Averaging)
}

void Averaging::SharedCtor() {
}

Averaging::~Averaging() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Averaging)
  SharedDtor();
}

void Averaging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Averaging::ArenaDtor(void* object) {
  Averaging* _this = reinterpret_cast< Averaging* >(object);
  (void)_this;
}
void Averaging::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Averaging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Averaging::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Averaging& Averaging::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Averaging.base);
  return *internal_default_instance();
}


void Averaging::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Averaging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  _internal_metadata_.Clear();
}

bool Averaging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Averaging)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.protobuf.Any additional_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Averaging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Averaging)
  return false;
#undef DO_
}

void Averaging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Averaging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any additional_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Averaging)
}

::google::protobuf::uint8* Averaging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Averaging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any additional_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Averaging)
  return target;
}

size_t Averaging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Averaging)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Averaging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Averaging)
  GOOGLE_DCHECK_NE(&from, this);
  const Averaging* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Averaging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Averaging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Averaging)
    MergeFrom(*source);
  }
}

void Averaging::MergeFrom(const Averaging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Averaging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
}

void Averaging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Averaging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Averaging::CopyFrom(const Averaging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Averaging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Averaging::IsInitialized() const {
  return true;
}

void Averaging::Swap(Averaging* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Averaging* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Averaging::UnsafeArenaSwap(Averaging* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Averaging::InternalSwap(Averaging* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Averaging::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DecisionTree::InitAsDefaultInstance() {
}
void DecisionTree::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionTree::kNodesFieldNumber;
const int DecisionTree::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionTree::DecisionTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_DecisionTree.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.DecisionTree)
}
DecisionTree::DecisionTree(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  nodes_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_DecisionTree.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.DecisionTree)
}
DecisionTree::DecisionTree(const DecisionTree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.DecisionTree)
}

void DecisionTree::SharedCtor() {
}

DecisionTree::~DecisionTree() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.DecisionTree)
  SharedDtor();
}

void DecisionTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void DecisionTree::ArenaDtor(void* object) {
  DecisionTree* _this = reinterpret_cast< DecisionTree* >(object);
  (void)_this;
}
void DecisionTree::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DecisionTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DecisionTree::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionTree& DecisionTree::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_DecisionTree.base);
  return *internal_default_instance();
}


void DecisionTree::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  additional_data_.Clear();
  _internal_metadata_.Clear();
}

bool DecisionTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.DecisionTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.DecisionTree)
  return false;
#undef DO_
}

void DecisionTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated .google.protobuf.Any additional_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.DecisionTree)
}

::google::protobuf::uint8* DecisionTree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.DecisionTree)
  return target;
}

size_t DecisionTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.decision_trees.TreeNode nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .google.protobuf.Any additional_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionTree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionTree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionTree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.DecisionTree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.DecisionTree)
    MergeFrom(*source);
  }
}

void DecisionTree::MergeFrom(const DecisionTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  additional_data_.MergeFrom(from.additional_data_);
}

void DecisionTree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionTree::CopyFrom(const DecisionTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.DecisionTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTree::IsInitialized() const {
  return true;
}

void DecisionTree::Swap(DecisionTree* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DecisionTree* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DecisionTree::UnsafeArenaSwap(DecisionTree* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DecisionTree::InternalSwap(DecisionTree* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DecisionTree::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TreeNode::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_._instance.get_mutable()->depth_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_._instance.get_mutable()->subtree_size_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_.binary_node_ = const_cast< ::diplomacy::tensorflow::decision_trees::BinaryNode*>(
      ::diplomacy::tensorflow::decision_trees::BinaryNode::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_.leaf_ = const_cast< ::diplomacy::tensorflow::decision_trees::Leaf*>(
      ::diplomacy::tensorflow::decision_trees::Leaf::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_TreeNode_default_instance_.custom_node_type_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void TreeNode::unsafe_arena_set_allocated_node_id(
    ::google::protobuf::Int32Value* node_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete node_id_;
  }
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.TreeNode.node_id)
}
void TreeNode::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
}
void TreeNode::unsafe_arena_set_allocated_depth(
    ::google::protobuf::Int32Value* depth) {
  if (GetArenaNoVirtual() == NULL) {
    delete depth_;
  }
  depth_ = depth;
  if (depth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.TreeNode.depth)
}
void TreeNode::clear_depth() {
  if (GetArenaNoVirtual() == NULL && depth_ != NULL) {
    delete depth_;
  }
  depth_ = NULL;
}
void TreeNode::unsafe_arena_set_allocated_subtree_size(
    ::google::protobuf::Int32Value* subtree_size) {
  if (GetArenaNoVirtual() == NULL) {
    delete subtree_size_;
  }
  subtree_size_ = subtree_size;
  if (subtree_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.TreeNode.subtree_size)
}
void TreeNode::clear_subtree_size() {
  if (GetArenaNoVirtual() == NULL && subtree_size_ != NULL) {
    delete subtree_size_;
  }
  subtree_size_ = NULL;
}
void TreeNode::set_allocated_binary_node(::diplomacy::tensorflow::decision_trees::BinaryNode* binary_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node_type();
  if (binary_node) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(binary_node);
    if (message_arena != submessage_arena) {
      binary_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, binary_node, submessage_arena);
    }
    set_has_binary_node();
    node_type_.binary_node_ = binary_node;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.TreeNode.binary_node)
}
void TreeNode::set_allocated_leaf(::diplomacy::tensorflow::decision_trees::Leaf* leaf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node_type();
  if (leaf) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
    node_type_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.TreeNode.leaf)
}
void TreeNode::set_allocated_custom_node_type(::google::protobuf::Any* custom_node_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_node_type();
  if (custom_node_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_node_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_node_type, submessage_arena);
    }
    set_has_custom_node_type();
    node_type_.custom_node_type_ = custom_node_type;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.TreeNode.custom_node_type)
}
void TreeNode::clear_custom_node_type() {
  if (has_custom_node_type()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_type_.custom_node_type_;
    }
    clear_has_node_type();
  }
}
void TreeNode::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kNodeIdFieldNumber;
const int TreeNode::kDepthFieldNumber;
const int TreeNode::kSubtreeSizeFieldNumber;
const int TreeNode::kBinaryNodeFieldNumber;
const int TreeNode::kLeafFieldNumber;
const int TreeNode::kCustomNodeTypeFieldNumber;
const int TreeNode::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNode::TreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_TreeNode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.TreeNode)
}
TreeNode::TreeNode(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_TreeNode.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_id()) {
    node_id_ = new ::google::protobuf::Int32Value(*from.node_id_);
  } else {
    node_id_ = NULL;
  }
  if (from.has_depth()) {
    depth_ = new ::google::protobuf::Int32Value(*from.depth_);
  } else {
    depth_ = NULL;
  }
  if (from.has_subtree_size()) {
    subtree_size_ = new ::google::protobuf::Int32Value(*from.subtree_size_);
  } else {
    subtree_size_ = NULL;
  }
  clear_has_node_type();
  switch (from.node_type_case()) {
    case kBinaryNode: {
      mutable_binary_node()->::diplomacy::tensorflow::decision_trees::BinaryNode::MergeFrom(from.binary_node());
      break;
    }
    case kLeaf: {
      mutable_leaf()->::diplomacy::tensorflow::decision_trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kCustomNodeType: {
      mutable_custom_node_type()->::google::protobuf::Any::MergeFrom(from.custom_node_type());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.TreeNode)
}

void TreeNode::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtree_size_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(subtree_size_));
  clear_has_node_type();
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete depth_;
  if (this != internal_default_instance()) delete subtree_size_;
  if (has_node_type()) {
    clear_node_type();
  }
}

void TreeNode::ArenaDtor(void* object) {
  TreeNode* _this = reinterpret_cast< TreeNode* >(object);
  (void)_this;
}
void TreeNode::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TreeNode::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeNode& TreeNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_TreeNode.base);
  return *internal_default_instance();
}


void TreeNode::clear_node_type() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.decision_trees.TreeNode)
  switch (node_type_case()) {
    case kBinaryNode: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_type_.binary_node_;
      }
      break;
    }
    case kLeaf: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_type_.leaf_;
      }
      break;
    }
    case kCustomNodeType: {
      if (GetArenaNoVirtual() == NULL) {
        delete node_type_.custom_node_type_;
      }
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_TYPE_NOT_SET;
}


void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_ != NULL) {
    delete depth_;
  }
  depth_ = NULL;
  if (GetArenaNoVirtual() == NULL && subtree_size_ != NULL) {
    delete subtree_size_;
  }
  subtree_size_ = NULL;
  clear_node_type();
  _internal_metadata_.Clear();
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.TreeNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value depth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value subtree_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subtree_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.BinaryNode binary_node = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_binary_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.Leaf leaf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any custom_node_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_node_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.TreeNode)
  return false;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value node_id = 1;
  if (this->has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_node_id(), output);
  }

  // .google.protobuf.Int32Value depth = 2;
  if (this->has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_depth(), output);
  }

  // .google.protobuf.Int32Value subtree_size = 3;
  if (this->has_subtree_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_subtree_size(), output);
  }

  // .diplomacy.tensorflow.decision_trees.BinaryNode binary_node = 4;
  if (has_binary_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_binary_node(), output);
  }

  // .diplomacy.tensorflow.decision_trees.Leaf leaf = 5;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_leaf(), output);
  }

  // .google.protobuf.Any custom_node_type = 6;
  if (has_custom_node_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_custom_node_type(), output);
  }

  // repeated .google.protobuf.Any additional_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.TreeNode)
}

::google::protobuf::uint8* TreeNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value node_id = 1;
  if (this->has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_node_id(), deterministic, target);
  }

  // .google.protobuf.Int32Value depth = 2;
  if (this->has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_depth(), deterministic, target);
  }

  // .google.protobuf.Int32Value subtree_size = 3;
  if (this->has_subtree_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_subtree_size(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.BinaryNode binary_node = 4;
  if (has_binary_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_binary_node(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.Leaf leaf = 5;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_leaf(), deterministic, target);
  }

  // .google.protobuf.Any custom_node_type = 6;
  if (has_custom_node_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_custom_node_type(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.TreeNode)
  return target;
}

size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.TreeNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Int32Value node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .google.protobuf.Int32Value depth = 2;
  if (this->has_depth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *depth_);
  }

  // .google.protobuf.Int32Value subtree_size = 3;
  if (this->has_subtree_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *subtree_size_);
  }

  switch (node_type_case()) {
    // .diplomacy.tensorflow.decision_trees.BinaryNode binary_node = 4;
    case kBinaryNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_type_.binary_node_);
      break;
    }
    // .diplomacy.tensorflow.decision_trees.Leaf leaf = 5;
    case kLeaf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_type_.leaf_);
      break;
    }
    // .google.protobuf.Any custom_node_type = 6;
    case kCustomNodeType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_type_.custom_node_type_);
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.TreeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.TreeNode)
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
  if (from.has_node_id()) {
    mutable_node_id()->::google::protobuf::Int32Value::MergeFrom(from.node_id());
  }
  if (from.has_depth()) {
    mutable_depth()->::google::protobuf::Int32Value::MergeFrom(from.depth());
  }
  if (from.has_subtree_size()) {
    mutable_subtree_size()->::google::protobuf::Int32Value::MergeFrom(from.subtree_size());
  }
  switch (from.node_type_case()) {
    case kBinaryNode: {
      mutable_binary_node()->::diplomacy::tensorflow::decision_trees::BinaryNode::MergeFrom(from.binary_node());
      break;
    }
    case kLeaf: {
      mutable_leaf()->::diplomacy::tensorflow::decision_trees::Leaf::MergeFrom(from.leaf());
      break;
    }
    case kCustomNodeType: {
      mutable_custom_node_type()->::google::protobuf::Any::MergeFrom(from.custom_node_type());
      break;
    }
    case NODE_TYPE_NOT_SET: {
      break;
    }
  }
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TreeNode* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TreeNode::UnsafeArenaSwap(TreeNode* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  swap(node_id_, other->node_id_);
  swap(depth_, other->depth_);
  swap(subtree_size_, other->subtree_size_);
  swap(node_type_, other->node_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BinaryNode::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_BinaryNode_default_instance_._instance.get_mutable()->left_child_id_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_BinaryNode_default_instance_._instance.get_mutable()->right_child_id_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_BinaryNode_default_instance_.inequality_left_child_test_ = const_cast< ::diplomacy::tensorflow::decision_trees::InequalityTest*>(
      ::diplomacy::tensorflow::decision_trees::InequalityTest::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_BinaryNode_default_instance_.custom_left_child_test_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void BinaryNode::unsafe_arena_set_allocated_left_child_id(
    ::google::protobuf::Int32Value* left_child_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete left_child_id_;
  }
  left_child_id_ = left_child_id;
  if (left_child_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.BinaryNode.left_child_id)
}
void BinaryNode::clear_left_child_id() {
  if (GetArenaNoVirtual() == NULL && left_child_id_ != NULL) {
    delete left_child_id_;
  }
  left_child_id_ = NULL;
}
void BinaryNode::unsafe_arena_set_allocated_right_child_id(
    ::google::protobuf::Int32Value* right_child_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete right_child_id_;
  }
  right_child_id_ = right_child_id;
  if (right_child_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.BinaryNode.right_child_id)
}
void BinaryNode::clear_right_child_id() {
  if (GetArenaNoVirtual() == NULL && right_child_id_ != NULL) {
    delete right_child_id_;
  }
  right_child_id_ = NULL;
}
void BinaryNode::set_allocated_inequality_left_child_test(::diplomacy::tensorflow::decision_trees::InequalityTest* inequality_left_child_test) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_left_child_test();
  if (inequality_left_child_test) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(inequality_left_child_test);
    if (message_arena != submessage_arena) {
      inequality_left_child_test = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inequality_left_child_test, submessage_arena);
    }
    set_has_inequality_left_child_test();
    left_child_test_.inequality_left_child_test_ = inequality_left_child_test;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.BinaryNode.inequality_left_child_test)
}
void BinaryNode::set_allocated_custom_left_child_test(::google::protobuf::Any* custom_left_child_test) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_left_child_test();
  if (custom_left_child_test) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_left_child_test = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_left_child_test, submessage_arena);
    }
    set_has_custom_left_child_test();
    left_child_test_.custom_left_child_test_ = custom_left_child_test;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.BinaryNode.custom_left_child_test)
}
void BinaryNode::clear_custom_left_child_test() {
  if (has_custom_left_child_test()) {
    if (GetArenaNoVirtual() == NULL) {
      delete left_child_test_.custom_left_child_test_;
    }
    clear_has_left_child_test();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinaryNode::kLeftChildIdFieldNumber;
const int BinaryNode::kRightChildIdFieldNumber;
const int BinaryNode::kDefaultDirectionFieldNumber;
const int BinaryNode::kInequalityLeftChildTestFieldNumber;
const int BinaryNode::kCustomLeftChildTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinaryNode::BinaryNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_BinaryNode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.BinaryNode)
}
BinaryNode::BinaryNode(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_BinaryNode.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.BinaryNode)
}
BinaryNode::BinaryNode(const BinaryNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_child_id()) {
    left_child_id_ = new ::google::protobuf::Int32Value(*from.left_child_id_);
  } else {
    left_child_id_ = NULL;
  }
  if (from.has_right_child_id()) {
    right_child_id_ = new ::google::protobuf::Int32Value(*from.right_child_id_);
  } else {
    right_child_id_ = NULL;
  }
  default_direction_ = from.default_direction_;
  clear_has_left_child_test();
  switch (from.left_child_test_case()) {
    case kInequalityLeftChildTest: {
      mutable_inequality_left_child_test()->::diplomacy::tensorflow::decision_trees::InequalityTest::MergeFrom(from.inequality_left_child_test());
      break;
    }
    case kCustomLeftChildTest: {
      mutable_custom_left_child_test()->::google::protobuf::Any::MergeFrom(from.custom_left_child_test());
      break;
    }
    case LEFT_CHILD_TEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.BinaryNode)
}

void BinaryNode::SharedCtor() {
  ::memset(&left_child_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_direction_) -
      reinterpret_cast<char*>(&left_child_id_)) + sizeof(default_direction_));
  clear_has_left_child_test();
}

BinaryNode::~BinaryNode() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.BinaryNode)
  SharedDtor();
}

void BinaryNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete left_child_id_;
  if (this != internal_default_instance()) delete right_child_id_;
  if (has_left_child_test()) {
    clear_left_child_test();
  }
}

void BinaryNode::ArenaDtor(void* object) {
  BinaryNode* _this = reinterpret_cast< BinaryNode* >(object);
  (void)_this;
}
void BinaryNode::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BinaryNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BinaryNode::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BinaryNode& BinaryNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_BinaryNode.base);
  return *internal_default_instance();
}


void BinaryNode::clear_left_child_test() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  switch (left_child_test_case()) {
    case kInequalityLeftChildTest: {
      if (GetArenaNoVirtual() == NULL) {
        delete left_child_test_.inequality_left_child_test_;
      }
      break;
    }
    case kCustomLeftChildTest: {
      if (GetArenaNoVirtual() == NULL) {
        delete left_child_test_.custom_left_child_test_;
      }
      break;
    }
    case LEFT_CHILD_TEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEFT_CHILD_TEST_NOT_SET;
}


void BinaryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && left_child_id_ != NULL) {
    delete left_child_id_;
  }
  left_child_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_child_id_ != NULL) {
    delete right_child_id_;
  }
  right_child_id_ = NULL;
  default_direction_ = 0;
  clear_left_child_test();
  _internal_metadata_.Clear();
}

bool BinaryNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int32Value left_child_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_child_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value right_child_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_child_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.BinaryNode.Direction default_direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_default_direction(static_cast< ::diplomacy::tensorflow::decision_trees::BinaryNode_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.InequalityTest inequality_left_child_test = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inequality_left_child_test()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any custom_left_child_test = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_left_child_test()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.BinaryNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.BinaryNode)
  return false;
#undef DO_
}

void BinaryNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value left_child_id = 1;
  if (this->has_left_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_left_child_id(), output);
  }

  // .google.protobuf.Int32Value right_child_id = 2;
  if (this->has_right_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_right_child_id(), output);
  }

  // .diplomacy.tensorflow.decision_trees.BinaryNode.Direction default_direction = 3;
  if (this->default_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->default_direction(), output);
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest inequality_left_child_test = 4;
  if (has_inequality_left_child_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_inequality_left_child_test(), output);
  }

  // .google.protobuf.Any custom_left_child_test = 5;
  if (has_custom_left_child_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_custom_left_child_test(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.BinaryNode)
}

::google::protobuf::uint8* BinaryNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value left_child_id = 1;
  if (this->has_left_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_left_child_id(), deterministic, target);
  }

  // .google.protobuf.Int32Value right_child_id = 2;
  if (this->has_right_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_right_child_id(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.BinaryNode.Direction default_direction = 3;
  if (this->default_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->default_direction(), target);
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest inequality_left_child_test = 4;
  if (has_inequality_left_child_test()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_inequality_left_child_test(), deterministic, target);
  }

  // .google.protobuf.Any custom_left_child_test = 5;
  if (has_custom_left_child_test()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_custom_left_child_test(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.BinaryNode)
  return target;
}

size_t BinaryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value left_child_id = 1;
  if (this->has_left_child_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *left_child_id_);
  }

  // .google.protobuf.Int32Value right_child_id = 2;
  if (this->has_right_child_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *right_child_id_);
  }

  // .diplomacy.tensorflow.decision_trees.BinaryNode.Direction default_direction = 3;
  if (this->default_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->default_direction());
  }

  switch (left_child_test_case()) {
    // .diplomacy.tensorflow.decision_trees.InequalityTest inequality_left_child_test = 4;
    case kInequalityLeftChildTest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_child_test_.inequality_left_child_test_);
      break;
    }
    // .google.protobuf.Any custom_left_child_test = 5;
    case kCustomLeftChildTest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_child_test_.custom_left_child_test_);
      break;
    }
    case LEFT_CHILD_TEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BinaryNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.BinaryNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.BinaryNode)
    MergeFrom(*source);
  }
}

void BinaryNode::MergeFrom(const BinaryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left_child_id()) {
    mutable_left_child_id()->::google::protobuf::Int32Value::MergeFrom(from.left_child_id());
  }
  if (from.has_right_child_id()) {
    mutable_right_child_id()->::google::protobuf::Int32Value::MergeFrom(from.right_child_id());
  }
  if (from.default_direction() != 0) {
    set_default_direction(from.default_direction());
  }
  switch (from.left_child_test_case()) {
    case kInequalityLeftChildTest: {
      mutable_inequality_left_child_test()->::diplomacy::tensorflow::decision_trees::InequalityTest::MergeFrom(from.inequality_left_child_test());
      break;
    }
    case kCustomLeftChildTest: {
      mutable_custom_left_child_test()->::google::protobuf::Any::MergeFrom(from.custom_left_child_test());
      break;
    }
    case LEFT_CHILD_TEST_NOT_SET: {
      break;
    }
  }
}

void BinaryNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryNode::CopyFrom(const BinaryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.BinaryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryNode::IsInitialized() const {
  return true;
}

void BinaryNode::Swap(BinaryNode* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BinaryNode* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BinaryNode::UnsafeArenaSwap(BinaryNode* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BinaryNode::InternalSwap(BinaryNode* other) {
  using std::swap;
  swap(left_child_id_, other->left_child_id_);
  swap(right_child_id_, other->right_child_id_);
  swap(default_direction_, other->default_direction_);
  swap(left_child_test_, other->left_child_test_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BinaryNode::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SparseVector_SparseValueEntry_DoNotUse::SparseVector_SparseValueEntry_DoNotUse() {}
SparseVector_SparseValueEntry_DoNotUse::SparseVector_SparseValueEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SparseVector_SparseValueEntry_DoNotUse::MergeFrom(const SparseVector_SparseValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SparseVector_SparseValueEntry_DoNotUse::GetMetadata() const {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[11];
}
void SparseVector_SparseValueEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SparseVector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseVector::kSparseValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseVector::SparseVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_SparseVector.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.SparseVector)
}
SparseVector::SparseVector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sparse_value_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_SparseVector.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.SparseVector)
}
SparseVector::SparseVector(const SparseVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sparse_value_.MergeFrom(from.sparse_value_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.SparseVector)
}

void SparseVector::SharedCtor() {
}

SparseVector::~SparseVector() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.SparseVector)
  SharedDtor();
}

void SparseVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SparseVector::ArenaDtor(void* object) {
  SparseVector* _this = reinterpret_cast< SparseVector* >(object);
  (void)_this;
}
void SparseVector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SparseVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SparseVector::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SparseVector& SparseVector::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_SparseVector.base);
  return *internal_default_instance();
}


void SparseVector::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sparse_value_.Clear();
  _internal_metadata_.Clear();
}

bool SparseVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.SparseVector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .diplomacy.tensorflow.decision_trees.Value> sparse_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          SparseVector_SparseValueEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SparseVector_SparseValueEntry_DoNotUse,
              ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value > > parser(&sparse_value_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.SparseVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.SparseVector)
  return false;
#undef DO_
}

void SparseVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .diplomacy.tensorflow.decision_trees.Value> sparse_value = 1;
  if (!this->sparse_value().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->sparse_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sparse_value().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::const_iterator
          it = this->sparse_value().begin();
          it != this->sparse_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SparseVector_SparseValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sparse_value_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::std::unique_ptr<SparseVector_SparseValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::const_iterator
          it = this->sparse_value().begin();
          it != this->sparse_value().end(); ++it) {
        entry.reset(sparse_value_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.SparseVector)
}

::google::protobuf::uint8* SparseVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.SparseVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .diplomacy.tensorflow.decision_trees.Value> sparse_value = 1;
  if (!this->sparse_value().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->sparse_value().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sparse_value().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::const_iterator
          it = this->sparse_value().begin();
          it != this->sparse_value().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SparseVector_SparseValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sparse_value_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    } else {
      ::std::unique_ptr<SparseVector_SparseValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::const_iterator
          it = this->sparse_value().begin();
          it != this->sparse_value().end(); ++it) {
        entry.reset(sparse_value_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.SparseVector)
  return target;
}

size_t SparseVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.SparseVector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<int64, .diplomacy.tensorflow.decision_trees.Value> sparse_value = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sparse_value_size());
  {
    ::std::unique_ptr<SparseVector_SparseValueEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::diplomacy::tensorflow::decision_trees::Value >::const_iterator
        it = this->sparse_value().begin();
        it != this->sparse_value().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(sparse_value_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.SparseVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.SparseVector)
    MergeFrom(*source);
  }
}

void SparseVector::MergeFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.SparseVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sparse_value_.MergeFrom(from.sparse_value_);
}

void SparseVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseVector::CopyFrom(const SparseVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.SparseVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseVector::IsInitialized() const {
  return true;
}

void SparseVector::Swap(SparseVector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SparseVector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SparseVector::UnsafeArenaSwap(SparseVector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SparseVector::InternalSwap(SparseVector* other) {
  using std::swap;
  sparse_value_.Swap(&other->sparse_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SparseVector::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Vector.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Vector)
}
Vector::Vector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Vector.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Vector)
}
Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Vector)
}

void Vector::SharedCtor() {
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector& Vector::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Vector.base);
  return *internal_default_instance();
}


void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Vector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .diplomacy.tensorflow.decision_trees.Value value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.Value value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->value(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Vector)
}

::google::protobuf::uint8* Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.Value value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->value(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Vector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.decision_trees.Value value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Vector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Vector::UnsafeArenaSwap(Vector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  using std::swap;
  CastToBase(&value_)->InternalSwap(CastToBase(&other->value_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Leaf::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_Leaf_default_instance_.vector_ = const_cast< ::diplomacy::tensorflow::decision_trees::Vector*>(
      ::diplomacy::tensorflow::decision_trees::Vector::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_Leaf_default_instance_.sparse_vector_ = const_cast< ::diplomacy::tensorflow::decision_trees::SparseVector*>(
      ::diplomacy::tensorflow::decision_trees::SparseVector::internal_default_instance());
}
void Leaf::set_allocated_vector(::diplomacy::tensorflow::decision_trees::Vector* vector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf();
  if (vector) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Leaf.vector)
}
void Leaf::set_allocated_sparse_vector(::diplomacy::tensorflow::decision_trees::SparseVector* sparse_vector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_leaf();
  if (sparse_vector) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(sparse_vector);
    if (message_arena != submessage_arena) {
      sparse_vector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sparse_vector, submessage_arena);
    }
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Leaf.sparse_vector)
}
void Leaf::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaf::kVectorFieldNumber;
const int Leaf::kSparseVectorFieldNumber;
const int Leaf::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaf::Leaf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Leaf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Leaf)
}
Leaf::Leaf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Leaf.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Leaf)
}
Leaf::Leaf(const Leaf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_leaf();
  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::diplomacy::tensorflow::decision_trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::diplomacy::tensorflow::decision_trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Leaf)
}

void Leaf::SharedCtor() {
  clear_has_leaf();
}

Leaf::~Leaf() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Leaf)
  SharedDtor();
}

void Leaf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_leaf()) {
    clear_leaf();
  }
}

void Leaf::ArenaDtor(void* object) {
  Leaf* _this = reinterpret_cast< Leaf* >(object);
  (void)_this;
}
void Leaf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Leaf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Leaf::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Leaf& Leaf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Leaf.base);
  return *internal_default_instance();
}


void Leaf::clear_leaf() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.decision_trees.Leaf)
  switch (leaf_case()) {
    case kVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.vector_;
      }
      break;
    }
    case kSparseVector: {
      if (GetArenaNoVirtual() == NULL) {
        delete leaf_.sparse_vector_;
      }
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEAF_NOT_SET;
}


void Leaf::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  clear_leaf();
  _internal_metadata_.Clear();
}

bool Leaf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Leaf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.Vector vector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.SparseVector sparse_vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sparse_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Leaf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Leaf)
  return false;
#undef DO_
}

void Leaf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Vector vector = 1;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_vector(), output);
  }

  // .diplomacy.tensorflow.decision_trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sparse_vector(), output);
  }

  // repeated .google.protobuf.Any additional_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Leaf)
}

::google::protobuf::uint8* Leaf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Leaf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.Vector vector = 1;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_vector(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.SparseVector sparse_vector = 2;
  if (has_sparse_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sparse_vector(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Leaf)
  return target;
}

size_t Leaf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Leaf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  switch (leaf_case()) {
    // .diplomacy.tensorflow.decision_trees.Vector vector = 1;
    case kVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaf_.vector_);
      break;
    }
    // .diplomacy.tensorflow.decision_trees.SparseVector sparse_vector = 2;
    case kSparseVector: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaf_.sparse_vector_);
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Leaf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Leaf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Leaf)
    MergeFrom(*source);
  }
}

void Leaf::MergeFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Leaf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
  switch (from.leaf_case()) {
    case kVector: {
      mutable_vector()->::diplomacy::tensorflow::decision_trees::Vector::MergeFrom(from.vector());
      break;
    }
    case kSparseVector: {
      mutable_sparse_vector()->::diplomacy::tensorflow::decision_trees::SparseVector::MergeFrom(from.sparse_vector());
      break;
    }
    case LEAF_NOT_SET: {
      break;
    }
  }
}

void Leaf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaf::CopyFrom(const Leaf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Leaf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaf::IsInitialized() const {
  return true;
}

void Leaf::Swap(Leaf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Leaf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Leaf::UnsafeArenaSwap(Leaf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Leaf::InternalSwap(Leaf* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  swap(leaf_, other->leaf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Leaf::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FeatureId::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_FeatureId_default_instance_._instance.get_mutable()->id_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void FeatureId::unsafe_arena_set_allocated_id(
    ::google::protobuf::StringValue* id) {
  if (GetArenaNoVirtual() == NULL) {
    delete id_;
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.FeatureId.id)
}
void FeatureId::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void FeatureId::clear_additional_data() {
  additional_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureId::kIdFieldNumber;
const int FeatureId::kAdditionalDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureId::FeatureId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_FeatureId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.FeatureId)
}
FeatureId::FeatureId(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  additional_data_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_FeatureId.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.FeatureId)
}
FeatureId::FeatureId(const FeatureId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      additional_data_(from.additional_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::google::protobuf::StringValue(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.FeatureId)
}

void FeatureId::SharedCtor() {
  id_ = NULL;
}

FeatureId::~FeatureId() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.FeatureId)
  SharedDtor();
}

void FeatureId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete id_;
}

void FeatureId::ArenaDtor(void* object) {
  FeatureId* _this = reinterpret_cast< FeatureId* >(object);
  (void)_this;
}
void FeatureId::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void FeatureId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FeatureId::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureId& FeatureId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_FeatureId.base);
  return *internal_default_instance();
}


void FeatureId::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.FeatureId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_data_.Clear();
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  _internal_metadata_.Clear();
}

bool FeatureId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.FeatureId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.StringValue id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any additional_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_additional_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.FeatureId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.FeatureId)
  return false;
#undef DO_
}

void FeatureId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.FeatureId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .google.protobuf.Any additional_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->additional_data(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.FeatureId)
}

::google::protobuf::uint8* FeatureId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.FeatureId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .google.protobuf.Any additional_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->additional_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->additional_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.FeatureId)
  return target;
}

size_t FeatureId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.FeatureId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any additional_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->additional_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->additional_data(static_cast<int>(i)));
    }
  }

  // .google.protobuf.StringValue id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.FeatureId)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.FeatureId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.FeatureId)
    MergeFrom(*source);
  }
}

void FeatureId::MergeFrom(const FeatureId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.FeatureId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_data_.MergeFrom(from.additional_data_);
  if (from.has_id()) {
    mutable_id()->::google::protobuf::StringValue::MergeFrom(from.id());
  }
}

void FeatureId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.FeatureId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureId::CopyFrom(const FeatureId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.FeatureId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureId::IsInitialized() const {
  return true;
}

void FeatureId::Swap(FeatureId* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FeatureId* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void FeatureId::UnsafeArenaSwap(FeatureId* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FeatureId::InternalSwap(FeatureId* other) {
  using std::swap;
  CastToBase(&additional_data_)->InternalSwap(CastToBase(&other->additional_data_));
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FeatureId::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObliqueFeatures::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObliqueFeatures::kFeaturesFieldNumber;
const int ObliqueFeatures::kWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObliqueFeatures::ObliqueFeatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ObliqueFeatures.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
}
ObliqueFeatures::ObliqueFeatures(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  features_(arena),
  weights_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ObliqueFeatures.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
}
ObliqueFeatures::ObliqueFeatures(const ObliqueFeatures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      features_(from.features_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
}

void ObliqueFeatures::SharedCtor() {
}

ObliqueFeatures::~ObliqueFeatures() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  SharedDtor();
}

void ObliqueFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ObliqueFeatures::ArenaDtor(void* object) {
  ObliqueFeatures* _this = reinterpret_cast< ObliqueFeatures* >(object);
  (void)_this;
}
void ObliqueFeatures::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ObliqueFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObliqueFeatures::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObliqueFeatures& ObliqueFeatures::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_ObliqueFeatures.base);
  return *internal_default_instance();
}


void ObliqueFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  weights_.Clear();
  _internal_metadata_.Clear();
}

bool ObliqueFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .diplomacy.tensorflow.decision_trees.FeatureId features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  return false;
#undef DO_
}

void ObliqueFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.FeatureId features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->features(static_cast<int>(i)),
      output);
  }

  // repeated float weights = 2;
  if (this->weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _weights_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->weights().data(), this->weights_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
}

::google::protobuf::uint8* ObliqueFeatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .diplomacy.tensorflow.decision_trees.FeatureId features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->features(static_cast<int>(i)), deterministic, target);
  }

  // repeated float weights = 2;
  if (this->weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _weights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->weights_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  return target;
}

size_t ObliqueFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.decision_trees.FeatureId features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->features(static_cast<int>(i)));
    }
  }

  // repeated float weights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->weights_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObliqueFeatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const ObliqueFeatures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObliqueFeatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
    MergeFrom(*source);
  }
}

void ObliqueFeatures::MergeFrom(const ObliqueFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  weights_.MergeFrom(from.weights_);
}

void ObliqueFeatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObliqueFeatures::CopyFrom(const ObliqueFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.ObliqueFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObliqueFeatures::IsInitialized() const {
  return true;
}

void ObliqueFeatures::Swap(ObliqueFeatures* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ObliqueFeatures* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ObliqueFeatures::UnsafeArenaSwap(ObliqueFeatures* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ObliqueFeatures::InternalSwap(ObliqueFeatures* other) {
  using std::swap;
  CastToBase(&features_)->InternalSwap(CastToBase(&other->features_));
  weights_.InternalSwap(&other->weights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObliqueFeatures::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InequalityTest::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_InequalityTest_default_instance_.feature_id_ = const_cast< ::diplomacy::tensorflow::decision_trees::FeatureId*>(
      ::diplomacy::tensorflow::decision_trees::FeatureId::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_InequalityTest_default_instance_.oblique_ = const_cast< ::diplomacy::tensorflow::decision_trees::ObliqueFeatures*>(
      ::diplomacy::tensorflow::decision_trees::ObliqueFeatures::internal_default_instance());
  ::diplomacy::tensorflow::decision_trees::_InequalityTest_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::diplomacy::tensorflow::decision_trees::Value*>(
      ::diplomacy::tensorflow::decision_trees::Value::internal_default_instance());
}
void InequalityTest::set_allocated_feature_id(::diplomacy::tensorflow::decision_trees::FeatureId* feature_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_FeatureSum();
  if (feature_id) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(feature_id);
    if (message_arena != submessage_arena) {
      feature_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feature_id, submessage_arena);
    }
    set_has_feature_id();
    FeatureSum_.feature_id_ = feature_id;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.InequalityTest.feature_id)
}
void InequalityTest::set_allocated_oblique(::diplomacy::tensorflow::decision_trees::ObliqueFeatures* oblique) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_FeatureSum();
  if (oblique) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(oblique);
    if (message_arena != submessage_arena) {
      oblique = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oblique, submessage_arena);
    }
    set_has_oblique();
    FeatureSum_.oblique_ = oblique;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.InequalityTest.oblique)
}
void InequalityTest::unsafe_arena_set_allocated_threshold(
    ::diplomacy::tensorflow::decision_trees::Value* threshold) {
  if (GetArenaNoVirtual() == NULL) {
    delete threshold_;
  }
  threshold_ = threshold;
  if (threshold) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.decision_trees.InequalityTest.threshold)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InequalityTest::kFeatureIdFieldNumber;
const int InequalityTest::kObliqueFieldNumber;
const int InequalityTest::kTypeFieldNumber;
const int InequalityTest::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InequalityTest::InequalityTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_InequalityTest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.InequalityTest)
}
InequalityTest::InequalityTest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_InequalityTest.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.InequalityTest)
}
InequalityTest::InequalityTest(const InequalityTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_threshold()) {
    threshold_ = new ::diplomacy::tensorflow::decision_trees::Value(*from.threshold_);
  } else {
    threshold_ = NULL;
  }
  type_ = from.type_;
  clear_has_FeatureSum();
  switch (from.FeatureSum_case()) {
    case kFeatureId: {
      mutable_feature_id()->::diplomacy::tensorflow::decision_trees::FeatureId::MergeFrom(from.feature_id());
      break;
    }
    case kOblique: {
      mutable_oblique()->::diplomacy::tensorflow::decision_trees::ObliqueFeatures::MergeFrom(from.oblique());
      break;
    }
    case FEATURESUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.InequalityTest)
}

void InequalityTest::SharedCtor() {
  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(type_));
  clear_has_FeatureSum();
}

InequalityTest::~InequalityTest() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.InequalityTest)
  SharedDtor();
}

void InequalityTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete threshold_;
  if (has_FeatureSum()) {
    clear_FeatureSum();
  }
}

void InequalityTest::ArenaDtor(void* object) {
  InequalityTest* _this = reinterpret_cast< InequalityTest* >(object);
  (void)_this;
}
void InequalityTest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InequalityTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InequalityTest::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InequalityTest& InequalityTest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_InequalityTest.base);
  return *internal_default_instance();
}


void InequalityTest::clear_FeatureSum() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  switch (FeatureSum_case()) {
    case kFeatureId: {
      if (GetArenaNoVirtual() == NULL) {
        delete FeatureSum_.feature_id_;
      }
      break;
    }
    case kOblique: {
      if (GetArenaNoVirtual() == NULL) {
        delete FeatureSum_.oblique_;
      }
      break;
    }
    case FEATURESUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURESUM_NOT_SET;
}


void InequalityTest::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && threshold_ != NULL) {
    delete threshold_;
  }
  threshold_ = NULL;
  type_ = 0;
  clear_FeatureSum();
  _internal_metadata_.Clear();
}

bool InequalityTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.InequalityTest.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::diplomacy::tensorflow::decision_trees::InequalityTest_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.Value threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.decision_trees.ObliqueFeatures oblique = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oblique()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.InequalityTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.InequalityTest)
  return false;
#undef DO_
}

void InequalityTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1;
  if (has_feature_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_feature_id(), output);
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .diplomacy.tensorflow.decision_trees.Value threshold = 3;
  if (this->has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_threshold(), output);
  }

  // .diplomacy.tensorflow.decision_trees.ObliqueFeatures oblique = 4;
  if (has_oblique()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_oblique(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.InequalityTest)
}

::google::protobuf::uint8* InequalityTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1;
  if (has_feature_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_feature_id(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .diplomacy.tensorflow.decision_trees.Value threshold = 3;
  if (this->has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_threshold(), deterministic, target);
  }

  // .diplomacy.tensorflow.decision_trees.ObliqueFeatures oblique = 4;
  if (has_oblique()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_oblique(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.InequalityTest)
  return target;
}

size_t InequalityTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .diplomacy.tensorflow.decision_trees.Value threshold = 3;
  if (this->has_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *threshold_);
  }

  // .diplomacy.tensorflow.decision_trees.InequalityTest.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (FeatureSum_case()) {
    // .diplomacy.tensorflow.decision_trees.FeatureId feature_id = 1;
    case kFeatureId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *FeatureSum_.feature_id_);
      break;
    }
    // .diplomacy.tensorflow.decision_trees.ObliqueFeatures oblique = 4;
    case kOblique: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *FeatureSum_.oblique_);
      break;
    }
    case FEATURESUM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InequalityTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  GOOGLE_DCHECK_NE(&from, this);
  const InequalityTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InequalityTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.InequalityTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.InequalityTest)
    MergeFrom(*source);
  }
}

void InequalityTest::MergeFrom(const InequalityTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_threshold()) {
    mutable_threshold()->::diplomacy::tensorflow::decision_trees::Value::MergeFrom(from.threshold());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.FeatureSum_case()) {
    case kFeatureId: {
      mutable_feature_id()->::diplomacy::tensorflow::decision_trees::FeatureId::MergeFrom(from.feature_id());
      break;
    }
    case kOblique: {
      mutable_oblique()->::diplomacy::tensorflow::decision_trees::ObliqueFeatures::MergeFrom(from.oblique());
      break;
    }
    case FEATURESUM_NOT_SET: {
      break;
    }
  }
}

void InequalityTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InequalityTest::CopyFrom(const InequalityTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.InequalityTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InequalityTest::IsInitialized() const {
  return true;
}

void InequalityTest::Swap(InequalityTest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InequalityTest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InequalityTest::UnsafeArenaSwap(InequalityTest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InequalityTest::InternalSwap(InequalityTest* other) {
  using std::swap;
  swap(threshold_, other->threshold_);
  swap(type_, other->type_);
  swap(FeatureSum_, other->FeatureSum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InequalityTest::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::decision_trees::_Value_default_instance_.float_value_ = 0;
  ::diplomacy::tensorflow::decision_trees::_Value_default_instance_.double_value_ = 0;
  ::diplomacy::tensorflow::decision_trees::_Value_default_instance_.int32_value_ = 0;
  ::diplomacy::tensorflow::decision_trees::_Value_default_instance_.int64_value_ = GOOGLE_LONGLONG(0);
  ::diplomacy::tensorflow::decision_trees::_Value_default_instance_.custom_value_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void Value::set_allocated_custom_value(::google::protobuf::Any* custom_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (custom_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      custom_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_value, submessage_arena);
    }
    set_has_custom_value();
    value_.custom_value_ = custom_value;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.decision_trees.Value.custom_value)
}
void Value::clear_custom_value() {
  if (has_custom_value()) {
    if (GetArenaNoVirtual() == NULL) {
      delete value_.custom_value_;
    }
    clear_has_value();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kFloatValueFieldNumber;
const int Value::kDoubleValueFieldNumber;
const int Value::kInt32ValueFieldNumber;
const int Value::kInt64ValueFieldNumber;
const int Value::kCustomValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Value.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.decision_trees.Value)
}
Value::Value(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Value.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.decision_trees.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kInt32Value: {
      set_int32_value(from.int32_value());
      break;
    }
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kCustomValue: {
      mutable_custom_value()->::google::protobuf::Any::MergeFrom(from.custom_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.decision_trees.Value)
}

void Value::SharedCtor() {
  clear_has_value();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.decision_trees.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_value()) {
    clear_value();
  }
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value& Value::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::scc_info_Value.base);
  return *internal_default_instance();
}


void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.decision_trees.Value)
  switch (value_case()) {
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kCustomValue: {
      if (GetArenaNoVirtual() == NULL) {
        delete value_.custom_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.decision_trees.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.decision_trees.Value)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float float_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int32_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int64_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any custom_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.decision_trees.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.decision_trees.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.decision_trees.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float float_value = 1;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->float_value(), output);
  }

  // double double_value = 2;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->double_value(), output);
  }

  // int32 int32_value = 3;
  if (has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
  }

  // int64 int64_value = 4;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int64_value(), output);
  }

  // .google.protobuf.Any custom_value = 5;
  if (has_custom_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_custom_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.decision_trees.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.decision_trees.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float float_value = 1;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->float_value(), target);
  }

  // double double_value = 2;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->double_value(), target);
  }

  // int32 int32_value = 3;
  if (has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32_value(), target);
  }

  // int64 int64_value = 4;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int64_value(), target);
  }

  // .google.protobuf.Any custom_value = 5;
  if (has_custom_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_custom_value(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.decision_trees.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.decision_trees.Value)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (value_case()) {
    // float float_value = 1;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // int32 int32_value = 3;
    case kInt32Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
      break;
    }
    // int64 int64_value = 4;
    case kInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
      break;
    }
    // .google.protobuf.Any custom_value = 5;
    case kCustomValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.custom_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.decision_trees.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.decision_trees.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.decision_trees.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.decision_trees.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kInt32Value: {
      set_int32_value(from.int32_value());
      break;
    }
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kCustomValue: {
      mutable_custom_value()->::google::protobuf::Any::MergeFrom(from.custom_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.decision_trees.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.decision_trees.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Value* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Value::UnsafeArenaSwap(Value* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fdecision_5ftrees_2fproto_2fgeneric_5ftree_5fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace decision_trees
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Model* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Model >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_Feature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::ModelAndFeatures_FeaturesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::ModelAndFeatures* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::ModelAndFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::ModelAndFeatures >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Ensemble_Member* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Ensemble_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Ensemble_Member >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Ensemble* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Ensemble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Ensemble >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Summation* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Summation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Summation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Averaging* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Averaging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Averaging >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::DecisionTree* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::DecisionTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::DecisionTree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::TreeNode* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::TreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::TreeNode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::BinaryNode* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::BinaryNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::BinaryNode >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::SparseVector_SparseValueEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::SparseVector* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::SparseVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::SparseVector >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Vector* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Vector >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Leaf* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Leaf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Leaf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::FeatureId* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::FeatureId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::FeatureId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::ObliqueFeatures* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::ObliqueFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::ObliqueFeatures >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::InequalityTest* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::InequalityTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::InequalityTest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::decision_trees::Value* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::decision_trees::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::decision_trees::Value >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
