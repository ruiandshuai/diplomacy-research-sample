// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/mpi_collectives/mpi_message.proto

#ifndef PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto
#define PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "diplomacy_tensorflow/core/framework/tensor_shape.pb.h"
#include "diplomacy_tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto 

namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto
namespace diplomacy {
namespace tensorflow {
namespace contrib {
namespace mpi_collectives {
class MPIRequest;
class MPIRequestDefaultTypeInternal;
extern MPIRequestDefaultTypeInternal _MPIRequest_default_instance_;
class MPIResponse;
class MPIResponseDefaultTypeInternal;
extern MPIResponseDefaultTypeInternal _MPIResponse_default_instance_;
}  // namespace mpi_collectives
}  // namespace contrib
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest* Arena::CreateMaybeMessage<::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest>(Arena*);
template<> ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse* Arena::CreateMaybeMessage<::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace diplomacy {
namespace tensorflow {
namespace contrib {
namespace mpi_collectives {

enum MPIRequest_RequestType {
  MPIRequest_RequestType_ALLREDUCE = 0,
  MPIRequest_RequestType_ALLGATHER = 1,
  MPIRequest_RequestType_MPIRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MPIRequest_RequestType_MPIRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MPIRequest_RequestType_IsValid(int value);
const MPIRequest_RequestType MPIRequest_RequestType_RequestType_MIN = MPIRequest_RequestType_ALLREDUCE;
const MPIRequest_RequestType MPIRequest_RequestType_RequestType_MAX = MPIRequest_RequestType_ALLGATHER;
const int MPIRequest_RequestType_RequestType_ARRAYSIZE = MPIRequest_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MPIRequest_RequestType_descriptor();
inline const ::std::string& MPIRequest_RequestType_Name(MPIRequest_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MPIRequest_RequestType_descriptor(), value);
}
inline bool MPIRequest_RequestType_Parse(
    const ::std::string& name, MPIRequest_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MPIRequest_RequestType>(
    MPIRequest_RequestType_descriptor(), name, value);
}
enum MPIResponse_ResponseType {
  MPIResponse_ResponseType_ALLREDUCE = 0,
  MPIResponse_ResponseType_ALLGATHER = 1,
  MPIResponse_ResponseType_ERROR = 2,
  MPIResponse_ResponseType_DONE = 3,
  MPIResponse_ResponseType_SHUTDOWN = 4,
  MPIResponse_ResponseType_MPIResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MPIResponse_ResponseType_MPIResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MPIResponse_ResponseType_IsValid(int value);
const MPIResponse_ResponseType MPIResponse_ResponseType_ResponseType_MIN = MPIResponse_ResponseType_ALLREDUCE;
const MPIResponse_ResponseType MPIResponse_ResponseType_ResponseType_MAX = MPIResponse_ResponseType_SHUTDOWN;
const int MPIResponse_ResponseType_ResponseType_ARRAYSIZE = MPIResponse_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MPIResponse_ResponseType_descriptor();
inline const ::std::string& MPIResponse_ResponseType_Name(MPIResponse_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MPIResponse_ResponseType_descriptor(), value);
}
inline bool MPIResponse_ResponseType_Parse(
    const ::std::string& name, MPIResponse_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MPIResponse_ResponseType>(
    MPIResponse_ResponseType_descriptor(), name, value);
}
// ===================================================================

class MPIRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest) */ {
 public:
  MPIRequest();
  virtual ~MPIRequest();

  MPIRequest(const MPIRequest& from);

  inline MPIRequest& operator=(const MPIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MPIRequest(MPIRequest&& from) noexcept
    : MPIRequest() {
    *this = ::std::move(from);
  }

  inline MPIRequest& operator=(MPIRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MPIRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPIRequest* internal_default_instance() {
    return reinterpret_cast<const MPIRequest*>(
               &_MPIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MPIRequest* other);
  friend void swap(MPIRequest& a, MPIRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MPIRequest* New() const final {
    return CreateMaybeMessage<MPIRequest>(NULL);
  }

  MPIRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MPIRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MPIRequest& from);
  void MergeFrom(const MPIRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPIRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MPIRequest_RequestType RequestType;
  static const RequestType ALLREDUCE =
    MPIRequest_RequestType_ALLREDUCE;
  static const RequestType ALLGATHER =
    MPIRequest_RequestType_ALLGATHER;
  static inline bool RequestType_IsValid(int value) {
    return MPIRequest_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    MPIRequest_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    MPIRequest_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    MPIRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return MPIRequest_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return MPIRequest_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return MPIRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string tensor_name = 4;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 4;
  const ::std::string& tensor_name() const;
  void set_tensor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tensor_name(::std::string&& value);
  #endif
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  ::std::string* mutable_tensor_name();
  ::std::string* release_tensor_name();
  void set_allocated_tensor_name(::std::string* tensor_name);

  // .diplomacy.tensorflow.TensorShapeProto tensor_shape = 5;
  bool has_tensor_shape() const;
  void clear_tensor_shape();
  static const int kTensorShapeFieldNumber = 5;
  private:
  const ::diplomacy::tensorflow::TensorShapeProto& _internal_tensor_shape() const;
  public:
  const ::diplomacy::tensorflow::TensorShapeProto& tensor_shape() const;
  ::diplomacy::tensorflow::TensorShapeProto* release_tensor_shape();
  ::diplomacy::tensorflow::TensorShapeProto* mutable_tensor_shape();
  void set_allocated_tensor_shape(::diplomacy::tensorflow::TensorShapeProto* tensor_shape);

  // int32 request_rank = 1;
  void clear_request_rank();
  static const int kRequestRankFieldNumber = 1;
  ::google::protobuf::int32 request_rank() const;
  void set_request_rank(::google::protobuf::int32 value);

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.RequestType request_type = 2;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 2;
  ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType request_type() const;
  void set_request_type(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType value);

  // .diplomacy.tensorflow.DataType tensor_type = 3;
  void clear_tensor_type();
  static const int kTensorTypeFieldNumber = 3;
  ::diplomacy::tensorflow::DataType tensor_type() const;
  void set_tensor_type(::diplomacy::tensorflow::DataType value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tensor_name_;
  ::diplomacy::tensorflow::TensorShapeProto* tensor_shape_;
  ::google::protobuf::int32 request_rank_;
  int request_type_;
  int tensor_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MPIResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse) */ {
 public:
  MPIResponse();
  virtual ~MPIResponse();

  MPIResponse(const MPIResponse& from);

  inline MPIResponse& operator=(const MPIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MPIResponse(MPIResponse&& from) noexcept
    : MPIResponse() {
    *this = ::std::move(from);
  }

  inline MPIResponse& operator=(MPIResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MPIResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPIResponse* internal_default_instance() {
    return reinterpret_cast<const MPIResponse*>(
               &_MPIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MPIResponse* other);
  friend void swap(MPIResponse& a, MPIResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MPIResponse* New() const final {
    return CreateMaybeMessage<MPIResponse>(NULL);
  }

  MPIResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MPIResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MPIResponse& from);
  void MergeFrom(const MPIResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPIResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MPIResponse_ResponseType ResponseType;
  static const ResponseType ALLREDUCE =
    MPIResponse_ResponseType_ALLREDUCE;
  static const ResponseType ALLGATHER =
    MPIResponse_ResponseType_ALLGATHER;
  static const ResponseType ERROR =
    MPIResponse_ResponseType_ERROR;
  static const ResponseType DONE =
    MPIResponse_ResponseType_DONE;
  static const ResponseType SHUTDOWN =
    MPIResponse_ResponseType_SHUTDOWN;
  static inline bool ResponseType_IsValid(int value) {
    return MPIResponse_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    MPIResponse_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    MPIResponse_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    MPIResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return MPIResponse_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return MPIResponse_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return MPIResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string tensor_name = 2;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 2;
  const ::std::string& tensor_name() const;
  void set_tensor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tensor_name(::std::string&& value);
  #endif
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  ::std::string* mutable_tensor_name();
  ::std::string* release_tensor_name();
  void set_allocated_tensor_name(::std::string* tensor_name);

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.ResponseType response_type = 1;
  void clear_response_type();
  static const int kResponseTypeFieldNumber = 1;
  ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType response_type() const;
  void set_response_type(::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType value);

  // @@protoc_insertion_point(class_scope:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tensor_name_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  int response_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MPIRequest

// int32 request_rank = 1;
inline void MPIRequest::clear_request_rank() {
  request_rank_ = 0;
}
inline ::google::protobuf::int32 MPIRequest::request_rank() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.request_rank)
  return request_rank_;
}
inline void MPIRequest::set_request_rank(::google::protobuf::int32 value) {
  
  request_rank_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.request_rank)
}

// .diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.RequestType request_type = 2;
inline void MPIRequest::clear_request_type() {
  request_type_ = 0;
}
inline ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType MPIRequest::request_type() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.request_type)
  return static_cast< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType >(request_type_);
}
inline void MPIRequest::set_request_type(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType value) {
  
  request_type_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.request_type)
}

// .diplomacy.tensorflow.DataType tensor_type = 3;
inline void MPIRequest::clear_tensor_type() {
  tensor_type_ = 0;
}
inline ::diplomacy::tensorflow::DataType MPIRequest::tensor_type() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_type)
  return static_cast< ::diplomacy::tensorflow::DataType >(tensor_type_);
}
inline void MPIRequest::set_tensor_type(::diplomacy::tensorflow::DataType value) {
  
  tensor_type_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_type)
}

// string tensor_name = 4;
inline void MPIRequest::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MPIRequest::tensor_name() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void MPIRequest::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
}
#if LANG_CXX11
inline void MPIRequest::set_tensor_name(::std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
}
#endif
inline void MPIRequest::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
}
inline void MPIRequest::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
}
inline ::std::string* MPIRequest::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MPIRequest::release_tensor_name() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MPIRequest::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name)
}

// .diplomacy.tensorflow.TensorShapeProto tensor_shape = 5;
inline bool MPIRequest::has_tensor_shape() const {
  return this != internal_default_instance() && tensor_shape_ != NULL;
}
inline const ::diplomacy::tensorflow::TensorShapeProto& MPIRequest::_internal_tensor_shape() const {
  return *tensor_shape_;
}
inline const ::diplomacy::tensorflow::TensorShapeProto& MPIRequest::tensor_shape() const {
  const ::diplomacy::tensorflow::TensorShapeProto* p = tensor_shape_;
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_shape)
  return p != NULL ? *p : *reinterpret_cast<const ::diplomacy::tensorflow::TensorShapeProto*>(
      &::diplomacy::tensorflow::_TensorShapeProto_default_instance_);
}
inline ::diplomacy::tensorflow::TensorShapeProto* MPIRequest::release_tensor_shape() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_shape)
  
  ::diplomacy::tensorflow::TensorShapeProto* temp = tensor_shape_;
  tensor_shape_ = NULL;
  return temp;
}
inline ::diplomacy::tensorflow::TensorShapeProto* MPIRequest::mutable_tensor_shape() {
  
  if (tensor_shape_ == NULL) {
    auto* p = CreateMaybeMessage<::diplomacy::tensorflow::TensorShapeProto>(GetArenaNoVirtual());
    tensor_shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_shape)
  return tensor_shape_;
}
inline void MPIRequest::set_allocated_tensor_shape(::diplomacy::tensorflow::TensorShapeProto* tensor_shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tensor_shape_);
  }
  if (tensor_shape) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(tensor_shape)->GetArena();
    if (message_arena != submessage_arena) {
      tensor_shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tensor_shape, submessage_arena);
    }
    
  } else {
    
  }
  tensor_shape_ = tensor_shape;
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_shape)
}

// -------------------------------------------------------------------

// MPIResponse

// .diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.ResponseType response_type = 1;
inline void MPIResponse::clear_response_type() {
  response_type_ = 0;
}
inline ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType MPIResponse::response_type() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.response_type)
  return static_cast< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType >(response_type_);
}
inline void MPIResponse::set_response_type(::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType value) {
  
  response_type_ = value;
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.response_type)
}

// string tensor_name = 2;
inline void MPIResponse::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MPIResponse::tensor_name() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void MPIResponse::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
}
#if LANG_CXX11
inline void MPIResponse::set_tensor_name(::std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
}
#endif
inline void MPIResponse::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
}
inline void MPIResponse::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
}
inline ::std::string* MPIResponse::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MPIResponse::release_tensor_name() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MPIResponse::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name)
}

// string error_message = 3;
inline void MPIResponse::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MPIResponse::error_message() const {
  // @@protoc_insertion_point(field_get:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
  return error_message_.GetNoArena();
}
inline void MPIResponse::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
}
#if LANG_CXX11
inline void MPIResponse::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
}
#endif
inline void MPIResponse::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
}
inline void MPIResponse::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
}
inline ::std::string* MPIResponse::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MPIResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MPIResponse::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mpi_collectives
}  // namespace contrib
}  // namespace tensorflow
}  // namespace diplomacy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType>() {
  return ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType>() {
  return ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto
