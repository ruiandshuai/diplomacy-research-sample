// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/contrib/mpi_collectives/mpi_message.proto

#include "diplomacy_tensorflow/contrib/mpi_collectives/mpi_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorShapeProto;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto
namespace diplomacy {
namespace tensorflow {
namespace contrib {
namespace mpi_collectives {
class MPIRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MPIRequest>
      _instance;
} _MPIRequest_default_instance_;
class MPIResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MPIResponse>
      _instance;
} _MPIResponse_default_instance_;
}  // namespace mpi_collectives
}  // namespace contrib
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto {
static void InitDefaultsMPIRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::contrib::mpi_collectives::_MPIRequest_default_instance_;
    new (ptr) ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MPIRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMPIRequest}, {
      &protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::scc_info_TensorShapeProto.base,}};

static void InitDefaultsMPIResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::contrib::mpi_collectives::_MPIResponse_default_instance_;
    new (ptr) ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MPIResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMPIResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MPIRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MPIResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest, request_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest, request_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest, tensor_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest, tensor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest, tensor_shape_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse, response_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse, tensor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse, error_message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest)},
  { 10, -1, sizeof(::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::contrib::mpi_collectives::_MPIRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::contrib::mpi_collectives::_MPIResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/contrib/mpi_collectives/mpi_message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n>diplomacy_tensorflow/contrib/mpi_colle"
      "ctives/mpi_message.proto\022,diplomacy.tens"
      "orflow.contrib.mpi_collectives\0326diplomac"
      "y_tensorflow/core/framework/tensor_shape"
      ".proto\032/diplomacy_tensorflow/core/framew"
      "ork/types.proto\"\263\002\n\nMPIRequest\022\024\n\014reques"
      "t_rank\030\001 \001(\005\022Z\n\014request_type\030\002 \001(\0162D.dip"
      "lomacy.tensorflow.contrib.mpi_collective"
      "s.MPIRequest.RequestType\0223\n\013tensor_type\030"
      "\003 \001(\0162\036.diplomacy.tensorflow.DataType\022\023\n"
      "\013tensor_name\030\004 \001(\t\022<\n\014tensor_shape\030\005 \001(\013"
      "2&.diplomacy.tensorflow.TensorShapeProto"
      "\"+\n\013RequestType\022\r\n\tALLREDUCE\020\000\022\r\n\tALLGAT"
      "HER\020\001\"\351\001\n\013MPIResponse\022]\n\rresponse_type\030\001"
      " \001(\0162F.diplomacy.tensorflow.contrib.mpi_"
      "collectives.MPIResponse.ResponseType\022\023\n\013"
      "tensor_name\030\002 \001(\t\022\025\n\rerror_message\030\003 \001(\t"
      "\"O\n\014ResponseType\022\r\n\tALLREDUCE\020\000\022\r\n\tALLGA"
      "THER\020\001\022\t\n\005ERROR\020\002\022\010\n\004DONE\020\003\022\014\n\010SHUTDOWN\020"
      "\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 769);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/contrib/mpi_collectives/mpi_message.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::AddDescriptors();
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftypes_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto
namespace diplomacy {
namespace tensorflow {
namespace contrib {
namespace mpi_collectives {
const ::google::protobuf::EnumDescriptor* MPIRequest_RequestType_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::file_level_enum_descriptors[0];
}
bool MPIRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MPIRequest_RequestType MPIRequest::ALLREDUCE;
const MPIRequest_RequestType MPIRequest::ALLGATHER;
const MPIRequest_RequestType MPIRequest::RequestType_MIN;
const MPIRequest_RequestType MPIRequest::RequestType_MAX;
const int MPIRequest::RequestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MPIResponse_ResponseType_descriptor() {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::file_level_enum_descriptors[1];
}
bool MPIResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MPIResponse_ResponseType MPIResponse::ALLREDUCE;
const MPIResponse_ResponseType MPIResponse::ALLGATHER;
const MPIResponse_ResponseType MPIResponse::ERROR;
const MPIResponse_ResponseType MPIResponse::DONE;
const MPIResponse_ResponseType MPIResponse::SHUTDOWN;
const MPIResponse_ResponseType MPIResponse::ResponseType_MIN;
const MPIResponse_ResponseType MPIResponse::ResponseType_MAX;
const int MPIResponse::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MPIRequest::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::contrib::mpi_collectives::_MPIRequest_default_instance_._instance.get_mutable()->tensor_shape_ = const_cast< ::diplomacy::tensorflow::TensorShapeProto*>(
      ::diplomacy::tensorflow::TensorShapeProto::internal_default_instance());
}
void MPIRequest::clear_tensor_shape() {
  if (GetArenaNoVirtual() == NULL && tensor_shape_ != NULL) {
    delete tensor_shape_;
  }
  tensor_shape_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPIRequest::kRequestRankFieldNumber;
const int MPIRequest::kRequestTypeFieldNumber;
const int MPIRequest::kTensorTypeFieldNumber;
const int MPIRequest::kTensorNameFieldNumber;
const int MPIRequest::kTensorShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPIRequest::MPIRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::scc_info_MPIRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
}
MPIRequest::MPIRequest(const MPIRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.has_tensor_shape()) {
    tensor_shape_ = new ::diplomacy::tensorflow::TensorShapeProto(*from.tensor_shape_);
  } else {
    tensor_shape_ = NULL;
  }
  ::memcpy(&request_rank_, &from.request_rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&tensor_type_) -
    reinterpret_cast<char*>(&request_rank_)) + sizeof(tensor_type_));
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
}

void MPIRequest::SharedCtor() {
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_type_) -
      reinterpret_cast<char*>(&tensor_shape_)) + sizeof(tensor_type_));
}

MPIRequest::~MPIRequest() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  SharedDtor();
}

void MPIRequest::SharedDtor() {
  tensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_shape_;
}

void MPIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MPIRequest::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MPIRequest& MPIRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::scc_info_MPIRequest.base);
  return *internal_default_instance();
}


void MPIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && tensor_shape_ != NULL) {
    delete tensor_shape_;
  }
  tensor_shape_ = NULL;
  ::memset(&request_rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_type_) -
      reinterpret_cast<char*>(&request_rank_)) + sizeof(tensor_type_));
  _internal_metadata_.Clear();
}

bool MPIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 request_rank = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.RequestType request_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_request_type(static_cast< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.DataType tensor_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tensor_type(static_cast< ::diplomacy::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.TensorShapeProto tensor_shape = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  return false;
#undef DO_
}

void MPIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_rank = 1;
  if (this->request_rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_rank(), output);
  }

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.RequestType request_type = 2;
  if (this->request_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->request_type(), output);
  }

  // .diplomacy.tensorflow.DataType tensor_type = 3;
  if (this->tensor_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tensor_type(), output);
  }

  // string tensor_name = 4;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tensor_name(), output);
  }

  // .diplomacy.tensorflow.TensorShapeProto tensor_shape = 5;
  if (this->has_tensor_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_tensor_shape(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
}

::google::protobuf::uint8* MPIRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 request_rank = 1;
  if (this->request_rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_rank(), target);
  }

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.RequestType request_type = 2;
  if (this->request_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->request_type(), target);
  }

  // .diplomacy.tensorflow.DataType tensor_type = 3;
  if (this->tensor_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tensor_type(), target);
  }

  // string tensor_name = 4;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tensor_name(), target);
  }

  // .diplomacy.tensorflow.TensorShapeProto tensor_shape = 5;
  if (this->has_tensor_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_tensor_shape(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  return target;
}

size_t MPIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tensor_name = 4;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // .diplomacy.tensorflow.TensorShapeProto tensor_shape = 5;
  if (this->has_tensor_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tensor_shape_);
  }

  // int32 request_rank = 1;
  if (this->request_rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_rank());
  }

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest.RequestType request_type = 2;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
  }

  // .diplomacy.tensorflow.DataType tensor_type = 3;
  if (this->tensor_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tensor_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPIRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MPIRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MPIRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
    MergeFrom(*source);
  }
}

void MPIRequest::MergeFrom(const MPIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.has_tensor_shape()) {
    mutable_tensor_shape()->::diplomacy::tensorflow::TensorShapeProto::MergeFrom(from.tensor_shape());
  }
  if (from.request_rank() != 0) {
    set_request_rank(from.request_rank());
  }
  if (from.request_type() != 0) {
    set_request_type(from.request_type());
  }
  if (from.tensor_type() != 0) {
    set_tensor_type(from.tensor_type());
  }
}

void MPIRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPIRequest::CopyFrom(const MPIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPIRequest::IsInitialized() const {
  return true;
}

void MPIRequest::Swap(MPIRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPIRequest::InternalSwap(MPIRequest* other) {
  using std::swap;
  tensor_name_.Swap(&other->tensor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tensor_shape_, other->tensor_shape_);
  swap(request_rank_, other->request_rank_);
  swap(request_type_, other->request_type_);
  swap(tensor_type_, other->tensor_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MPIRequest::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MPIResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPIResponse::kResponseTypeFieldNumber;
const int MPIResponse::kTensorNameFieldNumber;
const int MPIResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPIResponse::MPIResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::scc_info_MPIResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
}
MPIResponse::MPIResponse(const MPIResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tensor_name().size() > 0) {
    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  response_type_ = from.response_type_;
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
}

void MPIResponse::SharedCtor() {
  tensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_type_ = 0;
}

MPIResponse::~MPIResponse() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  SharedDtor();
}

void MPIResponse::SharedDtor() {
  tensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MPIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MPIResponse::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MPIResponse& MPIResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::scc_info_MPIResponse.base);
  return *internal_default_instance();
}


void MPIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_type_ = 0;
  _internal_metadata_.Clear();
}

bool MPIResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.ResponseType response_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response_type(static_cast< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse_ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensor_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  return false;
#undef DO_
}

void MPIResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.ResponseType response_type = 1;
  if (this->response_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_type(), output);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tensor_name(), output);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
}

::google::protobuf::uint8* MPIResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.ResponseType response_type = 1;
  if (this->response_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_type(), target);
  }

  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tensor_name().data(), static_cast<int>(this->tensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.tensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tensor_name(), target);
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  return target;
}

size_t MPIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tensor_name = 2;
  if (this->tensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tensor_name());
  }

  // string error_message = 3;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // .diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse.ResponseType response_type = 1;
  if (this->response_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPIResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MPIResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MPIResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
    MergeFrom(*source);
  }
}

void MPIResponse::MergeFrom(const MPIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tensor_name().size() > 0) {

    tensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tensor_name_);
  }
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.response_type() != 0) {
    set_response_type(from.response_type());
  }
}

void MPIResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPIResponse::CopyFrom(const MPIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.contrib.mpi_collectives.MPIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPIResponse::IsInitialized() const {
  return true;
}

void MPIResponse::Swap(MPIResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPIResponse::InternalSwap(MPIResponse* other) {
  using std::swap;
  tensor_name_.Swap(&other->tensor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_type_, other->response_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MPIResponse::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcontrib_2fmpi_5fcollectives_2fmpi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mpi_collectives
}  // namespace contrib
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse >(Arena* arena) {
  return Arena::CreateInternal< ::diplomacy::tensorflow::contrib::mpi_collectives::MPIResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
