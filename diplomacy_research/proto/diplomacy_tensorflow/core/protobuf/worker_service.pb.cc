// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/core/protobuf/worker_service.proto

#include "diplomacy_tensorflow/core/protobuf/worker_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace diplomacy {
namespace tensorflow {
namespace grpc {
}  // namespace grpc
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto {
void InitDefaults() {
}

const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/core/protobuf/worker_service.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n7diplomacy_tensorflow/core/protobuf/wor"
      "ker_service.proto\022\031diplomacy.tensorflow."
      "grpc\032/diplomacy_tensorflow/core/protobuf"
      "/worker.proto2\234\014\n\rWorkerService\022\\\n\tGetSt"
      "atus\022&.diplomacy.tensorflow.GetStatusReq"
      "uest\032\'.diplomacy.tensorflow.GetStatusRes"
      "ponse\022z\n\023CreateWorkerSession\0220.diplomacy"
      ".tensorflow.CreateWorkerSessionRequest\0321"
      ".diplomacy.tensorflow.CreateWorkerSessio"
      "nResponse\022z\n\023DeleteWorkerSession\0220.diplo"
      "macy.tensorflow.DeleteWorkerSessionReque"
      "st\0321.diplomacy.tensorflow.DeleteWorkerSe"
      "ssionResponse\022h\n\rRegisterGraph\022*.diploma"
      "cy.tensorflow.RegisterGraphRequest\032+.dip"
      "lomacy.tensorflow.RegisterGraphResponse\022"
      "n\n\017DeregisterGraph\022,.diplomacy.tensorflo"
      "w.DeregisterGraphRequest\032-.diplomacy.ten"
      "sorflow.DeregisterGraphResponse\022Y\n\010RunGr"
      "aph\022%.diplomacy.tensorflow.RunGraphReque"
      "st\032&.diplomacy.tensorflow.RunGraphRespon"
      "se\022e\n\014CleanupGraph\022).diplomacy.tensorflo"
      "w.CleanupGraphRequest\032*.diplomacy.tensor"
      "flow.CleanupGraphResponse\022_\n\nCleanupAll\022"
      "\'.diplomacy.tensorflow.CleanupAllRequest"
      "\032(.diplomacy.tensorflow.CleanupAllRespon"
      "se\022a\n\nRecvTensor\022\'.diplomacy.tensorflow."
      "RecvTensorRequest\032(.diplomacy.tensorflow"
      ".RecvTensorResponse\"\000\022V\n\007Logging\022$.diplo"
      "macy.tensorflow.LoggingRequest\032%.diploma"
      "cy.tensorflow.LoggingResponse\022V\n\007Tracing"
      "\022$.diplomacy.tensorflow.TracingRequest\032%"
      ".diplomacy.tensorflow.TracingResponse\022X\n"
      "\007RecvBuf\022$.diplomacy.tensorflow.RecvBufR"
      "equest\032%.diplomacy.tensorflow.RecvBufRes"
      "ponse\"\000\022n\n\017GetStepSequence\022,.diplomacy.t"
      "ensorflow.GetStepSequenceRequest\032-.diplo"
      "macy.tensorflow.GetStepSequenceResponse\022"
      "h\n\rCompleteGroup\022*.diplomacy.tensorflow."
      "CompleteGroupRequest\032+.diplomacy.tensorf"
      "low.CompleteGroupResponse\022q\n\020CompleteIns"
      "tance\022-.diplomacy.tensorflow.CompleteIns"
      "tanceRequest\032..diplomacy.tensorflow.Comp"
      "leteInstanceResponseBq\n\032org.tensorflow.d"
      "istruntimeB\023WorkerServiceProtosP\001Z<githu"
      "b.com/tensorflow/tensorflow/tensorflow/g"
      "o/core/protobufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/core/protobuf/worker_service.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fworker_5fservice_2eproto
namespace diplomacy {
namespace tensorflow {
namespace grpc {

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
