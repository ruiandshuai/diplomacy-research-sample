// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/core/protobuf/replay_log.proto

#include "diplomacy_tensorflow/core/protobuf/replay_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CloseSessionRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CloseSessionResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateSessionResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExtendSessionResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListDevicesRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MakeCallableResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PartialRunSetupRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PartialRunSetupResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReleaseCallableRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReleaseCallableResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResetRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResetResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExtendSessionRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ListDevicesResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MakeCallableRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RunCallableRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CreateSessionRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RunCallableResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RunStepRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RunStepResponse;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto
namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NewReplaySession;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto
namespace diplomacy {
namespace tensorflow {
class NewReplaySessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewReplaySession>
      _instance;
} _NewReplaySession_default_instance_;
class ReplayOpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplayOp>
      _instance;
  const ::diplomacy::tensorflow::CreateSessionRequest* create_session_;
  const ::diplomacy::tensorflow::ExtendSessionRequest* extend_session_;
  const ::diplomacy::tensorflow::PartialRunSetupRequest* partial_run_setup_;
  const ::diplomacy::tensorflow::RunStepRequest* run_step_;
  const ::diplomacy::tensorflow::CloseSessionRequest* close_session_;
  const ::diplomacy::tensorflow::ListDevicesRequest* list_devices_;
  const ::diplomacy::tensorflow::ResetRequest* reset_request_;
  const ::diplomacy::tensorflow::MakeCallableRequest* make_callable_;
  const ::diplomacy::tensorflow::RunCallableRequest* run_callable_;
  const ::diplomacy::tensorflow::ReleaseCallableRequest* release_callable_;
  const ::diplomacy::tensorflow::NewReplaySession* new_replay_session_;
  const ::diplomacy::tensorflow::CreateSessionResponse* create_session_response_;
  const ::diplomacy::tensorflow::ExtendSessionResponse* extend_session_response_;
  const ::diplomacy::tensorflow::PartialRunSetupResponse* partial_run_setup_response_;
  const ::diplomacy::tensorflow::RunStepResponse* run_step_response_;
  const ::diplomacy::tensorflow::CloseSessionResponse* close_session_response_;
  const ::diplomacy::tensorflow::ListDevicesResponse* list_devices_response_;
  const ::diplomacy::tensorflow::ResetResponse* reset_request_response_;
  const ::diplomacy::tensorflow::MakeCallableResponse* make_callable_response_;
  const ::diplomacy::tensorflow::RunCallableResponse* run_callable_response_;
  const ::diplomacy::tensorflow::ReleaseCallableResponse* release_callable_response_;
} _ReplayOp_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto {
static void InitDefaultsNewReplaySession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_NewReplaySession_default_instance_;
    new (ptr) ::diplomacy::tensorflow::NewReplaySession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::NewReplaySession::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NewReplaySession =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNewReplaySession}, {
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ListDevicesResponse.base,}};

static void InitDefaultsReplayOp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_ReplayOp_default_instance_;
    new (ptr) ::diplomacy::tensorflow::ReplayOp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::ReplayOp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<21> scc_info_ReplayOp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 21, InitDefaultsReplayOp}, {
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_CreateSessionRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ExtendSessionRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_PartialRunSetupRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_RunStepRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_CloseSessionRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ListDevicesRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ResetRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_MakeCallableRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_RunCallableRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ReleaseCallableRequest.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::scc_info_NewReplaySession.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_CreateSessionResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ExtendSessionResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_PartialRunSetupResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_RunStepResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_CloseSessionResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ListDevicesResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ResetResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_MakeCallableResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_RunCallableResponse.base,
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::scc_info_ReleaseCallableResponse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NewReplaySession.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplayOp.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::NewReplaySession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::NewReplaySession, devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::NewReplaySession, session_handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ReplayOp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ReplayOp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ReplayOp, start_time_us_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ReplayOp, end_time_us_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, create_session_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, extend_session_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, partial_run_setup_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, run_step_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, close_session_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, list_devices_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, reset_request_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, make_callable_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, run_callable_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, release_callable_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, new_replay_session_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, create_session_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, extend_session_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, partial_run_setup_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, run_step_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, close_session_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, list_devices_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, reset_request_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, make_callable_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, run_callable_response_),
  offsetof(::diplomacy::tensorflow::ReplayOpDefaultTypeInternal, release_callable_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ReplayOp, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::ReplayOp, response_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::NewReplaySession)},
  { 7, -1, sizeof(::diplomacy::tensorflow::ReplayOp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_NewReplaySession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_ReplayOp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/core/protobuf/replay_log.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3diplomacy_tensorflow/core/protobuf/rep"
      "lay_log.proto\022\024diplomacy.tensorflow\032/dip"
      "lomacy_tensorflow/core/framework/graph.p"
      "roto\0320diplomacy_tensorflow/core/protobuf"
      "/cluster.proto\032/diplomacy_tensorflow/cor"
      "e/protobuf/master.proto\"f\n\020NewReplaySess"
      "ion\022:\n\007devices\030\001 \001(\0132).diplomacy.tensorf"
      "low.ListDevicesResponse\022\026\n\016session_handl"
      "e\030\002 \001(\t\"\272\014\n\010ReplayOp\022\025\n\rstart_time_us\030\037 "
      "\001(\001\022\023\n\013end_time_us\030  \001(\001\022D\n\016create_sessi"
      "on\030\001 \001(\0132*.diplomacy.tensorflow.CreateSe"
      "ssionRequestH\000\022D\n\016extend_session\030\002 \001(\0132*"
      ".diplomacy.tensorflow.ExtendSessionReque"
      "stH\000\022I\n\021partial_run_setup\030\003 \001(\0132,.diplom"
      "acy.tensorflow.PartialRunSetupRequestH\000\022"
      "8\n\010run_step\030\004 \001(\0132$.diplomacy.tensorflow"
      ".RunStepRequestH\000\022B\n\rclose_session\030\005 \001(\013"
      "2).diplomacy.tensorflow.CloseSessionRequ"
      "estH\000\022@\n\014list_devices\030\006 \001(\0132(.diplomacy."
      "tensorflow.ListDevicesRequestH\000\022;\n\rreset"
      "_request\030\007 \001(\0132\".diplomacy.tensorflow.Re"
      "setRequestH\000\022B\n\rmake_callable\030\010 \001(\0132).di"
      "plomacy.tensorflow.MakeCallableRequestH\000"
      "\022@\n\014run_callable\030\t \001(\0132(.diplomacy.tenso"
      "rflow.RunCallableRequestH\000\022H\n\020release_ca"
      "llable\030\n \001(\0132,.diplomacy.tensorflow.Rele"
      "aseCallableRequestH\000\022D\n\022new_replay_sessi"
      "on\030\013 \001(\0132&.diplomacy.tensorflow.NewRepla"
      "ySessionH\000\022N\n\027create_session_response\030\025 "
      "\001(\0132+.diplomacy.tensorflow.CreateSession"
      "ResponseH\001\022N\n\027extend_session_response\030\026 "
      "\001(\0132+.diplomacy.tensorflow.ExtendSession"
      "ResponseH\001\022S\n\032partial_run_setup_response"
      "\030\027 \001(\0132-.diplomacy.tensorflow.PartialRun"
      "SetupResponseH\001\022B\n\021run_step_response\030\030 \001"
      "(\0132%.diplomacy.tensorflow.RunStepRespons"
      "eH\001\022L\n\026close_session_response\030\031 \001(\0132*.di"
      "plomacy.tensorflow.CloseSessionResponseH"
      "\001\022J\n\025list_devices_response\030\032 \001(\0132).diplo"
      "macy.tensorflow.ListDevicesResponseH\001\022E\n"
      "\026reset_request_response\030\033 \001(\0132#.diplomac"
      "y.tensorflow.ResetResponseH\001\022L\n\026make_cal"
      "lable_response\030\034 \001(\0132*.diplomacy.tensorf"
      "low.MakeCallableResponseH\001\022J\n\025run_callab"
      "le_response\030\035 \001(\0132).diplomacy.tensorflow"
      ".RunCallableResponseH\001\022R\n\031release_callab"
      "le_response\030\036 \001(\0132-.diplomacy.tensorflow"
      ".ReleaseCallableResponseH\001B\004\n\002opB\n\n\010resp"
      "onseB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1937);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/core/protobuf/replay_log.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2fgraph_2eproto::AddDescriptors();
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fcluster_2eproto::AddDescriptors();
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2fmaster_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto
namespace diplomacy {
namespace tensorflow {

// ===================================================================

void NewReplaySession::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::_NewReplaySession_default_instance_._instance.get_mutable()->devices_ = const_cast< ::diplomacy::tensorflow::ListDevicesResponse*>(
      ::diplomacy::tensorflow::ListDevicesResponse::internal_default_instance());
}
void NewReplaySession::unsafe_arena_set_allocated_devices(
    ::diplomacy::tensorflow::ListDevicesResponse* devices) {
  if (GetArenaNoVirtual() == NULL) {
    delete devices_;
  }
  devices_ = devices;
  if (devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.NewReplaySession.devices)
}
void NewReplaySession::clear_devices() {
  if (GetArenaNoVirtual() == NULL && devices_ != NULL) {
    delete devices_;
  }
  devices_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewReplaySession::kDevicesFieldNumber;
const int NewReplaySession::kSessionHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewReplaySession::NewReplaySession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::scc_info_NewReplaySession.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.NewReplaySession)
}
NewReplaySession::NewReplaySession(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::scc_info_NewReplaySession.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.NewReplaySession)
}
NewReplaySession::NewReplaySession(const NewReplaySession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_handle().size() > 0) {
    session_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_handle(),
      GetArenaNoVirtual());
  }
  if (from.has_devices()) {
    devices_ = new ::diplomacy::tensorflow::ListDevicesResponse(*from.devices_);
  } else {
    devices_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.NewReplaySession)
}

void NewReplaySession::SharedCtor() {
  session_handle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devices_ = NULL;
}

NewReplaySession::~NewReplaySession() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.NewReplaySession)
  SharedDtor();
}

void NewReplaySession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  session_handle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete devices_;
}

void NewReplaySession::ArenaDtor(void* object) {
  NewReplaySession* _this = reinterpret_cast< NewReplaySession* >(object);
  (void)_this;
}
void NewReplaySession::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NewReplaySession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NewReplaySession::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewReplaySession& NewReplaySession::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::scc_info_NewReplaySession.base);
  return *internal_default_instance();
}


void NewReplaySession::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.NewReplaySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && devices_ != NULL) {
    delete devices_;
  }
  devices_ = NULL;
  _internal_metadata_.Clear();
}

bool NewReplaySession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.NewReplaySession)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.ListDevicesResponse devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_handle().data(), static_cast<int>(this->session_handle().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.NewReplaySession.session_handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.NewReplaySession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.NewReplaySession)
  return false;
#undef DO_
}

void NewReplaySession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.NewReplaySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_devices(), output);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.NewReplaySession.session_handle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.NewReplaySession)
}

::google::protobuf::uint8* NewReplaySession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.NewReplaySession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_devices(), deterministic, target);
  }

  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_handle().data(), static_cast<int>(this->session_handle().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.NewReplaySession.session_handle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.NewReplaySession)
  return target;
}

size_t NewReplaySession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.NewReplaySession)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session_handle = 2;
  if (this->session_handle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_handle());
  }

  // .diplomacy.tensorflow.ListDevicesResponse devices = 1;
  if (this->has_devices()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *devices_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewReplaySession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.NewReplaySession)
  GOOGLE_DCHECK_NE(&from, this);
  const NewReplaySession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewReplaySession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.NewReplaySession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.NewReplaySession)
    MergeFrom(*source);
  }
}

void NewReplaySession::MergeFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.NewReplaySession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_handle().size() > 0) {
    set_session_handle(from.session_handle());
  }
  if (from.has_devices()) {
    mutable_devices()->::diplomacy::tensorflow::ListDevicesResponse::MergeFrom(from.devices());
  }
}

void NewReplaySession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewReplaySession::CopyFrom(const NewReplaySession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.NewReplaySession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReplaySession::IsInitialized() const {
  return true;
}

void NewReplaySession::Swap(NewReplaySession* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NewReplaySession* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NewReplaySession::UnsafeArenaSwap(NewReplaySession* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NewReplaySession::InternalSwap(NewReplaySession* other) {
  using std::swap;
  session_handle_.Swap(&other->session_handle_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(devices_, other->devices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NewReplaySession::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReplayOp::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.create_session_ = const_cast< ::diplomacy::tensorflow::CreateSessionRequest*>(
      ::diplomacy::tensorflow::CreateSessionRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.extend_session_ = const_cast< ::diplomacy::tensorflow::ExtendSessionRequest*>(
      ::diplomacy::tensorflow::ExtendSessionRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.partial_run_setup_ = const_cast< ::diplomacy::tensorflow::PartialRunSetupRequest*>(
      ::diplomacy::tensorflow::PartialRunSetupRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.run_step_ = const_cast< ::diplomacy::tensorflow::RunStepRequest*>(
      ::diplomacy::tensorflow::RunStepRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.close_session_ = const_cast< ::diplomacy::tensorflow::CloseSessionRequest*>(
      ::diplomacy::tensorflow::CloseSessionRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.list_devices_ = const_cast< ::diplomacy::tensorflow::ListDevicesRequest*>(
      ::diplomacy::tensorflow::ListDevicesRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.reset_request_ = const_cast< ::diplomacy::tensorflow::ResetRequest*>(
      ::diplomacy::tensorflow::ResetRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.make_callable_ = const_cast< ::diplomacy::tensorflow::MakeCallableRequest*>(
      ::diplomacy::tensorflow::MakeCallableRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.run_callable_ = const_cast< ::diplomacy::tensorflow::RunCallableRequest*>(
      ::diplomacy::tensorflow::RunCallableRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.release_callable_ = const_cast< ::diplomacy::tensorflow::ReleaseCallableRequest*>(
      ::diplomacy::tensorflow::ReleaseCallableRequest::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.new_replay_session_ = const_cast< ::diplomacy::tensorflow::NewReplaySession*>(
      ::diplomacy::tensorflow::NewReplaySession::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.create_session_response_ = const_cast< ::diplomacy::tensorflow::CreateSessionResponse*>(
      ::diplomacy::tensorflow::CreateSessionResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.extend_session_response_ = const_cast< ::diplomacy::tensorflow::ExtendSessionResponse*>(
      ::diplomacy::tensorflow::ExtendSessionResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.partial_run_setup_response_ = const_cast< ::diplomacy::tensorflow::PartialRunSetupResponse*>(
      ::diplomacy::tensorflow::PartialRunSetupResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.run_step_response_ = const_cast< ::diplomacy::tensorflow::RunStepResponse*>(
      ::diplomacy::tensorflow::RunStepResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.close_session_response_ = const_cast< ::diplomacy::tensorflow::CloseSessionResponse*>(
      ::diplomacy::tensorflow::CloseSessionResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.list_devices_response_ = const_cast< ::diplomacy::tensorflow::ListDevicesResponse*>(
      ::diplomacy::tensorflow::ListDevicesResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.reset_request_response_ = const_cast< ::diplomacy::tensorflow::ResetResponse*>(
      ::diplomacy::tensorflow::ResetResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.make_callable_response_ = const_cast< ::diplomacy::tensorflow::MakeCallableResponse*>(
      ::diplomacy::tensorflow::MakeCallableResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.run_callable_response_ = const_cast< ::diplomacy::tensorflow::RunCallableResponse*>(
      ::diplomacy::tensorflow::RunCallableResponse::internal_default_instance());
  ::diplomacy::tensorflow::_ReplayOp_default_instance_.release_callable_response_ = const_cast< ::diplomacy::tensorflow::ReleaseCallableResponse*>(
      ::diplomacy::tensorflow::ReleaseCallableResponse::internal_default_instance());
}
void ReplayOp::set_allocated_create_session(::diplomacy::tensorflow::CreateSessionRequest* create_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (create_session) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_session)->GetArena();
    if (message_arena != submessage_arena) {
      create_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_session, submessage_arena);
    }
    set_has_create_session();
    op_.create_session_ = create_session;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.create_session)
}
void ReplayOp::clear_create_session() {
  if (has_create_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.create_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_extend_session(::diplomacy::tensorflow::ExtendSessionRequest* extend_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (extend_session) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(extend_session)->GetArena();
    if (message_arena != submessage_arena) {
      extend_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extend_session, submessage_arena);
    }
    set_has_extend_session();
    op_.extend_session_ = extend_session;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.extend_session)
}
void ReplayOp::clear_extend_session() {
  if (has_extend_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.extend_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_partial_run_setup(::diplomacy::tensorflow::PartialRunSetupRequest* partial_run_setup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (partial_run_setup) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(partial_run_setup)->GetArena();
    if (message_arena != submessage_arena) {
      partial_run_setup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partial_run_setup, submessage_arena);
    }
    set_has_partial_run_setup();
    op_.partial_run_setup_ = partial_run_setup;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.partial_run_setup)
}
void ReplayOp::clear_partial_run_setup() {
  if (has_partial_run_setup()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.partial_run_setup_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_step(::diplomacy::tensorflow::RunStepRequest* run_step) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (run_step) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(run_step)->GetArena();
    if (message_arena != submessage_arena) {
      run_step = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_step, submessage_arena);
    }
    set_has_run_step();
    op_.run_step_ = run_step;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.run_step)
}
void ReplayOp::clear_run_step() {
  if (has_run_step()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.run_step_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_close_session(::diplomacy::tensorflow::CloseSessionRequest* close_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (close_session) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(close_session)->GetArena();
    if (message_arena != submessage_arena) {
      close_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, close_session, submessage_arena);
    }
    set_has_close_session();
    op_.close_session_ = close_session;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.close_session)
}
void ReplayOp::clear_close_session() {
  if (has_close_session()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.close_session_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_list_devices(::diplomacy::tensorflow::ListDevicesRequest* list_devices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (list_devices) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(list_devices)->GetArena();
    if (message_arena != submessage_arena) {
      list_devices = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, list_devices, submessage_arena);
    }
    set_has_list_devices();
    op_.list_devices_ = list_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.list_devices)
}
void ReplayOp::clear_list_devices() {
  if (has_list_devices()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.list_devices_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_reset_request(::diplomacy::tensorflow::ResetRequest* reset_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (reset_request) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reset_request)->GetArena();
    if (message_arena != submessage_arena) {
      reset_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reset_request, submessage_arena);
    }
    set_has_reset_request();
    op_.reset_request_ = reset_request;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.reset_request)
}
void ReplayOp::clear_reset_request() {
  if (has_reset_request()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.reset_request_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_make_callable(::diplomacy::tensorflow::MakeCallableRequest* make_callable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (make_callable) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(make_callable)->GetArena();
    if (message_arena != submessage_arena) {
      make_callable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, make_callable, submessage_arena);
    }
    set_has_make_callable();
    op_.make_callable_ = make_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.make_callable)
}
void ReplayOp::clear_make_callable() {
  if (has_make_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.make_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_run_callable(::diplomacy::tensorflow::RunCallableRequest* run_callable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (run_callable) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(run_callable)->GetArena();
    if (message_arena != submessage_arena) {
      run_callable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_callable, submessage_arena);
    }
    set_has_run_callable();
    op_.run_callable_ = run_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.run_callable)
}
void ReplayOp::clear_run_callable() {
  if (has_run_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.run_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_release_callable(::diplomacy::tensorflow::ReleaseCallableRequest* release_callable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (release_callable) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(release_callable)->GetArena();
    if (message_arena != submessage_arena) {
      release_callable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, release_callable, submessage_arena);
    }
    set_has_release_callable();
    op_.release_callable_ = release_callable;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.release_callable)
}
void ReplayOp::clear_release_callable() {
  if (has_release_callable()) {
    if (GetArenaNoVirtual() == NULL) {
      delete op_.release_callable_;
    }
    clear_has_op();
  }
}
void ReplayOp::set_allocated_new_replay_session(::diplomacy::tensorflow::NewReplaySession* new_replay_session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_op();
  if (new_replay_session) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(new_replay_session);
    if (message_arena != submessage_arena) {
      new_replay_session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_replay_session, submessage_arena);
    }
    set_has_new_replay_session();
    op_.new_replay_session_ = new_replay_session;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.new_replay_session)
}
void ReplayOp::set_allocated_create_session_response(::diplomacy::tensorflow::CreateSessionResponse* create_session_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (create_session_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      create_session_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_session_response, submessage_arena);
    }
    set_has_create_session_response();
    response_.create_session_response_ = create_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.create_session_response)
}
void ReplayOp::clear_create_session_response() {
  if (has_create_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.create_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_extend_session_response(::diplomacy::tensorflow::ExtendSessionResponse* extend_session_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (extend_session_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(extend_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      extend_session_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extend_session_response, submessage_arena);
    }
    set_has_extend_session_response();
    response_.extend_session_response_ = extend_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.extend_session_response)
}
void ReplayOp::clear_extend_session_response() {
  if (has_extend_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.extend_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_partial_run_setup_response(::diplomacy::tensorflow::PartialRunSetupResponse* partial_run_setup_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (partial_run_setup_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(partial_run_setup_response)->GetArena();
    if (message_arena != submessage_arena) {
      partial_run_setup_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, partial_run_setup_response, submessage_arena);
    }
    set_has_partial_run_setup_response();
    response_.partial_run_setup_response_ = partial_run_setup_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.partial_run_setup_response)
}
void ReplayOp::clear_partial_run_setup_response() {
  if (has_partial_run_setup_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.partial_run_setup_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_step_response(::diplomacy::tensorflow::RunStepResponse* run_step_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (run_step_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(run_step_response)->GetArena();
    if (message_arena != submessage_arena) {
      run_step_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_step_response, submessage_arena);
    }
    set_has_run_step_response();
    response_.run_step_response_ = run_step_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.run_step_response)
}
void ReplayOp::clear_run_step_response() {
  if (has_run_step_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.run_step_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_close_session_response(::diplomacy::tensorflow::CloseSessionResponse* close_session_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (close_session_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(close_session_response)->GetArena();
    if (message_arena != submessage_arena) {
      close_session_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, close_session_response, submessage_arena);
    }
    set_has_close_session_response();
    response_.close_session_response_ = close_session_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.close_session_response)
}
void ReplayOp::clear_close_session_response() {
  if (has_close_session_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.close_session_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_list_devices_response(::diplomacy::tensorflow::ListDevicesResponse* list_devices_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (list_devices_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(list_devices_response)->GetArena();
    if (message_arena != submessage_arena) {
      list_devices_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, list_devices_response, submessage_arena);
    }
    set_has_list_devices_response();
    response_.list_devices_response_ = list_devices_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.list_devices_response)
}
void ReplayOp::clear_list_devices_response() {
  if (has_list_devices_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.list_devices_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_reset_request_response(::diplomacy::tensorflow::ResetResponse* reset_request_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (reset_request_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reset_request_response)->GetArena();
    if (message_arena != submessage_arena) {
      reset_request_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reset_request_response, submessage_arena);
    }
    set_has_reset_request_response();
    response_.reset_request_response_ = reset_request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.reset_request_response)
}
void ReplayOp::clear_reset_request_response() {
  if (has_reset_request_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.reset_request_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_make_callable_response(::diplomacy::tensorflow::MakeCallableResponse* make_callable_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (make_callable_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(make_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      make_callable_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, make_callable_response, submessage_arena);
    }
    set_has_make_callable_response();
    response_.make_callable_response_ = make_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.make_callable_response)
}
void ReplayOp::clear_make_callable_response() {
  if (has_make_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.make_callable_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_run_callable_response(::diplomacy::tensorflow::RunCallableResponse* run_callable_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (run_callable_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(run_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      run_callable_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_callable_response, submessage_arena);
    }
    set_has_run_callable_response();
    response_.run_callable_response_ = run_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.run_callable_response)
}
void ReplayOp::clear_run_callable_response() {
  if (has_run_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.run_callable_response_;
    }
    clear_has_response();
  }
}
void ReplayOp::set_allocated_release_callable_response(::diplomacy::tensorflow::ReleaseCallableResponse* release_callable_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (release_callable_response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(release_callable_response)->GetArena();
    if (message_arena != submessage_arena) {
      release_callable_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, release_callable_response, submessage_arena);
    }
    set_has_release_callable_response();
    response_.release_callable_response_ = release_callable_response;
  }
  // @@protoc_insertion_point(field_set_allocated:diplomacy.tensorflow.ReplayOp.release_callable_response)
}
void ReplayOp::clear_release_callable_response() {
  if (has_release_callable_response()) {
    if (GetArenaNoVirtual() == NULL) {
      delete response_.release_callable_response_;
    }
    clear_has_response();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplayOp::kStartTimeUsFieldNumber;
const int ReplayOp::kEndTimeUsFieldNumber;
const int ReplayOp::kCreateSessionFieldNumber;
const int ReplayOp::kExtendSessionFieldNumber;
const int ReplayOp::kPartialRunSetupFieldNumber;
const int ReplayOp::kRunStepFieldNumber;
const int ReplayOp::kCloseSessionFieldNumber;
const int ReplayOp::kListDevicesFieldNumber;
const int ReplayOp::kResetRequestFieldNumber;
const int ReplayOp::kMakeCallableFieldNumber;
const int ReplayOp::kRunCallableFieldNumber;
const int ReplayOp::kReleaseCallableFieldNumber;
const int ReplayOp::kNewReplaySessionFieldNumber;
const int ReplayOp::kCreateSessionResponseFieldNumber;
const int ReplayOp::kExtendSessionResponseFieldNumber;
const int ReplayOp::kPartialRunSetupResponseFieldNumber;
const int ReplayOp::kRunStepResponseFieldNumber;
const int ReplayOp::kCloseSessionResponseFieldNumber;
const int ReplayOp::kListDevicesResponseFieldNumber;
const int ReplayOp::kResetRequestResponseFieldNumber;
const int ReplayOp::kMakeCallableResponseFieldNumber;
const int ReplayOp::kRunCallableResponseFieldNumber;
const int ReplayOp::kReleaseCallableResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplayOp::ReplayOp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::scc_info_ReplayOp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.ReplayOp)
}
ReplayOp::ReplayOp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::scc_info_ReplayOp.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.ReplayOp)
}
ReplayOp::ReplayOp(const ReplayOp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_us_, &from.start_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_us_) -
    reinterpret_cast<char*>(&start_time_us_)) + sizeof(end_time_us_));
  clear_has_op();
  switch (from.op_case()) {
    case kCreateSession: {
      mutable_create_session()->::diplomacy::tensorflow::CreateSessionRequest::MergeFrom(from.create_session());
      break;
    }
    case kExtendSession: {
      mutable_extend_session()->::diplomacy::tensorflow::ExtendSessionRequest::MergeFrom(from.extend_session());
      break;
    }
    case kPartialRunSetup: {
      mutable_partial_run_setup()->::diplomacy::tensorflow::PartialRunSetupRequest::MergeFrom(from.partial_run_setup());
      break;
    }
    case kRunStep: {
      mutable_run_step()->::diplomacy::tensorflow::RunStepRequest::MergeFrom(from.run_step());
      break;
    }
    case kCloseSession: {
      mutable_close_session()->::diplomacy::tensorflow::CloseSessionRequest::MergeFrom(from.close_session());
      break;
    }
    case kListDevices: {
      mutable_list_devices()->::diplomacy::tensorflow::ListDevicesRequest::MergeFrom(from.list_devices());
      break;
    }
    case kResetRequest: {
      mutable_reset_request()->::diplomacy::tensorflow::ResetRequest::MergeFrom(from.reset_request());
      break;
    }
    case kMakeCallable: {
      mutable_make_callable()->::diplomacy::tensorflow::MakeCallableRequest::MergeFrom(from.make_callable());
      break;
    }
    case kRunCallable: {
      mutable_run_callable()->::diplomacy::tensorflow::RunCallableRequest::MergeFrom(from.run_callable());
      break;
    }
    case kReleaseCallable: {
      mutable_release_callable()->::diplomacy::tensorflow::ReleaseCallableRequest::MergeFrom(from.release_callable());
      break;
    }
    case kNewReplaySession: {
      mutable_new_replay_session()->::diplomacy::tensorflow::NewReplaySession::MergeFrom(from.new_replay_session());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  clear_has_response();
  switch (from.response_case()) {
    case kCreateSessionResponse: {
      mutable_create_session_response()->::diplomacy::tensorflow::CreateSessionResponse::MergeFrom(from.create_session_response());
      break;
    }
    case kExtendSessionResponse: {
      mutable_extend_session_response()->::diplomacy::tensorflow::ExtendSessionResponse::MergeFrom(from.extend_session_response());
      break;
    }
    case kPartialRunSetupResponse: {
      mutable_partial_run_setup_response()->::diplomacy::tensorflow::PartialRunSetupResponse::MergeFrom(from.partial_run_setup_response());
      break;
    }
    case kRunStepResponse: {
      mutable_run_step_response()->::diplomacy::tensorflow::RunStepResponse::MergeFrom(from.run_step_response());
      break;
    }
    case kCloseSessionResponse: {
      mutable_close_session_response()->::diplomacy::tensorflow::CloseSessionResponse::MergeFrom(from.close_session_response());
      break;
    }
    case kListDevicesResponse: {
      mutable_list_devices_response()->::diplomacy::tensorflow::ListDevicesResponse::MergeFrom(from.list_devices_response());
      break;
    }
    case kResetRequestResponse: {
      mutable_reset_request_response()->::diplomacy::tensorflow::ResetResponse::MergeFrom(from.reset_request_response());
      break;
    }
    case kMakeCallableResponse: {
      mutable_make_callable_response()->::diplomacy::tensorflow::MakeCallableResponse::MergeFrom(from.make_callable_response());
      break;
    }
    case kRunCallableResponse: {
      mutable_run_callable_response()->::diplomacy::tensorflow::RunCallableResponse::MergeFrom(from.run_callable_response());
      break;
    }
    case kReleaseCallableResponse: {
      mutable_release_callable_response()->::diplomacy::tensorflow::ReleaseCallableResponse::MergeFrom(from.release_callable_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.ReplayOp)
}

void ReplayOp::SharedCtor() {
  ::memset(&start_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_us_) -
      reinterpret_cast<char*>(&start_time_us_)) + sizeof(end_time_us_));
  clear_has_op();
  clear_has_response();
}

ReplayOp::~ReplayOp() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.ReplayOp)
  SharedDtor();
}

void ReplayOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_op()) {
    clear_op();
  }
  if (has_response()) {
    clear_response();
  }
}

void ReplayOp::ArenaDtor(void* object) {
  ReplayOp* _this = reinterpret_cast< ReplayOp* >(object);
  (void)_this;
}
void ReplayOp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReplayOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReplayOp::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplayOp& ReplayOp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::scc_info_ReplayOp.base);
  return *internal_default_instance();
}


void ReplayOp::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.ReplayOp)
  switch (op_case()) {
    case kCreateSession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.create_session_;
      }
      break;
    }
    case kExtendSession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.extend_session_;
      }
      break;
    }
    case kPartialRunSetup: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.partial_run_setup_;
      }
      break;
    }
    case kRunStep: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.run_step_;
      }
      break;
    }
    case kCloseSession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.close_session_;
      }
      break;
    }
    case kListDevices: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.list_devices_;
      }
      break;
    }
    case kResetRequest: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.reset_request_;
      }
      break;
    }
    case kMakeCallable: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.make_callable_;
      }
      break;
    }
    case kRunCallable: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.run_callable_;
      }
      break;
    }
    case kReleaseCallable: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.release_callable_;
      }
      break;
    }
    case kNewReplaySession: {
      if (GetArenaNoVirtual() == NULL) {
        delete op_.new_replay_session_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}

void ReplayOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:diplomacy.tensorflow.ReplayOp)
  switch (response_case()) {
    case kCreateSessionResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.create_session_response_;
      }
      break;
    }
    case kExtendSessionResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.extend_session_response_;
      }
      break;
    }
    case kPartialRunSetupResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.partial_run_setup_response_;
      }
      break;
    }
    case kRunStepResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.run_step_response_;
      }
      break;
    }
    case kCloseSessionResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.close_session_response_;
      }
      break;
    }
    case kListDevicesResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.list_devices_response_;
      }
      break;
    }
    case kResetRequestResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.reset_request_response_;
      }
      break;
    }
    case kMakeCallableResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.make_callable_response_;
      }
      break;
    }
    case kRunCallableResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.run_callable_response_;
      }
      break;
    }
    case kReleaseCallableResponse: {
      if (GetArenaNoVirtual() == NULL) {
        delete response_.release_callable_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RESPONSE_NOT_SET;
}


void ReplayOp::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.ReplayOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_us_) -
      reinterpret_cast<char*>(&start_time_us_)) + sizeof(end_time_us_));
  clear_op();
  clear_response();
  _internal_metadata_.Clear();
}

bool ReplayOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.ReplayOp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.CreateSessionRequest create_session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ExtendSessionRequest extend_session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extend_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.PartialRunSetupRequest partial_run_setup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partial_run_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.RunStepRequest run_step = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_run_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.CloseSessionRequest close_session = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ListDevicesRequest list_devices = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_list_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ResetRequest reset_request = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reset_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.MakeCallableRequest make_callable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_make_callable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.RunCallableRequest run_callable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_run_callable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ReleaseCallableRequest release_callable = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_release_callable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.NewReplaySession new_replay_session = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_replay_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.CreateSessionResponse create_session_response = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_session_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ExtendSessionResponse extend_session_response = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extend_session_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partial_run_setup_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.RunStepResponse run_step_response = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_run_step_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.CloseSessionResponse close_session_response = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close_session_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ListDevicesResponse list_devices_response = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_list_devices_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ResetResponse reset_request_response = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reset_request_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.MakeCallableResponse make_callable_response = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_make_callable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.RunCallableResponse run_callable_response = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_run_callable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.ReleaseCallableResponse release_callable_response = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_release_callable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_time_us = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_time_us = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.ReplayOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.ReplayOp)
  return false;
#undef DO_
}

void ReplayOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.ReplayOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.CreateSessionRequest create_session = 1;
  if (has_create_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_create_session(), output);
  }

  // .diplomacy.tensorflow.ExtendSessionRequest extend_session = 2;
  if (has_extend_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_extend_session(), output);
  }

  // .diplomacy.tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  if (has_partial_run_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_partial_run_setup(), output);
  }

  // .diplomacy.tensorflow.RunStepRequest run_step = 4;
  if (has_run_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_run_step(), output);
  }

  // .diplomacy.tensorflow.CloseSessionRequest close_session = 5;
  if (has_close_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_close_session(), output);
  }

  // .diplomacy.tensorflow.ListDevicesRequest list_devices = 6;
  if (has_list_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_list_devices(), output);
  }

  // .diplomacy.tensorflow.ResetRequest reset_request = 7;
  if (has_reset_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_reset_request(), output);
  }

  // .diplomacy.tensorflow.MakeCallableRequest make_callable = 8;
  if (has_make_callable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_make_callable(), output);
  }

  // .diplomacy.tensorflow.RunCallableRequest run_callable = 9;
  if (has_run_callable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_run_callable(), output);
  }

  // .diplomacy.tensorflow.ReleaseCallableRequest release_callable = 10;
  if (has_release_callable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_release_callable(), output);
  }

  // .diplomacy.tensorflow.NewReplaySession new_replay_session = 11;
  if (has_new_replay_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_new_replay_session(), output);
  }

  // .diplomacy.tensorflow.CreateSessionResponse create_session_response = 21;
  if (has_create_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_create_session_response(), output);
  }

  // .diplomacy.tensorflow.ExtendSessionResponse extend_session_response = 22;
  if (has_extend_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_extend_session_response(), output);
  }

  // .diplomacy.tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  if (has_partial_run_setup_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_partial_run_setup_response(), output);
  }

  // .diplomacy.tensorflow.RunStepResponse run_step_response = 24;
  if (has_run_step_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_run_step_response(), output);
  }

  // .diplomacy.tensorflow.CloseSessionResponse close_session_response = 25;
  if (has_close_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_close_session_response(), output);
  }

  // .diplomacy.tensorflow.ListDevicesResponse list_devices_response = 26;
  if (has_list_devices_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_list_devices_response(), output);
  }

  // .diplomacy.tensorflow.ResetResponse reset_request_response = 27;
  if (has_reset_request_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_internal_reset_request_response(), output);
  }

  // .diplomacy.tensorflow.MakeCallableResponse make_callable_response = 28;
  if (has_make_callable_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_make_callable_response(), output);
  }

  // .diplomacy.tensorflow.RunCallableResponse run_callable_response = 29;
  if (has_run_callable_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_internal_run_callable_response(), output);
  }

  // .diplomacy.tensorflow.ReleaseCallableResponse release_callable_response = 30;
  if (has_release_callable_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_release_callable_response(), output);
  }

  // double start_time_us = 31;
  if (this->start_time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->start_time_us(), output);
  }

  // double end_time_us = 32;
  if (this->end_time_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->end_time_us(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.ReplayOp)
}

::google::protobuf::uint8* ReplayOp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.ReplayOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.CreateSessionRequest create_session = 1;
  if (has_create_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_create_session(), deterministic, target);
  }

  // .diplomacy.tensorflow.ExtendSessionRequest extend_session = 2;
  if (has_extend_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_extend_session(), deterministic, target);
  }

  // .diplomacy.tensorflow.PartialRunSetupRequest partial_run_setup = 3;
  if (has_partial_run_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_partial_run_setup(), deterministic, target);
  }

  // .diplomacy.tensorflow.RunStepRequest run_step = 4;
  if (has_run_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_run_step(), deterministic, target);
  }

  // .diplomacy.tensorflow.CloseSessionRequest close_session = 5;
  if (has_close_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_close_session(), deterministic, target);
  }

  // .diplomacy.tensorflow.ListDevicesRequest list_devices = 6;
  if (has_list_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_list_devices(), deterministic, target);
  }

  // .diplomacy.tensorflow.ResetRequest reset_request = 7;
  if (has_reset_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_reset_request(), deterministic, target);
  }

  // .diplomacy.tensorflow.MakeCallableRequest make_callable = 8;
  if (has_make_callable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_make_callable(), deterministic, target);
  }

  // .diplomacy.tensorflow.RunCallableRequest run_callable = 9;
  if (has_run_callable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_run_callable(), deterministic, target);
  }

  // .diplomacy.tensorflow.ReleaseCallableRequest release_callable = 10;
  if (has_release_callable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_release_callable(), deterministic, target);
  }

  // .diplomacy.tensorflow.NewReplaySession new_replay_session = 11;
  if (has_new_replay_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_new_replay_session(), deterministic, target);
  }

  // .diplomacy.tensorflow.CreateSessionResponse create_session_response = 21;
  if (has_create_session_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_create_session_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.ExtendSessionResponse extend_session_response = 22;
  if (has_extend_session_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_extend_session_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
  if (has_partial_run_setup_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_partial_run_setup_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.RunStepResponse run_step_response = 24;
  if (has_run_step_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_run_step_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.CloseSessionResponse close_session_response = 25;
  if (has_close_session_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_close_session_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.ListDevicesResponse list_devices_response = 26;
  if (has_list_devices_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_list_devices_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.ResetResponse reset_request_response = 27;
  if (has_reset_request_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->_internal_reset_request_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.MakeCallableResponse make_callable_response = 28;
  if (has_make_callable_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_make_callable_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.RunCallableResponse run_callable_response = 29;
  if (has_run_callable_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->_internal_run_callable_response(), deterministic, target);
  }

  // .diplomacy.tensorflow.ReleaseCallableResponse release_callable_response = 30;
  if (has_release_callable_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_release_callable_response(), deterministic, target);
  }

  // double start_time_us = 31;
  if (this->start_time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->start_time_us(), target);
  }

  // double end_time_us = 32;
  if (this->end_time_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->end_time_us(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.ReplayOp)
  return target;
}

size_t ReplayOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.ReplayOp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double start_time_us = 31;
  if (this->start_time_us() != 0) {
    total_size += 2 + 8;
  }

  // double end_time_us = 32;
  if (this->end_time_us() != 0) {
    total_size += 2 + 8;
  }

  switch (op_case()) {
    // .diplomacy.tensorflow.CreateSessionRequest create_session = 1;
    case kCreateSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.create_session_);
      break;
    }
    // .diplomacy.tensorflow.ExtendSessionRequest extend_session = 2;
    case kExtendSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.extend_session_);
      break;
    }
    // .diplomacy.tensorflow.PartialRunSetupRequest partial_run_setup = 3;
    case kPartialRunSetup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.partial_run_setup_);
      break;
    }
    // .diplomacy.tensorflow.RunStepRequest run_step = 4;
    case kRunStep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.run_step_);
      break;
    }
    // .diplomacy.tensorflow.CloseSessionRequest close_session = 5;
    case kCloseSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.close_session_);
      break;
    }
    // .diplomacy.tensorflow.ListDevicesRequest list_devices = 6;
    case kListDevices: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.list_devices_);
      break;
    }
    // .diplomacy.tensorflow.ResetRequest reset_request = 7;
    case kResetRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.reset_request_);
      break;
    }
    // .diplomacy.tensorflow.MakeCallableRequest make_callable = 8;
    case kMakeCallable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.make_callable_);
      break;
    }
    // .diplomacy.tensorflow.RunCallableRequest run_callable = 9;
    case kRunCallable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.run_callable_);
      break;
    }
    // .diplomacy.tensorflow.ReleaseCallableRequest release_callable = 10;
    case kReleaseCallable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.release_callable_);
      break;
    }
    // .diplomacy.tensorflow.NewReplaySession new_replay_session = 11;
    case kNewReplaySession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *op_.new_replay_session_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (response_case()) {
    // .diplomacy.tensorflow.CreateSessionResponse create_session_response = 21;
    case kCreateSessionResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.create_session_response_);
      break;
    }
    // .diplomacy.tensorflow.ExtendSessionResponse extend_session_response = 22;
    case kExtendSessionResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.extend_session_response_);
      break;
    }
    // .diplomacy.tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;
    case kPartialRunSetupResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.partial_run_setup_response_);
      break;
    }
    // .diplomacy.tensorflow.RunStepResponse run_step_response = 24;
    case kRunStepResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.run_step_response_);
      break;
    }
    // .diplomacy.tensorflow.CloseSessionResponse close_session_response = 25;
    case kCloseSessionResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.close_session_response_);
      break;
    }
    // .diplomacy.tensorflow.ListDevicesResponse list_devices_response = 26;
    case kListDevicesResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.list_devices_response_);
      break;
    }
    // .diplomacy.tensorflow.ResetResponse reset_request_response = 27;
    case kResetRequestResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.reset_request_response_);
      break;
    }
    // .diplomacy.tensorflow.MakeCallableResponse make_callable_response = 28;
    case kMakeCallableResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.make_callable_response_);
      break;
    }
    // .diplomacy.tensorflow.RunCallableResponse run_callable_response = 29;
    case kRunCallableResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.run_callable_response_);
      break;
    }
    // .diplomacy.tensorflow.ReleaseCallableResponse release_callable_response = 30;
    case kReleaseCallableResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.release_callable_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.ReplayOp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayOp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplayOp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.ReplayOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.ReplayOp)
    MergeFrom(*source);
  }
}

void ReplayOp::MergeFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.ReplayOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time_us() != 0) {
    set_start_time_us(from.start_time_us());
  }
  if (from.end_time_us() != 0) {
    set_end_time_us(from.end_time_us());
  }
  switch (from.op_case()) {
    case kCreateSession: {
      mutable_create_session()->::diplomacy::tensorflow::CreateSessionRequest::MergeFrom(from.create_session());
      break;
    }
    case kExtendSession: {
      mutable_extend_session()->::diplomacy::tensorflow::ExtendSessionRequest::MergeFrom(from.extend_session());
      break;
    }
    case kPartialRunSetup: {
      mutable_partial_run_setup()->::diplomacy::tensorflow::PartialRunSetupRequest::MergeFrom(from.partial_run_setup());
      break;
    }
    case kRunStep: {
      mutable_run_step()->::diplomacy::tensorflow::RunStepRequest::MergeFrom(from.run_step());
      break;
    }
    case kCloseSession: {
      mutable_close_session()->::diplomacy::tensorflow::CloseSessionRequest::MergeFrom(from.close_session());
      break;
    }
    case kListDevices: {
      mutable_list_devices()->::diplomacy::tensorflow::ListDevicesRequest::MergeFrom(from.list_devices());
      break;
    }
    case kResetRequest: {
      mutable_reset_request()->::diplomacy::tensorflow::ResetRequest::MergeFrom(from.reset_request());
      break;
    }
    case kMakeCallable: {
      mutable_make_callable()->::diplomacy::tensorflow::MakeCallableRequest::MergeFrom(from.make_callable());
      break;
    }
    case kRunCallable: {
      mutable_run_callable()->::diplomacy::tensorflow::RunCallableRequest::MergeFrom(from.run_callable());
      break;
    }
    case kReleaseCallable: {
      mutable_release_callable()->::diplomacy::tensorflow::ReleaseCallableRequest::MergeFrom(from.release_callable());
      break;
    }
    case kNewReplaySession: {
      mutable_new_replay_session()->::diplomacy::tensorflow::NewReplaySession::MergeFrom(from.new_replay_session());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  switch (from.response_case()) {
    case kCreateSessionResponse: {
      mutable_create_session_response()->::diplomacy::tensorflow::CreateSessionResponse::MergeFrom(from.create_session_response());
      break;
    }
    case kExtendSessionResponse: {
      mutable_extend_session_response()->::diplomacy::tensorflow::ExtendSessionResponse::MergeFrom(from.extend_session_response());
      break;
    }
    case kPartialRunSetupResponse: {
      mutable_partial_run_setup_response()->::diplomacy::tensorflow::PartialRunSetupResponse::MergeFrom(from.partial_run_setup_response());
      break;
    }
    case kRunStepResponse: {
      mutable_run_step_response()->::diplomacy::tensorflow::RunStepResponse::MergeFrom(from.run_step_response());
      break;
    }
    case kCloseSessionResponse: {
      mutable_close_session_response()->::diplomacy::tensorflow::CloseSessionResponse::MergeFrom(from.close_session_response());
      break;
    }
    case kListDevicesResponse: {
      mutable_list_devices_response()->::diplomacy::tensorflow::ListDevicesResponse::MergeFrom(from.list_devices_response());
      break;
    }
    case kResetRequestResponse: {
      mutable_reset_request_response()->::diplomacy::tensorflow::ResetResponse::MergeFrom(from.reset_request_response());
      break;
    }
    case kMakeCallableResponse: {
      mutable_make_callable_response()->::diplomacy::tensorflow::MakeCallableResponse::MergeFrom(from.make_callable_response());
      break;
    }
    case kRunCallableResponse: {
      mutable_run_callable_response()->::diplomacy::tensorflow::RunCallableResponse::MergeFrom(from.run_callable_response());
      break;
    }
    case kReleaseCallableResponse: {
      mutable_release_callable_response()->::diplomacy::tensorflow::ReleaseCallableResponse::MergeFrom(from.release_callable_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void ReplayOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayOp::CopyFrom(const ReplayOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.ReplayOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayOp::IsInitialized() const {
  return true;
}

void ReplayOp::Swap(ReplayOp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReplayOp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReplayOp::UnsafeArenaSwap(ReplayOp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReplayOp::InternalSwap(ReplayOp* other) {
  using std::swap;
  swap(start_time_us_, other->start_time_us_);
  swap(end_time_us_, other->end_time_us_);
  swap(op_, other->op_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(response_, other->response_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReplayOp::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fcore_2fprotobuf_2freplay_5flog_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::NewReplaySession* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::NewReplaySession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::NewReplaySession >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::ReplayOp* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::ReplayOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::ReplayOp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
