// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/lite/toco/toco_flags.proto

#include "diplomacy_tensorflow/lite/toco/toco_flags.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace toco {
class TocoFlagsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TocoFlags>
      _instance;
} _TocoFlags_default_instance_;
}  // namespace toco
namespace protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto {
static void InitDefaultsTocoFlags() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::toco::_TocoFlags_default_instance_;
    new (ptr) ::toco::TocoFlags();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::toco::TocoFlags::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TocoFlags =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTocoFlags}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TocoFlags.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, input_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, output_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, inference_input_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, inference_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, default_ranges_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, default_ranges_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, default_int16_ranges_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, default_int16_ranges_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, drop_fake_quant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, reorder_across_fake_quant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, allow_custom_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, drop_control_dependency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, debug_disable_recurrent_cell_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, propagate_fake_quant_num_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, allow_nudging_weights_to_use_fast_gemm_kernel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, dedupe_array_min_size_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, split_tflite_lstm_inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, quantize_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, dump_graphviz_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, dump_graphviz_include_video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, post_training_quantize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, enable_select_tf_ops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::toco::TocoFlags, force_select_tf_ops_),
  1,
  2,
  10,
  3,
  4,
  5,
  11,
  12,
  6,
  7,
  8,
  9,
  13,
  14,
  15,
  22,
  21,
  16,
  0,
  17,
  18,
  19,
  20,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::toco::TocoFlags)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::toco::_TocoFlags_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/lite/toco/toco_flags.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/diplomacy_tensorflow/lite/toco/toco_fl"
      "ags.proto\022\004toco\032*diplomacy_tensorflow/li"
      "te/toco/types.proto\"\326\006\n\tTocoFlags\022&\n\014inp"
      "ut_format\030\001 \001(\0162\020.toco.FileFormat\022\'\n\rout"
      "put_format\030\002 \001(\0162\020.toco.FileFormat\022.\n\024in"
      "ference_input_type\030\013 \001(\0162\020.toco.IODataTy"
      "pe\022(\n\016inference_type\030\004 \001(\0162\020.toco.IOData"
      "Type\022\032\n\022default_ranges_min\030\005 \001(\002\022\032\n\022defa"
      "ult_ranges_max\030\006 \001(\002\022 \n\030default_int16_ra"
      "nges_min\030\017 \001(\002\022 \n\030default_int16_ranges_m"
      "ax\030\020 \001(\002\022\027\n\017drop_fake_quant\030\007 \001(\010\022!\n\031reo"
      "rder_across_fake_quant\030\010 \001(\010\022\030\n\020allow_cu"
      "stom_ops\030\n \001(\010\022\037\n\027drop_control_dependenc"
      "y\030\014 \001(\010\022+\n#debug_disable_recurrent_cell_"
      "fusion\030\r \001(\010\022%\n\035propagate_fake_quant_num"
      "_bits\030\016 \001(\010\0225\n-allow_nudging_weights_to_"
      "use_fast_gemm_kernel\030\021 \001(\010\022\'\n\033dedupe_arr"
      "ay_min_size_bytes\030\022 \001(\003:\00264\022&\n\030split_tfl"
      "ite_lstm_inputs\030\023 \001(\010:\004true\022\037\n\020quantize_"
      "weights\030\024 \001(\010:\005false\022\031\n\021dump_graphviz_di"
      "r\030\030 \001(\t\022#\n\033dump_graphviz_include_video\030\031"
      " \001(\010\022%\n\026post_training_quantize\030\032 \001(\010:\005fa"
      "lse\022#\n\024enable_select_tf_ops\030\033 \001(\010:\005false"
      "\022\"\n\023force_select_tf_ops\030\034 \001(\010:\005false*\\\n\n"
      "FileFormat\022\027\n\023FILE_FORMAT_UNKNOWN\020\000\022\027\n\023T"
      "ENSORFLOW_GRAPHDEF\020\001\022\n\n\006TFLITE\020\002\022\020\n\014GRAP"
      "HVIZ_DOT\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1050);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/lite/toco/toco_flags.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftypes_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto
namespace toco {
const ::google::protobuf::EnumDescriptor* FileFormat_descriptor() {
  protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::file_level_enum_descriptors[0];
}
bool FileFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TocoFlags::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TocoFlags::kInputFormatFieldNumber;
const int TocoFlags::kOutputFormatFieldNumber;
const int TocoFlags::kInferenceInputTypeFieldNumber;
const int TocoFlags::kInferenceTypeFieldNumber;
const int TocoFlags::kDefaultRangesMinFieldNumber;
const int TocoFlags::kDefaultRangesMaxFieldNumber;
const int TocoFlags::kDefaultInt16RangesMinFieldNumber;
const int TocoFlags::kDefaultInt16RangesMaxFieldNumber;
const int TocoFlags::kDropFakeQuantFieldNumber;
const int TocoFlags::kReorderAcrossFakeQuantFieldNumber;
const int TocoFlags::kAllowCustomOpsFieldNumber;
const int TocoFlags::kDropControlDependencyFieldNumber;
const int TocoFlags::kDebugDisableRecurrentCellFusionFieldNumber;
const int TocoFlags::kPropagateFakeQuantNumBitsFieldNumber;
const int TocoFlags::kAllowNudgingWeightsToUseFastGemmKernelFieldNumber;
const int TocoFlags::kDedupeArrayMinSizeBytesFieldNumber;
const int TocoFlags::kSplitTfliteLstmInputsFieldNumber;
const int TocoFlags::kQuantizeWeightsFieldNumber;
const int TocoFlags::kDumpGraphvizDirFieldNumber;
const int TocoFlags::kDumpGraphvizIncludeVideoFieldNumber;
const int TocoFlags::kPostTrainingQuantizeFieldNumber;
const int TocoFlags::kEnableSelectTfOpsFieldNumber;
const int TocoFlags::kForceSelectTfOpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TocoFlags::TocoFlags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::scc_info_TocoFlags.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:toco.TocoFlags)
}
TocoFlags::TocoFlags(const TocoFlags& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dump_graphviz_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dump_graphviz_dir()) {
    dump_graphviz_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_graphviz_dir_);
  }
  ::memcpy(&input_format_, &from.input_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&dedupe_array_min_size_bytes_) -
    reinterpret_cast<char*>(&input_format_)) + sizeof(dedupe_array_min_size_bytes_));
  // @@protoc_insertion_point(copy_constructor:toco.TocoFlags)
}

void TocoFlags::SharedCtor() {
  dump_graphviz_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_select_tf_ops_) -
      reinterpret_cast<char*>(&input_format_)) + sizeof(force_select_tf_ops_));
  split_tflite_lstm_inputs_ = true;
  dedupe_array_min_size_bytes_ = GOOGLE_LONGLONG(64);
}

TocoFlags::~TocoFlags() {
  // @@protoc_insertion_point(destructor:toco.TocoFlags)
  SharedDtor();
}

void TocoFlags::SharedDtor() {
  dump_graphviz_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TocoFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TocoFlags::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TocoFlags& TocoFlags::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::scc_info_TocoFlags.base);
  return *internal_default_instance();
}


void TocoFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:toco.TocoFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dump_graphviz_dir_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&input_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reorder_across_fake_quant_) -
        reinterpret_cast<char*>(&input_format_)) + sizeof(reorder_across_fake_quant_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&allow_custom_ops_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_nudging_weights_to_use_fast_gemm_kernel_) -
        reinterpret_cast<char*>(&allow_custom_ops_)) + sizeof(allow_nudging_weights_to_use_fast_gemm_kernel_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&quantize_weights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_select_tf_ops_) -
        reinterpret_cast<char*>(&quantize_weights_)) + sizeof(force_select_tf_ops_));
    split_tflite_lstm_inputs_ = true;
    dedupe_array_min_size_bytes_ = GOOGLE_LONGLONG(64);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TocoFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:toco.TocoFlags)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .toco.FileFormat input_format = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toco::FileFormat_IsValid(value)) {
            set_input_format(static_cast< ::toco::FileFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .toco.FileFormat output_format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toco::FileFormat_IsValid(value)) {
            set_output_format(static_cast< ::toco::FileFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .toco.IODataType inference_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toco::IODataType_IsValid(value)) {
            set_inference_type(static_cast< ::toco::IODataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_ranges_min = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_default_ranges_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_ranges_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_ranges_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_default_ranges_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_ranges_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool drop_fake_quant = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_drop_fake_quant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_fake_quant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reorder_across_fake_quant = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_reorder_across_fake_quant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reorder_across_fake_quant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_custom_ops = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_allow_custom_ops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_custom_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .toco.IODataType inference_input_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::toco::IODataType_IsValid(value)) {
            set_inference_input_type(static_cast< ::toco::IODataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool drop_control_dependency = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_drop_control_dependency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_control_dependency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_disable_recurrent_cell_fusion = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_debug_disable_recurrent_cell_fusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_disable_recurrent_cell_fusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool propagate_fake_quant_num_bits = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_propagate_fake_quant_num_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &propagate_fake_quant_num_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_int16_ranges_min = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_default_int16_ranges_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_int16_ranges_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_int16_ranges_max = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_default_int16_ranges_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_int16_ranges_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_allow_nudging_weights_to_use_fast_gemm_kernel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_nudging_weights_to_use_fast_gemm_kernel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_dedupe_array_min_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dedupe_array_min_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool split_tflite_lstm_inputs = 19 [default = true];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_split_tflite_lstm_inputs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_tflite_lstm_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool quantize_weights = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_quantize_weights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &quantize_weights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dump_graphviz_dir = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_graphviz_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dump_graphviz_dir().data(), static_cast<int>(this->dump_graphviz_dir().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toco.TocoFlags.dump_graphviz_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dump_graphviz_include_video = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_dump_graphviz_include_video();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_graphviz_include_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool post_training_quantize = 26 [default = false];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_post_training_quantize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_training_quantize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_select_tf_ops = 27 [default = false];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_enable_select_tf_ops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_select_tf_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_select_tf_ops = 28 [default = false];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_force_select_tf_ops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_select_tf_ops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:toco.TocoFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:toco.TocoFlags)
  return false;
#undef DO_
}

void TocoFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:toco.TocoFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .toco.FileFormat input_format = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->input_format(), output);
  }

  // optional .toco.FileFormat output_format = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->output_format(), output);
  }

  // optional .toco.IODataType inference_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->inference_type(), output);
  }

  // optional float default_ranges_min = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->default_ranges_min(), output);
  }

  // optional float default_ranges_max = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->default_ranges_max(), output);
  }

  // optional bool drop_fake_quant = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->drop_fake_quant(), output);
  }

  // optional bool reorder_across_fake_quant = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reorder_across_fake_quant(), output);
  }

  // optional bool allow_custom_ops = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_custom_ops(), output);
  }

  // optional .toco.IODataType inference_input_type = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->inference_input_type(), output);
  }

  // optional bool drop_control_dependency = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->drop_control_dependency(), output);
  }

  // optional bool debug_disable_recurrent_cell_fusion = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->debug_disable_recurrent_cell_fusion(), output);
  }

  // optional bool propagate_fake_quant_num_bits = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->propagate_fake_quant_num_bits(), output);
  }

  // optional float default_int16_ranges_min = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->default_int16_ranges_min(), output);
  }

  // optional float default_int16_ranges_max = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->default_int16_ranges_max(), output);
  }

  // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->allow_nudging_weights_to_use_fast_gemm_kernel(), output);
  }

  // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->dedupe_array_min_size_bytes(), output);
  }

  // optional bool split_tflite_lstm_inputs = 19 [default = true];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->split_tflite_lstm_inputs(), output);
  }

  // optional bool quantize_weights = 20 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->quantize_weights(), output);
  }

  // optional string dump_graphviz_dir = 24;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_graphviz_dir().data(), static_cast<int>(this->dump_graphviz_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toco.TocoFlags.dump_graphviz_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->dump_graphviz_dir(), output);
  }

  // optional bool dump_graphviz_include_video = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->dump_graphviz_include_video(), output);
  }

  // optional bool post_training_quantize = 26 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->post_training_quantize(), output);
  }

  // optional bool enable_select_tf_ops = 27 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->enable_select_tf_ops(), output);
  }

  // optional bool force_select_tf_ops = 28 [default = false];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->force_select_tf_ops(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:toco.TocoFlags)
}

::google::protobuf::uint8* TocoFlags::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:toco.TocoFlags)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .toco.FileFormat input_format = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->input_format(), target);
  }

  // optional .toco.FileFormat output_format = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->output_format(), target);
  }

  // optional .toco.IODataType inference_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->inference_type(), target);
  }

  // optional float default_ranges_min = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->default_ranges_min(), target);
  }

  // optional float default_ranges_max = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->default_ranges_max(), target);
  }

  // optional bool drop_fake_quant = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->drop_fake_quant(), target);
  }

  // optional bool reorder_across_fake_quant = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reorder_across_fake_quant(), target);
  }

  // optional bool allow_custom_ops = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_custom_ops(), target);
  }

  // optional .toco.IODataType inference_input_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->inference_input_type(), target);
  }

  // optional bool drop_control_dependency = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->drop_control_dependency(), target);
  }

  // optional bool debug_disable_recurrent_cell_fusion = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->debug_disable_recurrent_cell_fusion(), target);
  }

  // optional bool propagate_fake_quant_num_bits = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->propagate_fake_quant_num_bits(), target);
  }

  // optional float default_int16_ranges_min = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->default_int16_ranges_min(), target);
  }

  // optional float default_int16_ranges_max = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->default_int16_ranges_max(), target);
  }

  // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->allow_nudging_weights_to_use_fast_gemm_kernel(), target);
  }

  // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->dedupe_array_min_size_bytes(), target);
  }

  // optional bool split_tflite_lstm_inputs = 19 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->split_tflite_lstm_inputs(), target);
  }

  // optional bool quantize_weights = 20 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->quantize_weights(), target);
  }

  // optional string dump_graphviz_dir = 24;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_graphviz_dir().data(), static_cast<int>(this->dump_graphviz_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toco.TocoFlags.dump_graphviz_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->dump_graphviz_dir(), target);
  }

  // optional bool dump_graphviz_include_video = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->dump_graphviz_include_video(), target);
  }

  // optional bool post_training_quantize = 26 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->post_training_quantize(), target);
  }

  // optional bool enable_select_tf_ops = 27 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->enable_select_tf_ops(), target);
  }

  // optional bool force_select_tf_ops = 28 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->force_select_tf_ops(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:toco.TocoFlags)
  return target;
}

size_t TocoFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:toco.TocoFlags)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string dump_graphviz_dir = 24;
    if (has_dump_graphviz_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dump_graphviz_dir());
    }

    // optional .toco.FileFormat input_format = 1;
    if (has_input_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_format());
    }

    // optional .toco.FileFormat output_format = 2;
    if (has_output_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_format());
    }

    // optional .toco.IODataType inference_type = 4;
    if (has_inference_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inference_type());
    }

    // optional float default_ranges_min = 5;
    if (has_default_ranges_min()) {
      total_size += 1 + 4;
    }

    // optional float default_ranges_max = 6;
    if (has_default_ranges_max()) {
      total_size += 1 + 4;
    }

    // optional bool drop_fake_quant = 7;
    if (has_drop_fake_quant()) {
      total_size += 1 + 1;
    }

    // optional bool reorder_across_fake_quant = 8;
    if (has_reorder_across_fake_quant()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool allow_custom_ops = 10;
    if (has_allow_custom_ops()) {
      total_size += 1 + 1;
    }

    // optional bool drop_control_dependency = 12;
    if (has_drop_control_dependency()) {
      total_size += 1 + 1;
    }

    // optional .toco.IODataType inference_input_type = 11;
    if (has_inference_input_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inference_input_type());
    }

    // optional float default_int16_ranges_min = 15;
    if (has_default_int16_ranges_min()) {
      total_size += 1 + 4;
    }

    // optional float default_int16_ranges_max = 16;
    if (has_default_int16_ranges_max()) {
      total_size += 2 + 4;
    }

    // optional bool debug_disable_recurrent_cell_fusion = 13;
    if (has_debug_disable_recurrent_cell_fusion()) {
      total_size += 1 + 1;
    }

    // optional bool propagate_fake_quant_num_bits = 14;
    if (has_propagate_fake_quant_num_bits()) {
      total_size += 1 + 1;
    }

    // optional bool allow_nudging_weights_to_use_fast_gemm_kernel = 17;
    if (has_allow_nudging_weights_to_use_fast_gemm_kernel()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional bool quantize_weights = 20 [default = false];
    if (has_quantize_weights()) {
      total_size += 2 + 1;
    }

    // optional bool dump_graphviz_include_video = 25;
    if (has_dump_graphviz_include_video()) {
      total_size += 2 + 1;
    }

    // optional bool post_training_quantize = 26 [default = false];
    if (has_post_training_quantize()) {
      total_size += 2 + 1;
    }

    // optional bool enable_select_tf_ops = 27 [default = false];
    if (has_enable_select_tf_ops()) {
      total_size += 2 + 1;
    }

    // optional bool force_select_tf_ops = 28 [default = false];
    if (has_force_select_tf_ops()) {
      total_size += 2 + 1;
    }

    // optional bool split_tflite_lstm_inputs = 19 [default = true];
    if (has_split_tflite_lstm_inputs()) {
      total_size += 2 + 1;
    }

    // optional int64 dedupe_array_min_size_bytes = 18 [default = 64];
    if (has_dedupe_array_min_size_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dedupe_array_min_size_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TocoFlags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:toco.TocoFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const TocoFlags* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TocoFlags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:toco.TocoFlags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:toco.TocoFlags)
    MergeFrom(*source);
  }
}

void TocoFlags::MergeFrom(const TocoFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:toco.TocoFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dump_graphviz_dir();
      dump_graphviz_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_graphviz_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      input_format_ = from.input_format_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_format_ = from.output_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      inference_type_ = from.inference_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_ranges_min_ = from.default_ranges_min_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_ranges_max_ = from.default_ranges_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      drop_fake_quant_ = from.drop_fake_quant_;
    }
    if (cached_has_bits & 0x00000080u) {
      reorder_across_fake_quant_ = from.reorder_across_fake_quant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      allow_custom_ops_ = from.allow_custom_ops_;
    }
    if (cached_has_bits & 0x00000200u) {
      drop_control_dependency_ = from.drop_control_dependency_;
    }
    if (cached_has_bits & 0x00000400u) {
      inference_input_type_ = from.inference_input_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_int16_ranges_min_ = from.default_int16_ranges_min_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_int16_ranges_max_ = from.default_int16_ranges_max_;
    }
    if (cached_has_bits & 0x00002000u) {
      debug_disable_recurrent_cell_fusion_ = from.debug_disable_recurrent_cell_fusion_;
    }
    if (cached_has_bits & 0x00004000u) {
      propagate_fake_quant_num_bits_ = from.propagate_fake_quant_num_bits_;
    }
    if (cached_has_bits & 0x00008000u) {
      allow_nudging_weights_to_use_fast_gemm_kernel_ = from.allow_nudging_weights_to_use_fast_gemm_kernel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      quantize_weights_ = from.quantize_weights_;
    }
    if (cached_has_bits & 0x00020000u) {
      dump_graphviz_include_video_ = from.dump_graphviz_include_video_;
    }
    if (cached_has_bits & 0x00040000u) {
      post_training_quantize_ = from.post_training_quantize_;
    }
    if (cached_has_bits & 0x00080000u) {
      enable_select_tf_ops_ = from.enable_select_tf_ops_;
    }
    if (cached_has_bits & 0x00100000u) {
      force_select_tf_ops_ = from.force_select_tf_ops_;
    }
    if (cached_has_bits & 0x00200000u) {
      split_tflite_lstm_inputs_ = from.split_tflite_lstm_inputs_;
    }
    if (cached_has_bits & 0x00400000u) {
      dedupe_array_min_size_bytes_ = from.dedupe_array_min_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TocoFlags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:toco.TocoFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TocoFlags::CopyFrom(const TocoFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:toco.TocoFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TocoFlags::IsInitialized() const {
  return true;
}

void TocoFlags::Swap(TocoFlags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TocoFlags::InternalSwap(TocoFlags* other) {
  using std::swap;
  dump_graphviz_dir_.Swap(&other->dump_graphviz_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_format_, other->input_format_);
  swap(output_format_, other->output_format_);
  swap(inference_type_, other->inference_type_);
  swap(default_ranges_min_, other->default_ranges_min_);
  swap(default_ranges_max_, other->default_ranges_max_);
  swap(drop_fake_quant_, other->drop_fake_quant_);
  swap(reorder_across_fake_quant_, other->reorder_across_fake_quant_);
  swap(allow_custom_ops_, other->allow_custom_ops_);
  swap(drop_control_dependency_, other->drop_control_dependency_);
  swap(inference_input_type_, other->inference_input_type_);
  swap(default_int16_ranges_min_, other->default_int16_ranges_min_);
  swap(default_int16_ranges_max_, other->default_int16_ranges_max_);
  swap(debug_disable_recurrent_cell_fusion_, other->debug_disable_recurrent_cell_fusion_);
  swap(propagate_fake_quant_num_bits_, other->propagate_fake_quant_num_bits_);
  swap(allow_nudging_weights_to_use_fast_gemm_kernel_, other->allow_nudging_weights_to_use_fast_gemm_kernel_);
  swap(quantize_weights_, other->quantize_weights_);
  swap(dump_graphviz_include_video_, other->dump_graphviz_include_video_);
  swap(post_training_quantize_, other->post_training_quantize_);
  swap(enable_select_tf_ops_, other->enable_select_tf_ops_);
  swap(force_select_tf_ops_, other->force_select_tf_ops_);
  swap(split_tflite_lstm_inputs_, other->split_tflite_lstm_inputs_);
  swap(dedupe_array_min_size_bytes_, other->dedupe_array_min_size_bytes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TocoFlags::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2flite_2ftoco_2ftoco_5fflags_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace toco
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::toco::TocoFlags* Arena::CreateMaybeMessage< ::toco::TocoFlags >(Arena* arena) {
  return Arena::CreateInternal< ::toco::TocoFlags >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
