// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/python/training/checkpoint_state.proto

#include "diplomacy_tensorflow/python/training/checkpoint_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace diplomacy {
namespace tensorflow {
class CheckpointStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckpointState>
      _instance;
} _CheckpointState_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto {
static void InitDefaultsCheckpointState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_CheckpointState_default_instance_;
    new (ptr) ::diplomacy::tensorflow::CheckpointState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::CheckpointState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckpointState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckpointState}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CheckpointState.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CheckpointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CheckpointState, model_checkpoint_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CheckpointState, all_model_checkpoint_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CheckpointState, all_model_checkpoint_timestamps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CheckpointState, last_preserved_timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::CheckpointState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_CheckpointState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/python/training/checkpoint_state.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n;diplomacy_tensorflow/python/training/c"
      "heckpoint_state.proto\022\024diplomacy.tensorf"
      "low\"\237\001\n\017CheckpointState\022\035\n\025model_checkpo"
      "int_path\030\001 \001(\t\022\"\n\032all_model_checkpoint_p"
      "aths\030\002 \003(\t\022\'\n\037all_model_checkpoint_times"
      "tamps\030\003 \003(\001\022 \n\030last_preserved_timestamp\030"
      "\004 \001(\001B\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/python/training/checkpoint_state.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto
namespace diplomacy {
namespace tensorflow {

// ===================================================================

void CheckpointState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckpointState::kModelCheckpointPathFieldNumber;
const int CheckpointState::kAllModelCheckpointPathsFieldNumber;
const int CheckpointState::kAllModelCheckpointTimestampsFieldNumber;
const int CheckpointState::kLastPreservedTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckpointState::CheckpointState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto::scc_info_CheckpointState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.CheckpointState)
}
CheckpointState::CheckpointState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  all_model_checkpoint_paths_(arena),
  all_model_checkpoint_timestamps_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto::scc_info_CheckpointState.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.CheckpointState)
}
CheckpointState::CheckpointState(const CheckpointState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      all_model_checkpoint_paths_(from.all_model_checkpoint_paths_),
      all_model_checkpoint_timestamps_(from.all_model_checkpoint_timestamps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_checkpoint_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_checkpoint_path().size() > 0) {
    model_checkpoint_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_checkpoint_path(),
      GetArenaNoVirtual());
  }
  last_preserved_timestamp_ = from.last_preserved_timestamp_;
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.CheckpointState)
}

void CheckpointState::SharedCtor() {
  model_checkpoint_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_preserved_timestamp_ = 0;
}

CheckpointState::~CheckpointState() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.CheckpointState)
  SharedDtor();
}

void CheckpointState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  model_checkpoint_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckpointState::ArenaDtor(void* object) {
  CheckpointState* _this = reinterpret_cast< CheckpointState* >(object);
  (void)_this;
}
void CheckpointState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CheckpointState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CheckpointState::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckpointState& CheckpointState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto::scc_info_CheckpointState.base);
  return *internal_default_instance();
}


void CheckpointState::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.CheckpointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_model_checkpoint_paths_.Clear();
  all_model_checkpoint_timestamps_.Clear();
  model_checkpoint_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  last_preserved_timestamp_ = 0;
  _internal_metadata_.Clear();
}

bool CheckpointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.CheckpointState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_checkpoint_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_checkpoint_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_checkpoint_path().data(), static_cast<int>(this->model_checkpoint_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.CheckpointState.model_checkpoint_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string all_model_checkpoint_paths = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_all_model_checkpoint_paths()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->all_model_checkpoint_paths(this->all_model_checkpoint_paths_size() - 1).data(),
            static_cast<int>(this->all_model_checkpoint_paths(this->all_model_checkpoint_paths_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "diplomacy.tensorflow.CheckpointState.all_model_checkpoint_paths"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double all_model_checkpoint_timestamps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_all_model_checkpoint_timestamps())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_all_model_checkpoint_timestamps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double last_preserved_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_preserved_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.CheckpointState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.CheckpointState)
  return false;
#undef DO_
}

void CheckpointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.CheckpointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_path().data(), static_cast<int>(this->model_checkpoint_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.CheckpointState.model_checkpoint_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_checkpoint_path(), output);
  }

  // repeated string all_model_checkpoint_paths = 2;
  for (int i = 0, n = this->all_model_checkpoint_paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->all_model_checkpoint_paths(i).data(), static_cast<int>(this->all_model_checkpoint_paths(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.CheckpointState.all_model_checkpoint_paths");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->all_model_checkpoint_paths(i), output);
  }

  // repeated double all_model_checkpoint_timestamps = 3;
  if (this->all_model_checkpoint_timestamps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _all_model_checkpoint_timestamps_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->all_model_checkpoint_timestamps().data(), this->all_model_checkpoint_timestamps_size(), output);
  }

  // double last_preserved_timestamp = 4;
  if (this->last_preserved_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->last_preserved_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.CheckpointState)
}

::google::protobuf::uint8* CheckpointState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.CheckpointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_checkpoint_path().data(), static_cast<int>(this->model_checkpoint_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.CheckpointState.model_checkpoint_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_checkpoint_path(), target);
  }

  // repeated string all_model_checkpoint_paths = 2;
  for (int i = 0, n = this->all_model_checkpoint_paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->all_model_checkpoint_paths(i).data(), static_cast<int>(this->all_model_checkpoint_paths(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "diplomacy.tensorflow.CheckpointState.all_model_checkpoint_paths");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->all_model_checkpoint_paths(i), target);
  }

  // repeated double all_model_checkpoint_timestamps = 3;
  if (this->all_model_checkpoint_timestamps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _all_model_checkpoint_timestamps_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->all_model_checkpoint_timestamps_, target);
  }

  // double last_preserved_timestamp = 4;
  if (this->last_preserved_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->last_preserved_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.CheckpointState)
  return target;
}

size_t CheckpointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.CheckpointState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string all_model_checkpoint_paths = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->all_model_checkpoint_paths_size());
  for (int i = 0, n = this->all_model_checkpoint_paths_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->all_model_checkpoint_paths(i));
  }

  // repeated double all_model_checkpoint_timestamps = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->all_model_checkpoint_timestamps_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _all_model_checkpoint_timestamps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string model_checkpoint_path = 1;
  if (this->model_checkpoint_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_checkpoint_path());
  }

  // double last_preserved_timestamp = 4;
  if (this->last_preserved_timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckpointState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.CheckpointState)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckpointState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckpointState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.CheckpointState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.CheckpointState)
    MergeFrom(*source);
  }
}

void CheckpointState::MergeFrom(const CheckpointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.CheckpointState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_model_checkpoint_paths_.MergeFrom(from.all_model_checkpoint_paths_);
  all_model_checkpoint_timestamps_.MergeFrom(from.all_model_checkpoint_timestamps_);
  if (from.model_checkpoint_path().size() > 0) {
    set_model_checkpoint_path(from.model_checkpoint_path());
  }
  if (from.last_preserved_timestamp() != 0) {
    set_last_preserved_timestamp(from.last_preserved_timestamp());
  }
}

void CheckpointState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.CheckpointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointState::CopyFrom(const CheckpointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.CheckpointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointState::IsInitialized() const {
  return true;
}

void CheckpointState::Swap(CheckpointState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CheckpointState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CheckpointState::UnsafeArenaSwap(CheckpointState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CheckpointState::InternalSwap(CheckpointState* other) {
  using std::swap;
  all_model_checkpoint_paths_.InternalSwap(CastToBase(&other->all_model_checkpoint_paths_));
  all_model_checkpoint_timestamps_.InternalSwap(&other->all_model_checkpoint_timestamps_);
  model_checkpoint_path_.Swap(&other->model_checkpoint_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_preserved_timestamp_, other->last_preserved_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckpointState::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2ftraining_2fcheckpoint_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::CheckpointState* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::CheckpointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::CheckpointState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
