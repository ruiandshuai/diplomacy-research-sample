// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/python/framework/cpp_shape_inference.proto

#include "diplomacy_tensorflow/python/framework/cpp_shape_inference.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TensorShapeProto;
}  // namespace protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto
namespace protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CppShapeInferenceResult_HandleData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CppShapeInferenceResult_HandleShapeAndType;
}  // namespace protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto
namespace diplomacy {
namespace tensorflow {
class CppShapeInferenceResult_HandleShapeAndTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CppShapeInferenceResult_HandleShapeAndType>
      _instance;
} _CppShapeInferenceResult_HandleShapeAndType_default_instance_;
class CppShapeInferenceResult_HandleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CppShapeInferenceResult_HandleData>
      _instance;
} _CppShapeInferenceResult_HandleData_default_instance_;
class CppShapeInferenceResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CppShapeInferenceResult>
      _instance;
} _CppShapeInferenceResult_default_instance_;
class CppShapeInferenceInputsNeededDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CppShapeInferenceInputsNeeded>
      _instance;
} _CppShapeInferenceInputsNeeded_default_instance_;
}  // namespace tensorflow
}  // namespace diplomacy
namespace protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto {
static void InitDefaultsCppShapeInferenceResult_HandleShapeAndType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_CppShapeInferenceResult_HandleShapeAndType_default_instance_;
    new (ptr) ::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CppShapeInferenceResult_HandleShapeAndType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCppShapeInferenceResult_HandleShapeAndType}, {
      &protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::scc_info_TensorShapeProto.base,}};

static void InitDefaultsCppShapeInferenceResult_HandleData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_CppShapeInferenceResult_HandleData_default_instance_;
    new (ptr) ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CppShapeInferenceResult_HandleData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCppShapeInferenceResult_HandleData}, {
      &protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleShapeAndType.base,}};

static void InitDefaultsCppShapeInferenceResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_CppShapeInferenceResult_default_instance_;
    new (ptr) ::diplomacy::tensorflow::CppShapeInferenceResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::CppShapeInferenceResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CppShapeInferenceResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCppShapeInferenceResult}, {
      &protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::scc_info_TensorShapeProto.base,
      &protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleData.base,}};

static void InitDefaultsCppShapeInferenceInputsNeeded() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::diplomacy::tensorflow::_CppShapeInferenceInputsNeeded_default_instance_;
    new (ptr) ::diplomacy::tensorflow::CppShapeInferenceInputsNeeded();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::diplomacy::tensorflow::CppShapeInferenceInputsNeeded::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CppShapeInferenceInputsNeeded =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCppShapeInferenceInputsNeeded}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CppShapeInferenceResult_HandleShapeAndType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CppShapeInferenceResult_HandleData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CppShapeInferenceResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CppShapeInferenceInputsNeeded.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType, dtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult_HandleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult_HandleData, is_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult_HandleData, shape_and_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceResult, handle_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceInputsNeeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceInputsNeeded, input_tensors_needed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::diplomacy::tensorflow::CppShapeInferenceInputsNeeded, input_tensors_as_shapes_needed_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType)},
  { 7, -1, sizeof(::diplomacy::tensorflow::CppShapeInferenceResult_HandleData)},
  { 14, -1, sizeof(::diplomacy::tensorflow::CppShapeInferenceResult)},
  { 21, -1, sizeof(::diplomacy::tensorflow::CppShapeInferenceInputsNeeded)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_CppShapeInferenceResult_HandleShapeAndType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_CppShapeInferenceResult_HandleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_CppShapeInferenceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::diplomacy::tensorflow::_CppShapeInferenceInputsNeeded_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "diplomacy_tensorflow/python/framework/cpp_shape_inference.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\?diplomacy_tensorflow/python/framework/"
      "cpp_shape_inference.proto\022\024diplomacy.ten"
      "sorflow\032/diplomacy_tensorflow/core/frame"
      "work/types.proto\0326diplomacy_tensorflow/c"
      "ore/framework/tensor_shape.proto\"\237\003\n\027Cpp"
      "ShapeInferenceResult\0225\n\005shape\030\001 \001(\0132&.di"
      "plomacy.tensorflow.TensorShapeProto\022M\n\013h"
      "andle_data\030\004 \001(\01328.diplomacy.tensorflow."
      "CppShapeInferenceResult.HandleData\032z\n\022Ha"
      "ndleShapeAndType\0225\n\005shape\030\001 \001(\0132&.diplom"
      "acy.tensorflow.TensorShapeProto\022-\n\005dtype"
      "\030\002 \001(\0162\036.diplomacy.tensorflow.DataType\032v"
      "\n\nHandleData\022\016\n\006is_set\030\001 \001(\010\022X\n\016shape_an"
      "d_type\030\002 \003(\0132@.diplomacy.tensorflow.CppS"
      "hapeInferenceResult.HandleShapeAndTypeJ\004"
      "\010\002\020\003J\004\010\003\020\004\"e\n\035CppShapeInferenceInputsNee"
      "ded\022\034\n\024input_tensors_needed\030\001 \003(\005\022&\n\036inp"
      "ut_tensors_as_shapes_needed\030\002 \003(\005B\003\370\001\001b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 726);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diplomacy_tensorflow/python/framework/cpp_shape_inference.proto", &protobuf_RegisterTypes);
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftypes_2eproto::AddDescriptors();
  ::protobuf_diplomacy_5ftensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto
namespace diplomacy {
namespace tensorflow {

// ===================================================================

void CppShapeInferenceResult_HandleShapeAndType::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::_CppShapeInferenceResult_HandleShapeAndType_default_instance_._instance.get_mutable()->shape_ = const_cast< ::diplomacy::tensorflow::TensorShapeProto*>(
      ::diplomacy::tensorflow::TensorShapeProto::internal_default_instance());
}
void CppShapeInferenceResult_HandleShapeAndType::unsafe_arena_set_allocated_shape(
    ::diplomacy::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType.shape)
}
void CppShapeInferenceResult_HandleShapeAndType::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CppShapeInferenceResult_HandleShapeAndType::kShapeFieldNumber;
const int CppShapeInferenceResult_HandleShapeAndType::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CppShapeInferenceResult_HandleShapeAndType::CppShapeInferenceResult_HandleShapeAndType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleShapeAndType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
}
CppShapeInferenceResult_HandleShapeAndType::CppShapeInferenceResult_HandleShapeAndType(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleShapeAndType.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
}
CppShapeInferenceResult_HandleShapeAndType::CppShapeInferenceResult_HandleShapeAndType(const CppShapeInferenceResult_HandleShapeAndType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::diplomacy::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = NULL;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
}

void CppShapeInferenceResult_HandleShapeAndType::SharedCtor() {
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

CppShapeInferenceResult_HandleShapeAndType::~CppShapeInferenceResult_HandleShapeAndType() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  SharedDtor();
}

void CppShapeInferenceResult_HandleShapeAndType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete shape_;
}

void CppShapeInferenceResult_HandleShapeAndType::ArenaDtor(void* object) {
  CppShapeInferenceResult_HandleShapeAndType* _this = reinterpret_cast< CppShapeInferenceResult_HandleShapeAndType* >(object);
  (void)_this;
}
void CppShapeInferenceResult_HandleShapeAndType::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CppShapeInferenceResult_HandleShapeAndType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CppShapeInferenceResult_HandleShapeAndType::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CppShapeInferenceResult_HandleShapeAndType& CppShapeInferenceResult_HandleShapeAndType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleShapeAndType.base);
  return *internal_default_instance();
}


void CppShapeInferenceResult_HandleShapeAndType::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  dtype_ = 0;
  _internal_metadata_.Clear();
}

bool CppShapeInferenceResult_HandleShapeAndType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.TensorShapeProto shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.DataType dtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::diplomacy::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  return false;
#undef DO_
}

void CppShapeInferenceResult_HandleShapeAndType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.TensorShapeProto shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_shape(), output);
  }

  // .diplomacy.tensorflow.DataType dtype = 2;
  if (this->dtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dtype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
}

::google::protobuf::uint8* CppShapeInferenceResult_HandleShapeAndType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.TensorShapeProto shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_shape(), deterministic, target);
  }

  // .diplomacy.tensorflow.DataType dtype = 2;
  if (this->dtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dtype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  return target;
}

size_t CppShapeInferenceResult_HandleShapeAndType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .diplomacy.tensorflow.TensorShapeProto shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .diplomacy.tensorflow.DataType dtype = 2;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CppShapeInferenceResult_HandleShapeAndType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  GOOGLE_DCHECK_NE(&from, this);
  const CppShapeInferenceResult_HandleShapeAndType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CppShapeInferenceResult_HandleShapeAndType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
    MergeFrom(*source);
  }
}

void CppShapeInferenceResult_HandleShapeAndType::MergeFrom(const CppShapeInferenceResult_HandleShapeAndType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    mutable_shape()->::diplomacy::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void CppShapeInferenceResult_HandleShapeAndType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CppShapeInferenceResult_HandleShapeAndType::CopyFrom(const CppShapeInferenceResult_HandleShapeAndType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceResult_HandleShapeAndType::IsInitialized() const {
  return true;
}

void CppShapeInferenceResult_HandleShapeAndType::Swap(CppShapeInferenceResult_HandleShapeAndType* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CppShapeInferenceResult_HandleShapeAndType* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CppShapeInferenceResult_HandleShapeAndType::UnsafeArenaSwap(CppShapeInferenceResult_HandleShapeAndType* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CppShapeInferenceResult_HandleShapeAndType::InternalSwap(CppShapeInferenceResult_HandleShapeAndType* other) {
  using std::swap;
  swap(shape_, other->shape_);
  swap(dtype_, other->dtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CppShapeInferenceResult_HandleShapeAndType::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CppShapeInferenceResult_HandleData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CppShapeInferenceResult_HandleData::kIsSetFieldNumber;
const int CppShapeInferenceResult_HandleData::kShapeAndTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CppShapeInferenceResult_HandleData::CppShapeInferenceResult_HandleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
}
CppShapeInferenceResult_HandleData::CppShapeInferenceResult_HandleData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  shape_and_type_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleData.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
}
CppShapeInferenceResult_HandleData::CppShapeInferenceResult_HandleData(const CppShapeInferenceResult_HandleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_and_type_(from.shape_and_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_set_ = from.is_set_;
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
}

void CppShapeInferenceResult_HandleData::SharedCtor() {
  is_set_ = false;
}

CppShapeInferenceResult_HandleData::~CppShapeInferenceResult_HandleData() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  SharedDtor();
}

void CppShapeInferenceResult_HandleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CppShapeInferenceResult_HandleData::ArenaDtor(void* object) {
  CppShapeInferenceResult_HandleData* _this = reinterpret_cast< CppShapeInferenceResult_HandleData* >(object);
  (void)_this;
}
void CppShapeInferenceResult_HandleData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CppShapeInferenceResult_HandleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CppShapeInferenceResult_HandleData::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CppShapeInferenceResult_HandleData& CppShapeInferenceResult_HandleData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult_HandleData.base);
  return *internal_default_instance();
}


void CppShapeInferenceResult_HandleData::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_and_type_.Clear();
  is_set_ = false;
  _internal_metadata_.Clear();
}

bool CppShapeInferenceResult_HandleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shape_and_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  return false;
#undef DO_
}

void CppShapeInferenceResult_HandleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_set = 1;
  if (this->is_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_set(), output);
  }

  // repeated .diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_and_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->shape_and_type(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
}

::google::protobuf::uint8* CppShapeInferenceResult_HandleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_set = 1;
  if (this->is_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_set(), target);
  }

  // repeated .diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_and_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->shape_and_type(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  return target;
}

size_t CppShapeInferenceResult_HandleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .diplomacy.tensorflow.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->shape_and_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shape_and_type(static_cast<int>(i)));
    }
  }

  // bool is_set = 1;
  if (this->is_set() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CppShapeInferenceResult_HandleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  GOOGLE_DCHECK_NE(&from, this);
  const CppShapeInferenceResult_HandleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CppShapeInferenceResult_HandleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
    MergeFrom(*source);
  }
}

void CppShapeInferenceResult_HandleData::MergeFrom(const CppShapeInferenceResult_HandleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_and_type_.MergeFrom(from.shape_and_type_);
  if (from.is_set() != 0) {
    set_is_set(from.is_set());
  }
}

void CppShapeInferenceResult_HandleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CppShapeInferenceResult_HandleData::CopyFrom(const CppShapeInferenceResult_HandleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.CppShapeInferenceResult.HandleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceResult_HandleData::IsInitialized() const {
  return true;
}

void CppShapeInferenceResult_HandleData::Swap(CppShapeInferenceResult_HandleData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CppShapeInferenceResult_HandleData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CppShapeInferenceResult_HandleData::UnsafeArenaSwap(CppShapeInferenceResult_HandleData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CppShapeInferenceResult_HandleData::InternalSwap(CppShapeInferenceResult_HandleData* other) {
  using std::swap;
  CastToBase(&shape_and_type_)->InternalSwap(CastToBase(&other->shape_and_type_));
  swap(is_set_, other->is_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CppShapeInferenceResult_HandleData::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CppShapeInferenceResult::InitAsDefaultInstance() {
  ::diplomacy::tensorflow::_CppShapeInferenceResult_default_instance_._instance.get_mutable()->shape_ = const_cast< ::diplomacy::tensorflow::TensorShapeProto*>(
      ::diplomacy::tensorflow::TensorShapeProto::internal_default_instance());
  ::diplomacy::tensorflow::_CppShapeInferenceResult_default_instance_._instance.get_mutable()->handle_data_ = const_cast< ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData*>(
      ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData::internal_default_instance());
}
void CppShapeInferenceResult::unsafe_arena_set_allocated_shape(
    ::diplomacy::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.CppShapeInferenceResult.shape)
}
void CppShapeInferenceResult::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
void CppShapeInferenceResult::unsafe_arena_set_allocated_handle_data(
    ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData* handle_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete handle_data_;
  }
  handle_data_ = handle_data;
  if (handle_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:diplomacy.tensorflow.CppShapeInferenceResult.handle_data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CppShapeInferenceResult::kShapeFieldNumber;
const int CppShapeInferenceResult::kHandleDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CppShapeInferenceResult::CppShapeInferenceResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.CppShapeInferenceResult)
}
CppShapeInferenceResult::CppShapeInferenceResult(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.CppShapeInferenceResult)
}
CppShapeInferenceResult::CppShapeInferenceResult(const CppShapeInferenceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shape()) {
    shape_ = new ::diplomacy::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = NULL;
  }
  if (from.has_handle_data()) {
    handle_data_ = new ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData(*from.handle_data_);
  } else {
    handle_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.CppShapeInferenceResult)
}

void CppShapeInferenceResult::SharedCtor() {
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handle_data_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(handle_data_));
}

CppShapeInferenceResult::~CppShapeInferenceResult() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.CppShapeInferenceResult)
  SharedDtor();
}

void CppShapeInferenceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete handle_data_;
}

void CppShapeInferenceResult::ArenaDtor(void* object) {
  CppShapeInferenceResult* _this = reinterpret_cast< CppShapeInferenceResult* >(object);
  (void)_this;
}
void CppShapeInferenceResult::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CppShapeInferenceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CppShapeInferenceResult::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CppShapeInferenceResult& CppShapeInferenceResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceResult.base);
  return *internal_default_instance();
}


void CppShapeInferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.CppShapeInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && handle_data_ != NULL) {
    delete handle_data_;
  }
  handle_data_ = NULL;
  _internal_metadata_.Clear();
}

bool CppShapeInferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.CppShapeInferenceResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .diplomacy.tensorflow.TensorShapeProto shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .diplomacy.tensorflow.CppShapeInferenceResult.HandleData handle_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handle_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.CppShapeInferenceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.CppShapeInferenceResult)
  return false;
#undef DO_
}

void CppShapeInferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.CppShapeInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.TensorShapeProto shape = 1;
  if (this->has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_shape(), output);
  }

  // .diplomacy.tensorflow.CppShapeInferenceResult.HandleData handle_data = 4;
  if (this->has_handle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_handle_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.CppShapeInferenceResult)
}

::google::protobuf::uint8* CppShapeInferenceResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.CppShapeInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .diplomacy.tensorflow.TensorShapeProto shape = 1;
  if (this->has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_shape(), deterministic, target);
  }

  // .diplomacy.tensorflow.CppShapeInferenceResult.HandleData handle_data = 4;
  if (this->has_handle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_handle_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.CppShapeInferenceResult)
  return target;
}

size_t CppShapeInferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.CppShapeInferenceResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .diplomacy.tensorflow.TensorShapeProto shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .diplomacy.tensorflow.CppShapeInferenceResult.HandleData handle_data = 4;
  if (this->has_handle_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *handle_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CppShapeInferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.CppShapeInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CppShapeInferenceResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CppShapeInferenceResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.CppShapeInferenceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.CppShapeInferenceResult)
    MergeFrom(*source);
  }
}

void CppShapeInferenceResult::MergeFrom(const CppShapeInferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.CppShapeInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    mutable_shape()->::diplomacy::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.has_handle_data()) {
    mutable_handle_data()->::diplomacy::tensorflow::CppShapeInferenceResult_HandleData::MergeFrom(from.handle_data());
  }
}

void CppShapeInferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.CppShapeInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CppShapeInferenceResult::CopyFrom(const CppShapeInferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.CppShapeInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceResult::IsInitialized() const {
  return true;
}

void CppShapeInferenceResult::Swap(CppShapeInferenceResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CppShapeInferenceResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CppShapeInferenceResult::UnsafeArenaSwap(CppShapeInferenceResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CppShapeInferenceResult::InternalSwap(CppShapeInferenceResult* other) {
  using std::swap;
  swap(shape_, other->shape_);
  swap(handle_data_, other->handle_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CppShapeInferenceResult::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CppShapeInferenceInputsNeeded::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CppShapeInferenceInputsNeeded::kInputTensorsNeededFieldNumber;
const int CppShapeInferenceInputsNeeded::kInputTensorsAsShapesNeededFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CppShapeInferenceInputsNeeded::CppShapeInferenceInputsNeeded()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceInputsNeeded.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
}
CppShapeInferenceInputsNeeded::CppShapeInferenceInputsNeeded(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  input_tensors_needed_(arena),
  input_tensors_as_shapes_needed_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceInputsNeeded.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
}
CppShapeInferenceInputsNeeded::CppShapeInferenceInputsNeeded(const CppShapeInferenceInputsNeeded& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      input_tensors_needed_(from.input_tensors_needed_),
      input_tensors_as_shapes_needed_(from.input_tensors_as_shapes_needed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
}

void CppShapeInferenceInputsNeeded::SharedCtor() {
}

CppShapeInferenceInputsNeeded::~CppShapeInferenceInputsNeeded() {
  // @@protoc_insertion_point(destructor:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  SharedDtor();
}

void CppShapeInferenceInputsNeeded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void CppShapeInferenceInputsNeeded::ArenaDtor(void* object) {
  CppShapeInferenceInputsNeeded* _this = reinterpret_cast< CppShapeInferenceInputsNeeded* >(object);
  (void)_this;
}
void CppShapeInferenceInputsNeeded::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CppShapeInferenceInputsNeeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CppShapeInferenceInputsNeeded::descriptor() {
  ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CppShapeInferenceInputsNeeded& CppShapeInferenceInputsNeeded::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::scc_info_CppShapeInferenceInputsNeeded.base);
  return *internal_default_instance();
}


void CppShapeInferenceInputsNeeded::Clear() {
// @@protoc_insertion_point(message_clear_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_tensors_needed_.Clear();
  input_tensors_as_shapes_needed_.Clear();
  _internal_metadata_.Clear();
}

bool CppShapeInferenceInputsNeeded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 input_tensors_needed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_tensors_needed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_input_tensors_needed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 input_tensors_as_shapes_needed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_tensors_as_shapes_needed())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_input_tensors_as_shapes_needed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  return false;
#undef DO_
}

void CppShapeInferenceInputsNeeded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_tensors_needed = 1;
  if (this->input_tensors_needed_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _input_tensors_needed_cached_byte_size_));
  }
  for (int i = 0, n = this->input_tensors_needed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_tensors_needed(i), output);
  }

  // repeated int32 input_tensors_as_shapes_needed = 2;
  if (this->input_tensors_as_shapes_needed_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _input_tensors_as_shapes_needed_cached_byte_size_));
  }
  for (int i = 0, n = this->input_tensors_as_shapes_needed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_tensors_as_shapes_needed(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
}

::google::protobuf::uint8* CppShapeInferenceInputsNeeded::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_tensors_needed = 1;
  if (this->input_tensors_needed_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _input_tensors_needed_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_tensors_needed_, target);
  }

  // repeated int32 input_tensors_as_shapes_needed = 2;
  if (this->input_tensors_as_shapes_needed_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _input_tensors_as_shapes_needed_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_tensors_as_shapes_needed_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  return target;
}

size_t CppShapeInferenceInputsNeeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 input_tensors_needed = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->input_tensors_needed_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_tensors_needed_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 input_tensors_as_shapes_needed = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->input_tensors_as_shapes_needed_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_tensors_as_shapes_needed_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CppShapeInferenceInputsNeeded::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  const CppShapeInferenceInputsNeeded* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CppShapeInferenceInputsNeeded>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
    MergeFrom(*source);
  }
}

void CppShapeInferenceInputsNeeded::MergeFrom(const CppShapeInferenceInputsNeeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_tensors_needed_.MergeFrom(from.input_tensors_needed_);
  input_tensors_as_shapes_needed_.MergeFrom(from.input_tensors_as_shapes_needed_);
}

void CppShapeInferenceInputsNeeded::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CppShapeInferenceInputsNeeded::CopyFrom(const CppShapeInferenceInputsNeeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:diplomacy.tensorflow.CppShapeInferenceInputsNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceInputsNeeded::IsInitialized() const {
  return true;
}

void CppShapeInferenceInputsNeeded::Swap(CppShapeInferenceInputsNeeded* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CppShapeInferenceInputsNeeded* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CppShapeInferenceInputsNeeded::UnsafeArenaSwap(CppShapeInferenceInputsNeeded* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CppShapeInferenceInputsNeeded::InternalSwap(CppShapeInferenceInputsNeeded* other) {
  using std::swap;
  input_tensors_needed_.InternalSwap(&other->input_tensors_needed_);
  input_tensors_as_shapes_needed_.InternalSwap(&other->input_tensors_as_shapes_needed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CppShapeInferenceInputsNeeded::GetMetadata() const {
  protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_diplomacy_5ftensorflow_2fpython_2fframework_2fcpp_5fshape_5finference_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
}  // namespace diplomacy
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::CppShapeInferenceResult_HandleShapeAndType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::CppShapeInferenceResult_HandleData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::CppShapeInferenceResult* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::CppShapeInferenceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::CppShapeInferenceResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::diplomacy::tensorflow::CppShapeInferenceInputsNeeded* Arena::CreateMaybeMessage< ::diplomacy::tensorflow::CppShapeInferenceInputsNeeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::diplomacy::tensorflow::CppShapeInferenceInputsNeeded >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
