// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diplomacy_tensorflow/tools/api/lib/api_objects.proto

#ifndef PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto
#define PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto 

namespace protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto
namespace third_party {
namespace tensorflow {
namespace tools {
namespace api {
class TFAPIClass;
class TFAPIClassDefaultTypeInternal;
extern TFAPIClassDefaultTypeInternal _TFAPIClass_default_instance_;
class TFAPIMember;
class TFAPIMemberDefaultTypeInternal;
extern TFAPIMemberDefaultTypeInternal _TFAPIMember_default_instance_;
class TFAPIMethod;
class TFAPIMethodDefaultTypeInternal;
extern TFAPIMethodDefaultTypeInternal _TFAPIMethod_default_instance_;
class TFAPIModule;
class TFAPIModuleDefaultTypeInternal;
extern TFAPIModuleDefaultTypeInternal _TFAPIModule_default_instance_;
class TFAPIObject;
class TFAPIObjectDefaultTypeInternal;
extern TFAPIObjectDefaultTypeInternal _TFAPIObject_default_instance_;
class TFAPIProto;
class TFAPIProtoDefaultTypeInternal;
extern TFAPIProtoDefaultTypeInternal _TFAPIProto_default_instance_;
}  // namespace api
}  // namespace tools
}  // namespace tensorflow
}  // namespace third_party
namespace google {
namespace protobuf {
template<> ::third_party::tensorflow::tools::api::TFAPIClass* Arena::CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIClass>(Arena*);
template<> ::third_party::tensorflow::tools::api::TFAPIMember* Arena::CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIMember>(Arena*);
template<> ::third_party::tensorflow::tools::api::TFAPIMethod* Arena::CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIMethod>(Arena*);
template<> ::third_party::tensorflow::tools::api::TFAPIModule* Arena::CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIModule>(Arena*);
template<> ::third_party::tensorflow::tools::api::TFAPIObject* Arena::CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIObject>(Arena*);
template<> ::third_party::tensorflow::tools::api::TFAPIProto* Arena::CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace third_party {
namespace tensorflow {
namespace tools {
namespace api {

// ===================================================================

class TFAPIMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:third_party.tensorflow.tools.api.TFAPIMember) */ {
 public:
  TFAPIMember();
  virtual ~TFAPIMember();

  TFAPIMember(const TFAPIMember& from);

  inline TFAPIMember& operator=(const TFAPIMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFAPIMember(TFAPIMember&& from) noexcept
    : TFAPIMember() {
    *this = ::std::move(from);
  }

  inline TFAPIMember& operator=(TFAPIMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFAPIMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFAPIMember* internal_default_instance() {
    return reinterpret_cast<const TFAPIMember*>(
               &_TFAPIMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TFAPIMember* other);
  friend void swap(TFAPIMember& a, TFAPIMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFAPIMember* New() const final {
    return CreateMaybeMessage<TFAPIMember>(NULL);
  }

  TFAPIMember* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TFAPIMember>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TFAPIMember& from);
  void MergeFrom(const TFAPIMember& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFAPIMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string mtype = 2;
  bool has_mtype() const;
  void clear_mtype();
  static const int kMtypeFieldNumber = 2;
  const ::std::string& mtype() const;
  void set_mtype(const ::std::string& value);
  #if LANG_CXX11
  void set_mtype(::std::string&& value);
  #endif
  void set_mtype(const char* value);
  void set_mtype(const char* value, size_t size);
  ::std::string* mutable_mtype();
  ::std::string* release_mtype();
  void set_allocated_mtype(::std::string* mtype);

  // @@protoc_insertion_point(class_scope:third_party.tensorflow.tools.api.TFAPIMember)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_mtype();
  void clear_has_mtype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr mtype_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFAPIMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:third_party.tensorflow.tools.api.TFAPIMethod) */ {
 public:
  TFAPIMethod();
  virtual ~TFAPIMethod();

  TFAPIMethod(const TFAPIMethod& from);

  inline TFAPIMethod& operator=(const TFAPIMethod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFAPIMethod(TFAPIMethod&& from) noexcept
    : TFAPIMethod() {
    *this = ::std::move(from);
  }

  inline TFAPIMethod& operator=(TFAPIMethod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFAPIMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFAPIMethod* internal_default_instance() {
    return reinterpret_cast<const TFAPIMethod*>(
               &_TFAPIMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TFAPIMethod* other);
  friend void swap(TFAPIMethod& a, TFAPIMethod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFAPIMethod* New() const final {
    return CreateMaybeMessage<TFAPIMethod>(NULL);
  }

  TFAPIMethod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TFAPIMethod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TFAPIMethod& from);
  void MergeFrom(const TFAPIMethod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFAPIMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string argspec = 3;
  bool has_argspec() const;
  void clear_argspec();
  static const int kArgspecFieldNumber = 3;
  const ::std::string& argspec() const;
  void set_argspec(const ::std::string& value);
  #if LANG_CXX11
  void set_argspec(::std::string&& value);
  #endif
  void set_argspec(const char* value);
  void set_argspec(const char* value, size_t size);
  ::std::string* mutable_argspec();
  ::std::string* release_argspec();
  void set_allocated_argspec(::std::string* argspec);

  // @@protoc_insertion_point(class_scope:third_party.tensorflow.tools.api.TFAPIMethod)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_path();
  void clear_has_path();
  void set_has_argspec();
  void clear_has_argspec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr argspec_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFAPIModule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:third_party.tensorflow.tools.api.TFAPIModule) */ {
 public:
  TFAPIModule();
  virtual ~TFAPIModule();

  TFAPIModule(const TFAPIModule& from);

  inline TFAPIModule& operator=(const TFAPIModule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFAPIModule(TFAPIModule&& from) noexcept
    : TFAPIModule() {
    *this = ::std::move(from);
  }

  inline TFAPIModule& operator=(TFAPIModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFAPIModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFAPIModule* internal_default_instance() {
    return reinterpret_cast<const TFAPIModule*>(
               &_TFAPIModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TFAPIModule* other);
  friend void swap(TFAPIModule& a, TFAPIModule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFAPIModule* New() const final {
    return CreateMaybeMessage<TFAPIModule>(NULL);
  }

  TFAPIModule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TFAPIModule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TFAPIModule& from);
  void MergeFrom(const TFAPIModule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFAPIModule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 1;
  ::third_party::tensorflow::tools::api::TFAPIMember* mutable_member(int index);
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >*
      mutable_member();
  const ::third_party::tensorflow::tools::api::TFAPIMember& member(int index) const;
  ::third_party::tensorflow::tools::api::TFAPIMember* add_member();
  const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >&
      member() const;

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;
  int member_method_size() const;
  void clear_member_method();
  static const int kMemberMethodFieldNumber = 2;
  ::third_party::tensorflow::tools::api::TFAPIMethod* mutable_member_method(int index);
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >*
      mutable_member_method();
  const ::third_party::tensorflow::tools::api::TFAPIMethod& member_method(int index) const;
  ::third_party::tensorflow::tools::api::TFAPIMethod* add_member_method();
  const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >&
      member_method() const;

  // @@protoc_insertion_point(class_scope:third_party.tensorflow.tools.api.TFAPIModule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember > member_;
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod > member_method_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFAPIClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:third_party.tensorflow.tools.api.TFAPIClass) */ {
 public:
  TFAPIClass();
  virtual ~TFAPIClass();

  TFAPIClass(const TFAPIClass& from);

  inline TFAPIClass& operator=(const TFAPIClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFAPIClass(TFAPIClass&& from) noexcept
    : TFAPIClass() {
    *this = ::std::move(from);
  }

  inline TFAPIClass& operator=(TFAPIClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFAPIClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFAPIClass* internal_default_instance() {
    return reinterpret_cast<const TFAPIClass*>(
               &_TFAPIClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TFAPIClass* other);
  friend void swap(TFAPIClass& a, TFAPIClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFAPIClass* New() const final {
    return CreateMaybeMessage<TFAPIClass>(NULL);
  }

  TFAPIClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TFAPIClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TFAPIClass& from);
  void MergeFrom(const TFAPIClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFAPIClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string is_instance = 1;
  int is_instance_size() const;
  void clear_is_instance();
  static const int kIsInstanceFieldNumber = 1;
  const ::std::string& is_instance(int index) const;
  ::std::string* mutable_is_instance(int index);
  void set_is_instance(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_is_instance(int index, ::std::string&& value);
  #endif
  void set_is_instance(int index, const char* value);
  void set_is_instance(int index, const char* value, size_t size);
  ::std::string* add_is_instance();
  void add_is_instance(const ::std::string& value);
  #if LANG_CXX11
  void add_is_instance(::std::string&& value);
  #endif
  void add_is_instance(const char* value);
  void add_is_instance(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& is_instance() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_is_instance();

  // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  ::third_party::tensorflow::tools::api::TFAPIMember* mutable_member(int index);
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >*
      mutable_member();
  const ::third_party::tensorflow::tools::api::TFAPIMember& member(int index) const;
  ::third_party::tensorflow::tools::api::TFAPIMember* add_member();
  const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >&
      member() const;

  // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;
  int member_method_size() const;
  void clear_member_method();
  static const int kMemberMethodFieldNumber = 3;
  ::third_party::tensorflow::tools::api::TFAPIMethod* mutable_member_method(int index);
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >*
      mutable_member_method();
  const ::third_party::tensorflow::tools::api::TFAPIMethod& member_method(int index) const;
  ::third_party::tensorflow::tools::api::TFAPIMethod* add_member_method();
  const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >&
      member_method() const;

  // @@protoc_insertion_point(class_scope:third_party.tensorflow.tools.api.TFAPIClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> is_instance_;
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember > member_;
  ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod > member_method_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFAPIProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:third_party.tensorflow.tools.api.TFAPIProto) */ {
 public:
  TFAPIProto();
  virtual ~TFAPIProto();

  TFAPIProto(const TFAPIProto& from);

  inline TFAPIProto& operator=(const TFAPIProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFAPIProto(TFAPIProto&& from) noexcept
    : TFAPIProto() {
    *this = ::std::move(from);
  }

  inline TFAPIProto& operator=(TFAPIProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TFAPIProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFAPIProto* internal_default_instance() {
    return reinterpret_cast<const TFAPIProto*>(
               &_TFAPIProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TFAPIProto* other);
  friend void swap(TFAPIProto& a, TFAPIProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFAPIProto* New() const final {
    return CreateMaybeMessage<TFAPIProto>(NULL);
  }

  TFAPIProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TFAPIProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TFAPIProto& from);
  void MergeFrom(const TFAPIProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFAPIProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.DescriptorProto descriptor = 1;
  bool has_descriptor() const;
  void clear_descriptor();
  static const int kDescriptorFieldNumber = 1;
  private:
  const ::google::protobuf::DescriptorProto& _internal_descriptor() const;
  public:
  const ::google::protobuf::DescriptorProto& descriptor() const;
  ::google::protobuf::DescriptorProto* release_descriptor();
  ::google::protobuf::DescriptorProto* mutable_descriptor();
  void set_allocated_descriptor(::google::protobuf::DescriptorProto* descriptor);

  // @@protoc_insertion_point(class_scope:third_party.tensorflow.tools.api.TFAPIProto)
 private:
  void set_has_descriptor();
  void clear_has_descriptor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::DescriptorProto* descriptor_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFAPIObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:third_party.tensorflow.tools.api.TFAPIObject) */ {
 public:
  TFAPIObject();
  virtual ~TFAPIObject();

  TFAPIObject(const TFAPIObject& from);

  inline TFAPIObject& operator=(const TFAPIObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TFAPIObject(TFAPIObject&& from) noexcept
    : TFAPIObject() {
    *this = ::std::move(from);
  }

  inline TFAPIObject& operator=(TFAPIObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFAPIObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TFAPIObject* internal_default_instance() {
    return reinterpret_cast<const TFAPIObject*>(
               &_TFAPIObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TFAPIObject* other);
  friend void swap(TFAPIObject& a, TFAPIObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TFAPIObject* New() const final {
    return CreateMaybeMessage<TFAPIObject>(NULL);
  }

  TFAPIObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TFAPIObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TFAPIObject& from);
  void MergeFrom(const TFAPIObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFAPIObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;
  bool has_tf_module() const;
  void clear_tf_module();
  static const int kTfModuleFieldNumber = 2;
  private:
  const ::third_party::tensorflow::tools::api::TFAPIModule& _internal_tf_module() const;
  public:
  const ::third_party::tensorflow::tools::api::TFAPIModule& tf_module() const;
  ::third_party::tensorflow::tools::api::TFAPIModule* release_tf_module();
  ::third_party::tensorflow::tools::api::TFAPIModule* mutable_tf_module();
  void set_allocated_tf_module(::third_party::tensorflow::tools::api::TFAPIModule* tf_module);

  // optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;
  bool has_tf_class() const;
  void clear_tf_class();
  static const int kTfClassFieldNumber = 3;
  private:
  const ::third_party::tensorflow::tools::api::TFAPIClass& _internal_tf_class() const;
  public:
  const ::third_party::tensorflow::tools::api::TFAPIClass& tf_class() const;
  ::third_party::tensorflow::tools::api::TFAPIClass* release_tf_class();
  ::third_party::tensorflow::tools::api::TFAPIClass* mutable_tf_class();
  void set_allocated_tf_class(::third_party::tensorflow::tools::api::TFAPIClass* tf_class);

  // optional .third_party.tensorflow.tools.api.TFAPIProto tf_proto = 4;
  bool has_tf_proto() const;
  void clear_tf_proto();
  static const int kTfProtoFieldNumber = 4;
  private:
  const ::third_party::tensorflow::tools::api::TFAPIProto& _internal_tf_proto() const;
  public:
  const ::third_party::tensorflow::tools::api::TFAPIProto& tf_proto() const;
  ::third_party::tensorflow::tools::api::TFAPIProto* release_tf_proto();
  ::third_party::tensorflow::tools::api::TFAPIProto* mutable_tf_proto();
  void set_allocated_tf_proto(::third_party::tensorflow::tools::api::TFAPIProto* tf_proto);

  // @@protoc_insertion_point(class_scope:third_party.tensorflow.tools.api.TFAPIObject)
 private:
  void set_has_path();
  void clear_has_path();
  void set_has_tf_module();
  void clear_has_tf_module();
  void set_has_tf_class();
  void clear_has_tf_class();
  void set_has_tf_proto();
  void clear_has_tf_proto();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::third_party::tensorflow::tools::api::TFAPIModule* tf_module_;
  ::third_party::tensorflow::tools::api::TFAPIClass* tf_class_;
  ::third_party::tensorflow::tools::api::TFAPIProto* tf_proto_;
  friend struct ::protobuf_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TFAPIMember

// optional string name = 1;
inline bool TFAPIMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFAPIMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFAPIMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFAPIMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TFAPIMember::name() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMember.name)
  return name_.GetNoArena();
}
inline void TFAPIMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMember.name)
}
#if LANG_CXX11
inline void TFAPIMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMember.name)
}
#endif
inline void TFAPIMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMember.name)
}
inline void TFAPIMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMember.name)
}
inline ::std::string* TFAPIMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFAPIMember::release_name() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMember.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFAPIMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMember.name)
}

// optional string mtype = 2;
inline bool TFAPIMember::has_mtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFAPIMember::set_has_mtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFAPIMember::clear_has_mtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFAPIMember::clear_mtype() {
  mtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mtype();
}
inline const ::std::string& TFAPIMember::mtype() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMember.mtype)
  return mtype_.GetNoArena();
}
inline void TFAPIMember::set_mtype(const ::std::string& value) {
  set_has_mtype();
  mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
#if LANG_CXX11
inline void TFAPIMember::set_mtype(::std::string&& value) {
  set_has_mtype();
  mtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
#endif
inline void TFAPIMember::set_mtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mtype();
  mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
inline void TFAPIMember::set_mtype(const char* value, size_t size) {
  set_has_mtype();
  mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}
inline ::std::string* TFAPIMember::mutable_mtype() {
  set_has_mtype();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMember.mtype)
  return mtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFAPIMember::release_mtype() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMember.mtype)
  if (!has_mtype()) {
    return NULL;
  }
  clear_has_mtype();
  return mtype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFAPIMember::set_allocated_mtype(::std::string* mtype) {
  if (mtype != NULL) {
    set_has_mtype();
  } else {
    clear_has_mtype();
  }
  mtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mtype);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMember.mtype)
}

// -------------------------------------------------------------------

// TFAPIMethod

// optional string name = 1;
inline bool TFAPIMethod::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFAPIMethod::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFAPIMethod::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFAPIMethod::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TFAPIMethod::name() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMethod.name)
  return name_.GetNoArena();
}
inline void TFAPIMethod::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
#if LANG_CXX11
inline void TFAPIMethod::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
#endif
inline void TFAPIMethod::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
inline void TFAPIMethod::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMethod.name)
}
inline ::std::string* TFAPIMethod::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMethod.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFAPIMethod::release_name() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMethod.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFAPIMethod::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMethod.name)
}

// optional string path = 2;
inline bool TFAPIMethod::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFAPIMethod::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFAPIMethod::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFAPIMethod::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& TFAPIMethod::path() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMethod.path)
  return path_.GetNoArena();
}
inline void TFAPIMethod::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
#if LANG_CXX11
inline void TFAPIMethod::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
#endif
inline void TFAPIMethod::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
inline void TFAPIMethod::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMethod.path)
}
inline ::std::string* TFAPIMethod::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMethod.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFAPIMethod::release_path() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMethod.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFAPIMethod::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMethod.path)
}

// optional string argspec = 3;
inline bool TFAPIMethod::has_argspec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFAPIMethod::set_has_argspec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFAPIMethod::clear_has_argspec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFAPIMethod::clear_argspec() {
  argspec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_argspec();
}
inline const ::std::string& TFAPIMethod::argspec() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
  return argspec_.GetNoArena();
}
inline void TFAPIMethod::set_argspec(const ::std::string& value) {
  set_has_argspec();
  argspec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
#if LANG_CXX11
inline void TFAPIMethod::set_argspec(::std::string&& value) {
  set_has_argspec();
  argspec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
#endif
inline void TFAPIMethod::set_argspec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_argspec();
  argspec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
inline void TFAPIMethod::set_argspec(const char* value, size_t size) {
  set_has_argspec();
  argspec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}
inline ::std::string* TFAPIMethod::mutable_argspec() {
  set_has_argspec();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
  return argspec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFAPIMethod::release_argspec() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
  if (!has_argspec()) {
    return NULL;
  }
  clear_has_argspec();
  return argspec_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFAPIMethod::set_allocated_argspec(::std::string* argspec) {
  if (argspec != NULL) {
    set_has_argspec();
  } else {
    clear_has_argspec();
  }
  argspec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), argspec);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIMethod.argspec)
}

// -------------------------------------------------------------------

// TFAPIModule

// repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;
inline int TFAPIModule::member_size() const {
  return member_.size();
}
inline void TFAPIModule::clear_member() {
  member_.Clear();
}
inline ::third_party::tensorflow::tools::api::TFAPIMember* TFAPIModule::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >*
TFAPIModule::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIModule.member)
  return &member_;
}
inline const ::third_party::tensorflow::tools::api::TFAPIMember& TFAPIModule::member(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_.Get(index);
}
inline ::third_party::tensorflow::tools::api::TFAPIMember* TFAPIModule::add_member() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >&
TFAPIModule::member() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIModule.member)
  return member_;
}

// repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;
inline int TFAPIModule::member_method_size() const {
  return member_method_.size();
}
inline void TFAPIModule::clear_member_method() {
  member_method_.Clear();
}
inline ::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIModule::mutable_member_method(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >*
TFAPIModule::mutable_member_method() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return &member_method_;
}
inline const ::third_party::tensorflow::tools::api::TFAPIMethod& TFAPIModule::member_method(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_.Get(index);
}
inline ::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIModule::add_member_method() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >&
TFAPIModule::member_method() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIModule.member_method)
  return member_method_;
}

// -------------------------------------------------------------------

// TFAPIClass

// repeated string is_instance = 1;
inline int TFAPIClass::is_instance_size() const {
  return is_instance_.size();
}
inline void TFAPIClass::clear_is_instance() {
  is_instance_.Clear();
}
inline const ::std::string& TFAPIClass::is_instance(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_.Get(index);
}
inline ::std::string* TFAPIClass::mutable_is_instance(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_.Mutable(index);
}
inline void TFAPIClass::set_is_instance(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  is_instance_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TFAPIClass::set_is_instance(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  is_instance_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TFAPIClass::set_is_instance(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  is_instance_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
inline void TFAPIClass::set_is_instance(int index, const char* value, size_t size) {
  is_instance_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
inline ::std::string* TFAPIClass::add_is_instance() {
  // @@protoc_insertion_point(field_add_mutable:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_.Add();
}
inline void TFAPIClass::add_is_instance(const ::std::string& value) {
  is_instance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
#if LANG_CXX11
inline void TFAPIClass::add_is_instance(::std::string&& value) {
  is_instance_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
#endif
inline void TFAPIClass::add_is_instance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  is_instance_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
inline void TFAPIClass::add_is_instance(const char* value, size_t size) {
  is_instance_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFAPIClass::is_instance() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return is_instance_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TFAPIClass::mutable_is_instance() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIClass.is_instance)
  return &is_instance_;
}

// repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;
inline int TFAPIClass::member_size() const {
  return member_.size();
}
inline void TFAPIClass::clear_member() {
  member_.Clear();
}
inline ::third_party::tensorflow::tools::api::TFAPIMember* TFAPIClass::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >*
TFAPIClass::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIClass.member)
  return &member_;
}
inline const ::third_party::tensorflow::tools::api::TFAPIMember& TFAPIClass::member(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_.Get(index);
}
inline ::third_party::tensorflow::tools::api::TFAPIMember* TFAPIClass::add_member() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMember >&
TFAPIClass::member() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIClass.member)
  return member_;
}

// repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;
inline int TFAPIClass::member_method_size() const {
  return member_method_.size();
}
inline void TFAPIClass::clear_member_method() {
  member_method_.Clear();
}
inline ::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIClass::mutable_member_method(int index) {
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >*
TFAPIClass::mutable_member_method() {
  // @@protoc_insertion_point(field_mutable_list:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return &member_method_;
}
inline const ::third_party::tensorflow::tools::api::TFAPIMethod& TFAPIClass::member_method(int index) const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_.Get(index);
}
inline ::third_party::tensorflow::tools::api::TFAPIMethod* TFAPIClass::add_member_method() {
  // @@protoc_insertion_point(field_add:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::third_party::tensorflow::tools::api::TFAPIMethod >&
TFAPIClass::member_method() const {
  // @@protoc_insertion_point(field_list:third_party.tensorflow.tools.api.TFAPIClass.member_method)
  return member_method_;
}

// -------------------------------------------------------------------

// TFAPIProto

// optional .google.protobuf.DescriptorProto descriptor = 1;
inline bool TFAPIProto::has_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFAPIProto::set_has_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFAPIProto::clear_has_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::google::protobuf::DescriptorProto& TFAPIProto::_internal_descriptor() const {
  return *descriptor_;
}
inline const ::google::protobuf::DescriptorProto& TFAPIProto::descriptor() const {
  const ::google::protobuf::DescriptorProto* p = descriptor_;
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIProto.descriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::DescriptorProto*>(
      &::google::protobuf::_DescriptorProto_default_instance_);
}
inline ::google::protobuf::DescriptorProto* TFAPIProto::release_descriptor() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIProto.descriptor)
  clear_has_descriptor();
  ::google::protobuf::DescriptorProto* temp = descriptor_;
  descriptor_ = NULL;
  return temp;
}
inline ::google::protobuf::DescriptorProto* TFAPIProto::mutable_descriptor() {
  set_has_descriptor();
  if (descriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::DescriptorProto>(GetArenaNoVirtual());
    descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIProto.descriptor)
  return descriptor_;
}
inline void TFAPIProto::set_allocated_descriptor(::google::protobuf::DescriptorProto* descriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(descriptor_);
  }
  if (descriptor) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(descriptor)->GetArena();
    if (message_arena != submessage_arena) {
      descriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, descriptor, submessage_arena);
    }
    set_has_descriptor();
  } else {
    clear_has_descriptor();
  }
  descriptor_ = descriptor;
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIProto.descriptor)
}

// -------------------------------------------------------------------

// TFAPIObject

// optional string path = 1;
inline bool TFAPIObject::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFAPIObject::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFAPIObject::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFAPIObject::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& TFAPIObject::path() const {
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIObject.path)
  return path_.GetNoArena();
}
inline void TFAPIObject::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:third_party.tensorflow.tools.api.TFAPIObject.path)
}
#if LANG_CXX11
inline void TFAPIObject::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:third_party.tensorflow.tools.api.TFAPIObject.path)
}
#endif
inline void TFAPIObject::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:third_party.tensorflow.tools.api.TFAPIObject.path)
}
inline void TFAPIObject::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:third_party.tensorflow.tools.api.TFAPIObject.path)
}
inline ::std::string* TFAPIObject::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIObject.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFAPIObject::release_path() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIObject.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFAPIObject::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIObject.path)
}

// optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;
inline bool TFAPIObject::has_tf_module() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFAPIObject::set_has_tf_module() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFAPIObject::clear_has_tf_module() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFAPIObject::clear_tf_module() {
  if (tf_module_ != NULL) tf_module_->Clear();
  clear_has_tf_module();
}
inline const ::third_party::tensorflow::tools::api::TFAPIModule& TFAPIObject::_internal_tf_module() const {
  return *tf_module_;
}
inline const ::third_party::tensorflow::tools::api::TFAPIModule& TFAPIObject::tf_module() const {
  const ::third_party::tensorflow::tools::api::TFAPIModule* p = tf_module_;
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
  return p != NULL ? *p : *reinterpret_cast<const ::third_party::tensorflow::tools::api::TFAPIModule*>(
      &::third_party::tensorflow::tools::api::_TFAPIModule_default_instance_);
}
inline ::third_party::tensorflow::tools::api::TFAPIModule* TFAPIObject::release_tf_module() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
  clear_has_tf_module();
  ::third_party::tensorflow::tools::api::TFAPIModule* temp = tf_module_;
  tf_module_ = NULL;
  return temp;
}
inline ::third_party::tensorflow::tools::api::TFAPIModule* TFAPIObject::mutable_tf_module() {
  set_has_tf_module();
  if (tf_module_ == NULL) {
    auto* p = CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIModule>(GetArenaNoVirtual());
    tf_module_ = p;
  }
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
  return tf_module_;
}
inline void TFAPIObject::set_allocated_tf_module(::third_party::tensorflow::tools::api::TFAPIModule* tf_module) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tf_module_;
  }
  if (tf_module) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tf_module = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tf_module, submessage_arena);
    }
    set_has_tf_module();
  } else {
    clear_has_tf_module();
  }
  tf_module_ = tf_module;
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIObject.tf_module)
}

// optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;
inline bool TFAPIObject::has_tf_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFAPIObject::set_has_tf_class() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFAPIObject::clear_has_tf_class() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFAPIObject::clear_tf_class() {
  if (tf_class_ != NULL) tf_class_->Clear();
  clear_has_tf_class();
}
inline const ::third_party::tensorflow::tools::api::TFAPIClass& TFAPIObject::_internal_tf_class() const {
  return *tf_class_;
}
inline const ::third_party::tensorflow::tools::api::TFAPIClass& TFAPIObject::tf_class() const {
  const ::third_party::tensorflow::tools::api::TFAPIClass* p = tf_class_;
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
  return p != NULL ? *p : *reinterpret_cast<const ::third_party::tensorflow::tools::api::TFAPIClass*>(
      &::third_party::tensorflow::tools::api::_TFAPIClass_default_instance_);
}
inline ::third_party::tensorflow::tools::api::TFAPIClass* TFAPIObject::release_tf_class() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
  clear_has_tf_class();
  ::third_party::tensorflow::tools::api::TFAPIClass* temp = tf_class_;
  tf_class_ = NULL;
  return temp;
}
inline ::third_party::tensorflow::tools::api::TFAPIClass* TFAPIObject::mutable_tf_class() {
  set_has_tf_class();
  if (tf_class_ == NULL) {
    auto* p = CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIClass>(GetArenaNoVirtual());
    tf_class_ = p;
  }
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
  return tf_class_;
}
inline void TFAPIObject::set_allocated_tf_class(::third_party::tensorflow::tools::api::TFAPIClass* tf_class) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tf_class_;
  }
  if (tf_class) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tf_class = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tf_class, submessage_arena);
    }
    set_has_tf_class();
  } else {
    clear_has_tf_class();
  }
  tf_class_ = tf_class;
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIObject.tf_class)
}

// optional .third_party.tensorflow.tools.api.TFAPIProto tf_proto = 4;
inline bool TFAPIObject::has_tf_proto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFAPIObject::set_has_tf_proto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFAPIObject::clear_has_tf_proto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFAPIObject::clear_tf_proto() {
  if (tf_proto_ != NULL) tf_proto_->Clear();
  clear_has_tf_proto();
}
inline const ::third_party::tensorflow::tools::api::TFAPIProto& TFAPIObject::_internal_tf_proto() const {
  return *tf_proto_;
}
inline const ::third_party::tensorflow::tools::api::TFAPIProto& TFAPIObject::tf_proto() const {
  const ::third_party::tensorflow::tools::api::TFAPIProto* p = tf_proto_;
  // @@protoc_insertion_point(field_get:third_party.tensorflow.tools.api.TFAPIObject.tf_proto)
  return p != NULL ? *p : *reinterpret_cast<const ::third_party::tensorflow::tools::api::TFAPIProto*>(
      &::third_party::tensorflow::tools::api::_TFAPIProto_default_instance_);
}
inline ::third_party::tensorflow::tools::api::TFAPIProto* TFAPIObject::release_tf_proto() {
  // @@protoc_insertion_point(field_release:third_party.tensorflow.tools.api.TFAPIObject.tf_proto)
  clear_has_tf_proto();
  ::third_party::tensorflow::tools::api::TFAPIProto* temp = tf_proto_;
  tf_proto_ = NULL;
  return temp;
}
inline ::third_party::tensorflow::tools::api::TFAPIProto* TFAPIObject::mutable_tf_proto() {
  set_has_tf_proto();
  if (tf_proto_ == NULL) {
    auto* p = CreateMaybeMessage<::third_party::tensorflow::tools::api::TFAPIProto>(GetArenaNoVirtual());
    tf_proto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:third_party.tensorflow.tools.api.TFAPIObject.tf_proto)
  return tf_proto_;
}
inline void TFAPIObject::set_allocated_tf_proto(::third_party::tensorflow::tools::api::TFAPIProto* tf_proto) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tf_proto_;
  }
  if (tf_proto) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tf_proto = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tf_proto, submessage_arena);
    }
    set_has_tf_proto();
  } else {
    clear_has_tf_proto();
  }
  tf_proto_ = tf_proto;
  // @@protoc_insertion_point(field_set_allocated:third_party.tensorflow.tools.api.TFAPIObject.tf_proto)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace tools
}  // namespace tensorflow
}  // namespace third_party

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_diplomacy_5ftensorflow_2ftools_2fapi_2flib_2fapi_5fobjects_2eproto
