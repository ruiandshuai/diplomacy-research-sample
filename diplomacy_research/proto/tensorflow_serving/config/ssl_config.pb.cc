// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/ssl_config.proto

#include "tensorflow_serving/config/ssl_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace serving {
class SSLConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SSLConfig>
      _instance;
} _SSLConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto {
static void InitDefaultsSSLConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_SSLConfig_default_instance_;
    new (ptr) ::tensorflow::serving::SSLConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::SSLConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SSLConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSSLConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SSLConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::SSLConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::SSLConfig, server_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::SSLConfig, server_cert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::SSLConfig, custom_ca_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::SSLConfig, client_verify_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::serving::SSLConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::serving::_SSLConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow_serving/config/ssl_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*tensorflow_serving/config/ssl_config.p"
      "roto\022\022tensorflow.serving\"^\n\tSSLConfig\022\022\n"
      "\nserver_key\030\001 \001(\t\022\023\n\013server_cert\030\002 \001(\t\022\021"
      "\n\tcustom_ca\030\003 \001(\t\022\025\n\rclient_verify\030\004 \001(\010"
      "B\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/config/ssl_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto
namespace tensorflow {
namespace serving {

// ===================================================================

void SSLConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSLConfig::kServerKeyFieldNumber;
const int SSLConfig::kServerCertFieldNumber;
const int SSLConfig::kCustomCaFieldNumber;
const int SSLConfig::kClientVerifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSLConfig::SSLConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto::scc_info_SSLConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.SSLConfig)
}
SSLConfig::SSLConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto::scc_info_SSLConfig.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.SSLConfig)
}
SSLConfig::SSLConfig(const SSLConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_key().size() > 0) {
    server_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_key(),
      GetArenaNoVirtual());
  }
  server_cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_cert().size() > 0) {
    server_cert_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_cert(),
      GetArenaNoVirtual());
  }
  custom_ca_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.custom_ca().size() > 0) {
    custom_ca_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_ca(),
      GetArenaNoVirtual());
  }
  client_verify_ = from.client_verify_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.SSLConfig)
}

void SSLConfig::SharedCtor() {
  server_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_ca_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_verify_ = false;
}

SSLConfig::~SSLConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.SSLConfig)
  SharedDtor();
}

void SSLConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  server_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_ca_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SSLConfig::ArenaDtor(void* object) {
  SSLConfig* _this = reinterpret_cast< SSLConfig* >(object);
  (void)_this;
}
void SSLConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SSLConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SSLConfig::descriptor() {
  ::protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSLConfig& SSLConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto::scc_info_SSLConfig.base);
  return *internal_default_instance();
}


void SSLConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.SSLConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  server_cert_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  custom_ca_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_verify_ = false;
  _internal_metadata_.Clear();
}

bool SSLConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.SSLConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string server_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_key().data(), static_cast<int>(this->server_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.SSLConfig.server_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_cert = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_cert()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_cert().data(), static_cast<int>(this->server_cert().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.SSLConfig.server_cert"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_ca = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_ca()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_ca().data(), static_cast<int>(this->custom_ca().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.SSLConfig.custom_ca"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool client_verify = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_verify_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.SSLConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.SSLConfig)
  return false;
#undef DO_
}

void SSLConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.SSLConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_key = 1;
  if (this->server_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_key().data(), static_cast<int>(this->server_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_key(), output);
  }

  // string server_cert = 2;
  if (this->server_cert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_cert().data(), static_cast<int>(this->server_cert().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_cert");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_cert(), output);
  }

  // string custom_ca = 3;
  if (this->custom_ca().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_ca().data(), static_cast<int>(this->custom_ca().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.custom_ca");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->custom_ca(), output);
  }

  // bool client_verify = 4;
  if (this->client_verify() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->client_verify(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.serving.SSLConfig)
}

::google::protobuf::uint8* SSLConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.SSLConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_key = 1;
  if (this->server_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_key().data(), static_cast<int>(this->server_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_key(), target);
  }

  // string server_cert = 2;
  if (this->server_cert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_cert().data(), static_cast<int>(this->server_cert().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.server_cert");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_cert(), target);
  }

  // string custom_ca = 3;
  if (this->custom_ca().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_ca().data(), static_cast<int>(this->custom_ca().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.SSLConfig.custom_ca");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->custom_ca(), target);
  }

  // bool client_verify = 4;
  if (this->client_verify() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->client_verify(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.SSLConfig)
  return target;
}

size_t SSLConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.SSLConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string server_key = 1;
  if (this->server_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_key());
  }

  // string server_cert = 2;
  if (this->server_cert().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_cert());
  }

  // string custom_ca = 3;
  if (this->custom_ca().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_ca());
  }

  // bool client_verify = 4;
  if (this->client_verify() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSLConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.SSLConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SSLConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSLConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.SSLConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.SSLConfig)
    MergeFrom(*source);
  }
}

void SSLConfig::MergeFrom(const SSLConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.SSLConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_key().size() > 0) {
    set_server_key(from.server_key());
  }
  if (from.server_cert().size() > 0) {
    set_server_cert(from.server_cert());
  }
  if (from.custom_ca().size() > 0) {
    set_custom_ca(from.custom_ca());
  }
  if (from.client_verify() != 0) {
    set_client_verify(from.client_verify());
  }
}

void SSLConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.SSLConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSLConfig::CopyFrom(const SSLConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.SSLConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLConfig::IsInitialized() const {
  return true;
}

void SSLConfig::Swap(SSLConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SSLConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SSLConfig::UnsafeArenaSwap(SSLConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SSLConfig::InternalSwap(SSLConfig* other) {
  using std::swap;
  server_key_.Swap(&other->server_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_cert_.Swap(&other->server_cert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_ca_.Swap(&other->custom_ca_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_verify_, other->client_verify_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SSLConfig::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_5fserving_2fconfig_2fssl_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::serving::SSLConfig* Arena::CreateMaybeMessage< ::tensorflow::serving::SSLConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::SSLConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
